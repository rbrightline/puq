var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Encryption.html",[0,0.646,1,0.646]],["body/classes/Encryption.html",[0,0.27,1,0.886,2,0.474,3,0.626,4,0.474,5,0.474,6,0.626,7,1.008,8,0.767,9,1.039,10,1.422,11,1.422,12,1.822,13,1.174,14,2.537,15,0.361,16,0.598,17,2.306,18,2.667,19,2.306,20,1.719,21,1.719,22,1.822,23,1.331,24,0.598,25,1.854,26,1.174,27,1.302,28,2.121,29,1.422,30,1.331,31,1.422,32,1.184,33,0.11,34,2.555,35,1.55,36,1.55,37,2.537,38,2.256,39,2.687,40,2.132,41,0.857,42,1.55,43,0.857,44,1.719,45,1.039,46,0.857,47,2.537,48,1.854,49,1.854,50,0.857,51,2.679,52,1.422,53,3.216,54,0.857,55,1.184,56,2.918,57,2.121,58,1.55,59,1.174,60,1.55,61,1.422,62,2.121,63,1.039,64,2.121,65,2.055,66,2.132,67,2.055,68,1.55,69,2.121,70,0.857,71,1.719,72,0.857,73,1.422,74,0.857,75,1.039,76,2.121,77,1.422,78,1.422,79,0.598,80,1.422,81,0.857,82,1.422,83,1.422,84,1.422,85,1.331,86,1.331,87,0.857,88,1.039,89,0.626,90,1.039,91,0.857,92,0.857,93,0.857,94,0.857,95,1.422,96,0.626,97,0.626,98,1.854,99,0.626,100,1.039,101,1.039,102,0.893,103,0.626,104,0.626,105,1.422,106,1.422,107,1.422,108,1.422,109,1.964,110,0.857,111,0.857,112,0.857,113,1.719,114,1.039,115,1.55,116,1.55,117,0.857,118,0.857,119,0.857,120,1.422,121,1.422,122,0.857,123,1.422,124,0.857,125,0.857,126,1.422,127,0.857,128,1.422,129,1.422,130,1.422,131,0.857,132,0.857,133,0.857,134,0.857,135,1.039,136,0.857,137,0.857,138,0.857,139,0.857,140,0.857,141,0.857,142,0.857,143,0.857,144,0.038,145,0.038]],["title/classes/Hash.html",[0,0.646,146,0.863]],["body/classes/Hash.html",[0,0.308,2,0.541,3,0.714,4,0.541,5,0.541,7,1.105,8,0.967,9,1.158,15,0.411,16,0.667,17,2.504,18,2.684,19,2.504,20,1.844,21,1.844,23,1.459,24,0.667,25,1.974,30,1.459,32,1.289,33,0.109,34,2.67,35,1.844,36,1.844,38,1.459,40,2.165,42,1.678,44,1.459,45,1.158,48,1.678,49,1.158,51,1.974,55,1.354,58,1.459,59,1.105,60,1.459,63,1.158,65,1.678,66,1.844,67,2.165,68,1.678,75,1.158,79,0.967,85,1.459,86,1.459,88,1.158,89,0.714,90,0.714,96,1.158,97,0.714,98,1.844,99,0.714,100,1.678,101,0.714,102,0.841,103,0.714,104,0.714,109,1.459,113,1.158,114,1.158,115,1.158,116,2.165,135,1.158,144,0.043,145,0.043,146,1.529,147,0.541,148,0.877,149,1.997,150,1.997,151,1.997,152,1.997,153,1.584,154,1.584,155,0.978,156,0.978,157,1.584,158,0.978,159,1.997,160,1.997,161,0.978,162,0.978,163,3.427,164,0.978,165,2.297,166,0.978,167,1.584,168,1.584,169,2.297,170,1.584,171,2.297,172,1.271,173,1.584,174,1.584,175,1.584,176,1.584,177,1.584,178,1.584,179,1.584,180,0.978,181,1.584,182,1.584,183,1.584,184,1.584,185,0.978,186,0.978,187,0.541,188,0.978,189,0.978,190,0.978,191,1.584,192,1.584,193,1.584,194,1.584,195,2.297,196,1.584,197,1.584,198,1.584,199,0.978,200,1.584,201,0.978,202,0.978,203,0.978,204,0.978,205,0.978,206,0.978]],["title/coverage.html",[207,2.009]],["body/coverage.html",[0,1.055,1,0.881,5,1.547,6,2.042,32,1.409,33,0.103,102,1.176,144,0.091,145,0.091,146,1.176,147,1.853,187,1.547,207,2.042,208,2.042,209,2.795,210,2.795,211,3.348,212,2.795,213,2.795,214,2.795,215,2.795,216,2.795,217,2.795,218,2.795]],["title/dependencies.html",[219,1.268,220,1.357]],["body/dependencies.html",[33,0.101,144,0.096,145,0.096,220,1.702,221,3.076,222,3.076]],["title/index.html",[15,0.731,223,1.736,224,1.736]],["body/index.html",[1,0.66,4,1.158,8,0.881,13,1.543,24,0.881,26,1.158,27,1.158,33,0.085,55,1.407,59,1.158,79,1.174,102,0.881,144,0.075,145,0.075,148,1.543,172,1.158,208,1.53,220,1.158,225,2.788,226,2.093,227,2.544,228,1.53,229,2.037,230,1.53,231,1.53,232,1.53,233,1.53,234,2.037,235,1.53,236,1.53,237,1.53,238,1.53,239,1.53,240,1.53,241,1.53,242,1.53,243,1.53,244,1.53,245,1.53,246,1.53,247,1.53,248,1.53,249,1.53,250,1.53,251,1.53,252,2.093,253,2.093,254,2.093,255,2.093,256,2.093,257,2.093,258,2.093,259,2.093,260,2.788,261,2.093,262,2.093,263,2.093,264,2.093,265,2.093,266,2.093,267,2.093,268,2.093,269,2.093,270,2.093,271,2.093,272,2.093,273,2.788,274,2.788,275,2.093,276,2.093,277,2.093,278,2.093,279,2.093,280,2.093,281,2.788,282,2.093,283,2.093,284,2.093,285,2.093,286,2.093,287,2.093,288,2.093,289,2.093,290,2.093,291,2.093,292,2.093,293,2.093,294,2.093,295,2.093,296,2.093,297,2.093,298,2.093,299,2.093,300,2.093,301,2.093,302,2.093,303,2.093,304,2.788,305,2.093,306,2.093]],["title/modules.html",[307,2.009]],["body/modules.html",[33,0.096,144,0.096,145,0.096,307,2.276]],["title/overview.html",[308,2.009]],["body/overview.html",[2,1.709,33,0.096,144,0.096,145,0.096,308,2.257,309,3.089]],["title/properties.html",[16,1.032,219,1.268]],["body/properties.html",[1,0.759,7,1.333,8,1.286,13,1.333,16,1.014,24,1.014,26,1.333,27,1.691,33,0.105,55,1.485,71,1.761,79,1.014,144,0.083,145,0.083,146,1.014,148,1.691,172,1.333,227,1.761,228,1.761,229,1.761,230,1.761,231,1.761,232,1.761,233,1.761,234,2.232,235,1.761,236,1.761,237,1.761,238,1.761,239,1.761,240,1.761,241,1.761,242,1.761,243,1.761,244,1.761,245,1.761,246,1.761,247,1.761,248,1.761,249,1.761,250,1.761,251,1.761,310,2.409,311,2.409,312,2.409,313,2.409,314,2.409,315,2.409,316,2.409,317,2.409,318,2.409,319,2.409,320,2.409,321,2.409,322,2.409,323,2.409,324,2.409,325,2.409]],["title/miscellaneous/typealiases.html",[326,1.268,327,2.452]],["body/miscellaneous/typealiases.html",[15,1.263,32,1.469,33,0.094,144,0.094,145,0.094,147,1.66,187,1.932,326,2.193,328,3,329,3,330,3]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":215,"title":{},"body":{"coverage.html":{}}}],["0.5.15",{"_index":222,"title":{},"body":{"dependencies.html":{}}}],["0.5.50",{"_index":310,"title":{},"body":{"properties.html":{}}}],["0/1",{"_index":216,"title":{},"body":{"coverage.html":{}}}],["10/10",{"_index":212,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["100000",{"_index":157,"title":{},"body":{"classes/Hash.html":{}}}],["128",{"_index":97,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["16",{"_index":45,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["2",{"_index":309,"title":{},"body":{"overview.html":{}}}],["256",{"_index":38,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["32",{"_index":49,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["9/9",{"_index":213,"title":{},"body":{"coverage.html":{}}}],["__encrypted",{"_index":130,"title":{},"body":{"classes/Encryption.html":{}}}],["__iv",{"_index":129,"title":{},"body":{"classes/Encryption.html":{}}}],["__version",{"_index":128,"title":{},"body":{"classes/Encryption.html":{}}}],["add",{"_index":255,"title":{},"body":{"index.html":{}}}],["aes",{"_index":37,"title":{},"body":{"classes/Encryption.html":{}}}],["against",{"_index":168,"title":{},"body":{"classes/Hash.html":{}}}],["algorithm",{"_index":20,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["algorithms",{"_index":237,"title":{},"body":{"index.html":{},"properties.html":{}}}],["alias",{"_index":214,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":328,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":238,"title":{},"body":{"index.html":{},"properties.html":{}}}],["applications",{"_index":251,"title":{},"body":{"index.html":{},"properties.html":{}}}],["async",{"_index":25,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["asynchronous",{"_index":11,"title":{},"body":{"classes/Encryption.html":{}}}],["asynchronously",{"_index":57,"title":{},"body":{"classes/Encryption.html":{}}}],["attacks",{"_index":203,"title":{},"body":{"classes/Hash.html":{}}}],["author",{"_index":323,"title":{},"body":{"properties.html":{}}}],["await",{"_index":191,"title":{},"body":{"classes/Hash.html":{}}}],["bit",{"_index":77,"title":{},"body":{"classes/Encryption.html":{}}}],["bits",{"_index":65,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["boolean",{"_index":176,"title":{},"body":{"classes/Hash.html":{}}}],["both",{"_index":182,"title":{},"body":{"classes/Hash.html":{}}}],["brightline",{"_index":325,"title":{},"body":{"properties.html":{}}}],["buffer",{"_index":53,"title":{},"body":{"classes/Encryption.html":{}}}],["buffer.from(__iv",{"_index":134,"title":{},"body":{"classes/Encryption.html":{}}}],["buffer.from(hash",{"_index":205,"title":{},"body":{"classes/Hash.html":{}}}],["buffer.from(storedhash",{"_index":206,"title":{},"body":{"classes/Hash.html":{}}}],["bug",{"_index":284,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":317,"title":{},"body":{"properties.html":{}}}],["bytes",{"_index":104,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["bytes/256",{"_index":64,"title":{},"body":{"classes/Encryption.html":{}}}],["cbc",{"_index":39,"title":{},"body":{"classes/Encryption.html":{}}}],["check",{"_index":88,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["chunk",{"_index":121,"title":{},"body":{"classes/Encryption.html":{}}}],["chunk.tostring('utf8",{"_index":140,"title":{},"body":{"classes/Encryption.html":{}}}],["chunk.tostring(this.encoding",{"_index":122,"title":{},"body":{"classes/Encryption.html":{}}}],["cipher",{"_index":111,"title":{},"body":{"classes/Encryption.html":{}}}],["class",{"_index":0,"title":{"classes/Encryption.html":{},"classes/Hash.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"overview.html":{}}}],["compare",{"_index":152,"title":{},"body":{"classes/Hash.html":{}}}],["compare(data",{"_index":164,"title":{},"body":{"classes/Hash.html":{}}}],["compares",{"_index":167,"title":{},"body":{"classes/Hash.html":{}}}],["comparison",{"_index":149,"title":{},"body":{"classes/Hash.html":{}}}],["compatibility",{"_index":287,"title":{},"body":{"index.html":{}}}],["confidentiality",{"_index":248,"title":{},"body":{"index.html":{},"properties.html":{}}}],["consider",{"_index":268,"title":{},"body":{"index.html":{}}}],["const",{"_index":109,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["contact",{"_index":303,"title":{},"body":{"index.html":{}}}],["containing",{"_index":78,"title":{},"body":{"classes/Encryption.html":{}}}],["contributions",{"_index":272,"title":{},"body":{"index.html":{}}}],["count",{"_index":160,"title":{},"body":{"classes/Hash.html":{}}}],["coverage",{"_index":207,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":118,"title":{},"body":{"classes/Encryption.html":{}}}],["createcipheriv",{"_index":92,"title":{},"body":{"classes/Encryption.html":{}}}],["createcipheriv(this.algorithm",{"_index":112,"title":{},"body":{"classes/Encryption.html":{}}}],["createdecipheriv",{"_index":93,"title":{},"body":{"classes/Encryption.html":{}}}],["createdecipheriv(this.algorithm",{"_index":137,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto",{"_index":8,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["crypto.pbkdf2",{"_index":192,"title":{},"body":{"classes/Hash.html":{}}}],["crypto.randombytes(this.salt_length).tostring(this.encoding",{"_index":190,"title":{},"body":{"classes/Hash.html":{}}}],["crypto.timingsafeequal",{"_index":204,"title":{},"body":{"classes/Hash.html":{}}}],["data",{"_index":55,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["date",{"_index":277,"title":{},"body":{"index.html":{}}}],["decipher",{"_index":136,"title":{},"body":{"classes/Encryption.html":{}}}],["decode",{"_index":314,"title":{},"body":{"properties.html":{}}}],["decrypt",{"_index":26,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["decrypt(encrypteddata",{"_index":52,"title":{},"body":{"classes/Encryption.html":{}}}],["decrypted",{"_index":69,"title":{},"body":{"classes/Encryption.html":{}}}],["decryption",{"_index":12,"title":{},"body":{"classes/Encryption.html":{}}}],["default",{"_index":35,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["defined",{"_index":40,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["dependencies",{"_index":220,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["derivedkey",{"_index":196,"title":{},"body":{"classes/Hash.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"properties.html":{}}}],["developer",{"_index":304,"title":{},"body":{"index.html":{}}}],["development",{"_index":271,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":208,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["e.g",{"_index":171,"title":{},"body":{"classes/Hash.html":{}}}],["effort",{"_index":264,"title":{},"body":{"index.html":{}}}],["encode",{"_index":313,"title":{},"body":{"properties.html":{}}}],["encoded",{"_index":183,"title":{},"body":{"classes/Hash.html":{}}}],["encoding",{"_index":21,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["encrypt",{"_index":27,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["encrypt(data",{"_index":70,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypted",{"_index":56,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypteddata",{"_index":61,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypteddata.split",{"_index":131,"title":{},"body":{"classes/Encryption.html":{}}}],["encryption",{"_index":1,"title":{"classes/Encryption.html":{}},"body":{"classes/Encryption.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["encrypts",{"_index":73,"title":{},"body":{"classes/Encryption.html":{}}}],["ensure",{"_index":274,"title":{},"body":{"index.html":{}}}],["ensuring",{"_index":247,"title":{},"body":{"index.html":{},"properties.html":{}}}],["environment",{"_index":82,"title":{},"body":{"classes/Encryption.html":{}}}],["err",{"_index":195,"title":{},"body":{"classes/Hash.html":{}}}],["error",{"_index":106,"title":{},"body":{"classes/Encryption.html":{}}}],["error('invalid",{"_index":132,"title":{},"body":{"classes/Encryption.html":{}}}],["error(`key",{"_index":103,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["even",{"_index":292,"title":{},"body":{"index.html":{}}}],["example",{"_index":253,"title":{},"body":{"index.html":{}}}],["export",{"_index":96,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["fails",{"_index":127,"title":{},"body":{"classes/Encryption.html":{}}}],["features",{"_index":290,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{}}}],["find",{"_index":265,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":285,"title":{},"body":{"index.html":{}}}],["format",{"_index":133,"title":{},"body":{"classes/Encryption.html":{}}}],["functions",{"_index":233,"title":{},"body":{"index.html":{},"properties.html":{}}}],["funding",{"_index":281,"title":{},"body":{"index.html":{}}}],["general",{"_index":297,"title":{},"body":{"index.html":{}}}],["generated",{"_index":174,"title":{},"body":{"classes/Hash.html":{}}}],["generatekey",{"_index":28,"title":{},"body":{"classes/Encryption.html":{}}}],["generates",{"_index":75,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["getkeyfromenv",{"_index":29,"title":{},"body":{"classes/Encryption.html":{}}}],["getkeyfromenv(version",{"_index":80,"title":{},"body":{"classes/Encryption.html":{}}}],["getting",{"_index":223,"title":{"index.html":{}},"body":{}}],["go",{"_index":282,"title":{},"body":{"index.html":{}}}],["handling",{"_index":231,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hash",{"_index":146,"title":{"classes/Hash.html":{}},"body":{"classes/Hash.html":{},"coverage.html":{},"properties.html":{}}}],["hash(data",{"_index":179,"title":{},"body":{"classes/Hash.html":{}}}],["hashing",{"_index":148,"title":{},"body":{"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["hashresult",{"_index":187,"title":{},"body":{"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["help",{"_index":273,"title":{},"body":{"index.html":{}}}],["hex",{"_index":42,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["high",{"_index":188,"title":{},"body":{"classes/Hash.html":{}}}],["homepage",{"_index":315,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":322,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":318,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/crypto",{"_index":316,"title":{},"body":{"properties.html":{}}}],["ideal",{"_index":242,"title":{},"body":{"index.html":{},"properties.html":{}}}],["identifier",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["implementing",{"_index":245,"title":{},"body":{"index.html":{},"properties.html":{}}}],["import",{"_index":90,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["improvements",{"_index":294,"title":{},"body":{"index.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"miscellaneous/typealiases.html":{}}}],["indicating",{"_index":177,"title":{},"body":{"classes/Hash.html":{}}}],["industry",{"_index":235,"title":{},"body":{"index.html":{},"properties.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["information",{"_index":244,"title":{},"body":{"index.html":{},"properties.html":{}}}],["input",{"_index":116,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["install",{"_index":252,"title":{},"body":{"index.html":{}}}],["instant",{"_index":280,"title":{},"body":{"index.html":{}}}],["integrity",{"_index":240,"title":{},"body":{"index.html":{},"properties.html":{}}}],["invalid",{"_index":107,"title":{},"body":{"classes/Encryption.html":{}}}],["it's",{"_index":258,"title":{},"body":{"index.html":{}}}],["iteration",{"_index":159,"title":{},"body":{"classes/Hash.html":{}}}],["iterations",{"_index":150,"title":{},"body":{"classes/Hash.html":{}}}],["iv",{"_index":47,"title":{},"body":{"classes/Encryption.html":{}}}],["iv:encrypted_data",{"_index":62,"title":{},"body":{"classes/Encryption.html":{}}}],["iv_length",{"_index":22,"title":{},"body":{"classes/Encryption.html":{}}}],["keep",{"_index":299,"title":{},"body":{"index.html":{}}}],["key",{"_index":51,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["key?.length",{"_index":99,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["key_length",{"_index":23,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["keywords",{"_index":311,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":288,"title":{},"body":{"index.html":{}}}],["length",{"_index":48,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["library",{"_index":227,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":319,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":330,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintained",{"_index":279,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":261,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":298,"title":{},"body":{"index.html":{}}}],["make",{"_index":291,"title":{},"body":{"index.html":{}}}],["matches",{"_index":178,"title":{},"body":{"classes/Hash.html":{}}}],["matching",{"_index":145,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":24,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["miscellaneous",{"_index":326,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":320,"title":{},"body":{"properties.html":{}}}],["modern",{"_index":249,"title":{},"body":{"index.html":{},"properties.html":{}}}],["modules",{"_index":307,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":293,"title":{},"body":{"index.html":{}}}],["name",{"_index":59,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{}}}],["new",{"_index":102,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"index.html":{}}}],["null",{"_index":86,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["number",{"_index":44,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["object",{"_index":181,"title":{},"body":{"classes/Hash.html":{}}}],["offering",{"_index":228,"title":{},"body":{"index.html":{},"properties.html":{}}}],["on('data",{"_index":120,"title":{},"body":{"classes/Encryption.html":{}}}],["on('end",{"_index":123,"title":{},"body":{"classes/Encryption.html":{}}}],["on('error",{"_index":126,"title":{},"body":{"classes/Encryption.html":{}}}],["ongoing",{"_index":270,"title":{},"body":{"index.html":{}}}],["open",{"_index":259,"title":{},"body":{"index.html":{}}}],["optional",{"_index":60,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["original",{"_index":63,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["out",{"_index":296,"title":{},"body":{"index.html":{}}}],["overview",{"_index":308,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":219,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":98,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["parameters",{"_index":58,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["password",{"_index":172,"title":{},"body":{"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["pipe(cipher",{"_index":119,"title":{},"body":{"classes/Encryption.html":{}}}],["pipe(decipher",{"_index":139,"title":{},"body":{"classes/Encryption.html":{}}}],["please",{"_index":267,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":254,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":229,"title":{},"body":{"index.html":{},"properties.html":{}}}],["prevent",{"_index":202,"title":{},"body":{"classes/Hash.html":{}}}],["previously",{"_index":173,"title":{},"body":{"classes/Hash.html":{}}}],["private",{"_index":17,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["process.env[`encryption_key_${version",{"_index":143,"title":{},"body":{"classes/Encryption.html":{}}}],["project",{"_index":260,"title":{},"body":{"index.html":{}}}],["promise",{"_index":67,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["promise((resolve",{"_index":114,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"properties.html":{}}}],["protected",{"_index":30,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["protecting",{"_index":243,"title":{},"body":{"index.html":{},"properties.html":{}}}],["provides",{"_index":232,"title":{},"body":{"index.html":{},"properties.html":{}}}],["puq",{"_index":312,"title":{},"body":{"properties.html":{}}}],["puq/crypto",{"_index":225,"title":{},"body":{"index.html":{}}}],["puq/cryptofunding",{"_index":256,"title":{},"body":{"index.html":{}}}],["random",{"_index":76,"title":{},"body":{"classes/Encryption.html":{}}}],["randombytes",{"_index":91,"title":{},"body":{"classes/Encryption.html":{}}}],["randombytes(this.iv_length",{"_index":110,"title":{},"body":{"classes/Encryption.html":{}}}],["randombytes(this.key_length",{"_index":142,"title":{},"body":{"classes/Encryption.html":{}}}],["readable",{"_index":94,"title":{},"body":{"classes/Encryption.html":{}}}],["readable.from([buffer.from(__encrypted",{"_index":138,"title":{},"body":{"classes/Encryption.html":{}}}],["readable.from([data",{"_index":117,"title":{},"body":{"classes/Encryption.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["reject",{"_index":115,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["reject(err",{"_index":197,"title":{},"body":{"classes/Hash.html":{}}}],["repository",{"_index":321,"title":{},"body":{"properties.html":{}}}],["resolve",{"_index":124,"title":{},"body":{"classes/Encryption.html":{}}}],["resolve(decrypted",{"_index":141,"title":{},"body":{"classes/Encryption.html":{}}}],["resolve(derivedkey.tostring(this.encoding",{"_index":198,"title":{},"body":{"classes/Hash.html":{}}}],["resolving",{"_index":68,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["results",{"_index":144,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":113,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["returns",{"_index":66,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["robert",{"_index":324,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":305,"title":{},"body":{"index.html":{}}}],["robust",{"_index":239,"title":{},"body":{"index.html":{},"properties.html":{}}}],["running",{"_index":300,"title":{},"body":{"index.html":{}}}],["safe",{"_index":201,"title":{},"body":{"classes/Hash.html":{}}}],["salt",{"_index":163,"title":{},"body":{"classes/Hash.html":{}}}],["salt_length",{"_index":151,"title":{},"body":{"classes/Hash.html":{}}}],["secure",{"_index":79,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["securely",{"_index":302,"title":{},"body":{"index.html":{}}}],["security",{"_index":189,"title":{},"body":{"classes/Hash.html":{}}}],["sensitive",{"_index":234,"title":{},"body":{"index.html":{},"properties.html":{}}}],["sha256",{"_index":154,"title":{},"body":{"classes/Hash.html":{}}}],["smoothly",{"_index":301,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{}}}],["src/.../hash.ts",{"_index":329,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/encryption.ts",{"_index":6,"title":{},"body":{"classes/Encryption.html":{},"coverage.html":{}}}],["src/lib/encryption.ts:106",{"_index":74,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:11",{"_index":41,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:115",{"_index":81,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:16",{"_index":50,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:21",{"_index":46,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:26",{"_index":43,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:32",{"_index":87,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:45",{"_index":72,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:77",{"_index":54,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/hash.ts",{"_index":147,"title":{},"body":{"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hash.ts:12",{"_index":158,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:17",{"_index":161,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:22",{"_index":155,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:27",{"_index":162,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:32",{"_index":156,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:38",{"_index":185,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:49",{"_index":180,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:74",{"_index":166,"title":{},"body":{"classes/Hash.html":{}}}],["standard",{"_index":236,"title":{},"body":{"index.html":{},"properties.html":{}}}],["started",{"_index":224,"title":{"index.html":{}},"body":{}}],["statements",{"_index":210,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["stays",{"_index":275,"title":{},"body":{"index.html":{}}}],["storage",{"_index":246,"title":{},"body":{"index.html":{},"properties.html":{}}}],["stored",{"_index":169,"title":{},"body":{"classes/Hash.html":{}}}],["storedhash",{"_index":165,"title":{},"body":{"classes/Hash.html":{}}}],["stream",{"_index":95,"title":{},"body":{"classes/Encryption.html":{}}}],["streams",{"_index":14,"title":{},"body":{"classes/Encryption.html":{}}}],["string",{"_index":34,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["summary",{"_index":226,"title":{},"body":{"index.html":{}}}],["support",{"_index":306,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":269,"title":{},"body":{"index.html":{}}}],["swc/helpers",{"_index":221,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":218,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":217,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":262,"title":{},"body":{"index.html":{}}}],["thank",{"_index":257,"title":{},"body":{"index.html":{}}}],["this.algorithm",{"_index":194,"title":{},"body":{"classes/Hash.html":{}}}],["this.encoding",{"_index":135,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["this.iterations",{"_index":193,"title":{},"body":{"classes/Hash.html":{}}}],["this.key_length",{"_index":100,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["this.validatekey(key",{"_index":108,"title":{},"body":{"classes/Encryption.html":{}}}],["throw",{"_index":101,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["throws",{"_index":105,"title":{},"body":{"classes/Encryption.html":{}}}],["time",{"_index":263,"title":{},"body":{"index.html":{}}}],["timing",{"_index":200,"title":{},"body":{"classes/Hash.html":{}}}],["toward",{"_index":283,"title":{},"body":{"index.html":{}}}],["truly",{"_index":10,"title":{},"body":{"classes/Encryption.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":327,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":85,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["up",{"_index":276,"title":{},"body":{"index.html":{}}}],["updates",{"_index":286,"title":{},"body":{"index.html":{}}}],["use",{"_index":199,"title":{},"body":{"classes/Hash.html":{}}}],["used",{"_index":175,"title":{},"body":{"classes/Hash.html":{}}}],["useful",{"_index":266,"title":{},"body":{"index.html":{}}}],["users",{"_index":295,"title":{},"body":{"index.html":{}}}],["using",{"_index":13,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["utilities",{"_index":230,"title":{},"body":{"index.html":{},"properties.html":{}}}],["utility",{"_index":9,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["validatedata",{"_index":153,"title":{},"body":{"classes/Hash.html":{}}}],["validatedata(key",{"_index":184,"title":{},"body":{"classes/Hash.html":{}}}],["validatekey",{"_index":31,"title":{},"body":{"classes/Encryption.html":{}}}],["validatekey(key",{"_index":84,"title":{},"body":{"classes/Encryption.html":{}}}],["value",{"_index":36,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["variables",{"_index":83,"title":{},"body":{"classes/Encryption.html":{}}}],["verification",{"_index":241,"title":{},"body":{"index.html":{},"properties.html":{}}}],["verify",{"_index":170,"title":{},"body":{"classes/Hash.html":{}}}],["version",{"_index":71,"title":{},"body":{"classes/Encryption.html":{},"properties.html":{}}}],["version.tostring()}:${iv.tostring(this.encoding)}:${encrypted",{"_index":125,"title":{},"body":{"classes/Encryption.html":{}}}],["versions",{"_index":289,"title":{},"body":{"index.html":{}}}],["void",{"_index":89,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["web",{"_index":250,"title":{},"body":{"index.html":{},"properties.html":{}}}],["well",{"_index":278,"title":{},"body":{"index.html":{}}}],["yes",{"_index":186,"title":{},"body":{"classes/Hash.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Encryption.html":{"url":"classes/Encryption.html","title":"class - Encryption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Encryption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/encryption.ts\n        \n\n\n            \n                Description\n            \n            \n                Crypto utility with truly asynchronous encryption and decryption using streams\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALGORITHM\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ENCODING\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                IV_LENGTH\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                KEY_LENGTH\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                decrypt\n                            \n                            \n                                    Static\n                                    Async\n                                encrypt\n                            \n                            \n                                    Static\n                                generateKey\n                            \n                            \n                                    Static\n                                getKeyFromEnv\n                            \n                            \n                                    Protected\n                                    Static\n                                validateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALGORITHM\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'aes-256-cbc'\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:11\n                        \n                    \n\n            \n                \n                    Algorithm\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ENCODING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hex'\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:26\n                        \n                    \n\n            \n                \n                    Encoding\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        IV_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 16\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:21\n                        \n                    \n\n            \n                \n                    Iv length\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        KEY_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 32\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:16\n                        \n                    \n\n            \n                \n                    Key length\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        decrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrypt(encryptedData: string, key: Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:77\n                        \n                    \n\n\n            \n                \n                        Decrypt data encrypted with AES-256-CBC asynchronously with streams\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encryptedData\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Encrypted string (IV:encrypted_data)\n\n                                            \n                                        \n                                        \n                                                key\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Original encryption key (32 bytes/256 bits)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to decrypted string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    encrypt(data: string, key: Buffer, version: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:45\n                        \n                    \n\n\n            \n                \n                        Encrypts data using AES-256-CBC asynchronously with streams\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String to encrypt\n\n                                            \n                                        \n                                        \n                                                key\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Encryption key (32 bytes/256 bits)\n\n                                            \n                                        \n                                        \n                                                version\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to encrypted string (IV:encrypted_data in hex)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        generateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:106\n                        \n                    \n\n\n            \n                \n                        Generates a random 256-bit key\n\n\n                        \n                            Returns :     Buffer\n\n                        \n                            \n                                Buffer containing a secure random key\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getKeyFromEnv\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeyFromEnv(version: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:115\n                        \n                    \n\n\n            \n                \n                        Get key from environment variables\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                version\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Static\n                        validateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateKey(key: Buffer | undefined | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:32\n                        \n                    \n\n\n            \n                \n                        Check the key has at 256 bits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        Buffer | undefined | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { randomBytes, createCipheriv, createDecipheriv } from 'crypto';\nimport { Readable } from 'stream';\n\n/**\n * Crypto utility with truly asynchronous encryption and decryption using streams\n */\nexport class Encryption {\n  /**\n   * Algorithm\n   */\n  private static readonly ALGORITHM = 'aes-256-cbc';\n\n  /**\n   * Key length\n   */\n  private static readonly KEY_LENGTH = 32; // 256 bits\n\n  /**\n   * Iv length\n   */\n  private static readonly IV_LENGTH = 16; // 128 bits for CBC\n\n  /**\n   * Encoding\n   */\n  private static readonly ENCODING = 'hex';\n\n  /**\n   * Check the key has at 256 bits\n   * @param key\n   */\n  protected static validateKey(key: Buffer | undefined | null) {\n    if (key?.length !== this.KEY_LENGTH) {\n      throw new Error(`Key must be ${this.KEY_LENGTH} bytes`);\n    }\n  }\n\n  /**\n   * Encrypts data using AES-256-CBC asynchronously with streams\n   * @param data String to encrypt\n   * @param key Encryption key (32 bytes/256 bits)\n   * @returns Promise resolving to encrypted string (IV:encrypted_data in hex)\n   * @throws Error if key length is invalid\n   */\n  static async encrypt(\n    data: string,\n    key: Buffer,\n    version: number,\n  ): Promise {\n    this.validateKey(key);\n    const iv = randomBytes(this.IV_LENGTH);\n    const cipher = createCipheriv(this.ALGORITHM, key, iv);\n\n    return new Promise((resolve, reject) => {\n      let encrypted = '';\n      const input = Readable.from([data]); // Create stream from string\n\n      input\n        .pipe(cipher)\n        .on('data', (chunk) => (encrypted += chunk.toString(this.ENCODING)))\n        .on('end', () =>\n          resolve(\n            `${version.toString()}:${iv.toString(this.ENCODING)}:${encrypted}`,\n          ),\n        )\n        .on('error', reject);\n    });\n  }\n\n  /**\n   * Decrypt data encrypted with AES-256-CBC asynchronously with streams\n   * @param encryptedData Encrypted string (IV:encrypted_data)\n   * @param key Original encryption key (32 bytes/256 bits)\n   * @returns Promise resolving to decrypted string\n   * @throws Error if key length is invalid or decryption fails\n   */\n  static async decrypt(encryptedData: string, key: Buffer): Promise {\n    this.validateKey(key);\n\n    const [__version, __iv, __encrypted] = encryptedData.split(':');\n\n    if (!__version || !__iv || !__encrypted) {\n      throw new Error('Invalid encrypted data format');\n    }\n\n    const iv = Buffer.from(__iv, this.ENCODING);\n    const decipher = createDecipheriv(this.ALGORITHM, key, iv);\n    const input = Readable.from([Buffer.from(__encrypted, this.ENCODING)]);\n\n    return new Promise((resolve, reject) => {\n      let decrypted = '';\n      input\n        .pipe(decipher)\n        .on('data', (chunk) => (decrypted += chunk.toString('utf8')))\n        .on('end', () => {\n          return resolve(decrypted);\n        })\n        .on('error', reject);\n    });\n  }\n\n  /**\n   * Generates a random 256-bit key\n   * @returns Buffer containing a secure random key\n   */\n  static generateKey(): Buffer {\n    return randomBytes(this.KEY_LENGTH);\n  }\n\n  /**\n   * Get key from environment variables\n   * @param version\n   * @returns\n   */\n  static getKeyFromEnv(version: string) {\n    return process.env[`ENCRYPTION_KEY_${version}`];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hash.html":{"url":"classes/Hash.html","title":"class - Hash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hash.ts\n        \n\n\n            \n                Description\n            \n            \n                Crypto utility for secure hashing and comparison\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALGORITHM\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ENCODING\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ITERATIONS\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                KEY_LENGTH\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                SALT_LENGTH\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                compare\n                            \n                            \n                                    Static\n                                    Async\n                                hash\n                            \n                            \n                                    Protected\n                                    Static\n                                validateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALGORITHM\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'sha256'\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:22\n                        \n                    \n\n            \n                \n                    algorithm\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ENCODING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hex'\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:32\n                        \n                    \n\n            \n                \n                    encoding\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ITERATIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100000\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:12\n                        \n                    \n\n            \n                \n                    iteration count\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        KEY_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 32\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:17\n                        \n                    \n\n            \n                \n                    key length\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        SALT_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 16\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:27\n                        \n                    \n\n            \n                \n                    salt length\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string, storedHash: string, salt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/hash.ts:74\n                        \n                    \n\n\n            \n                \n                        Compares input data against a stored hash\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Input string to verify (e.g., password)\n\n                                            \n                                        \n                                        \n                                                storedHash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Previously generated hash\n\n                                            \n                                        \n                                        \n                                                salt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Salt used in original hash\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to boolean indicating if input matches stored hash\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/hash.ts:49\n                        \n                    \n\n\n            \n                \n                        Generates a secure hash from input data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String to hash (e.g., password)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise resolving to object with hash and salt (both hex-encoded)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Static\n                        validateData\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateData(key?: string | undefined | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/hash.ts:38\n                        \n                    \n\n\n            \n                \n                        Check the key has at 256 bits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        string | undefined | null\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\n\nexport type HashResult = { hash: string; salt: string };\n\n/**\n * Crypto utility for secure hashing and comparison\n */\nexport class Hash {\n  /**\n   * iteration count\n   */\n  private static readonly ITERATIONS = 100000; // High iteration count for security\n\n  /**\n   * key length\n   */\n  private static readonly KEY_LENGTH = 32; // 256 bits\n\n  /**\n   * algorithm\n   */\n  private static readonly ALGORITHM = 'sha256';\n\n  /**\n   * salt length\n   */\n  private static readonly SALT_LENGTH = 16; // 128 bits\n\n  /**\n   * encoding\n   */\n  private static readonly ENCODING = 'hex';\n\n  /**\n   * Check the key has at 256 bits\n   * @param key\n   */\n  protected static validateData(key?: string | undefined | null) {\n    if (key?.length !== this.KEY_LENGTH) {\n      throw new Error(`Key must be ${this.KEY_LENGTH} bytes`);\n    }\n  }\n\n  /**\n   * Generates a secure hash from input data\n   * @param data String to hash (e.g., password)\n   * @returns Promise resolving to object with hash and salt (both hex-encoded)\n   */\n  static async hash(data: string): Promise {\n    const salt = crypto.randomBytes(this.SALT_LENGTH).toString(this.ENCODING);\n    const hash = await new Promise((resolve, reject) => {\n      crypto.pbkdf2(\n        data,\n        salt,\n        this.ITERATIONS,\n        this.KEY_LENGTH,\n        this.ALGORITHM,\n        (err, derivedKey) => {\n          if (err) reject(err);\n          else resolve(derivedKey.toString(this.ENCODING));\n        },\n      );\n    });\n    return { hash, salt };\n  }\n\n  /**\n   * Compares input data against a stored hash\n   * @param data Input string to verify (e.g., password)\n   * @param storedHash Previously generated hash\n   * @param salt Salt used in original hash\n   * @returns Promise resolving to boolean indicating if input matches stored hash\n   */\n  static async compare(\n    data: string,\n    storedHash: string,\n    salt: string,\n  ): Promise {\n    const hash = await new Promise((resolve, reject) => {\n      crypto.pbkdf2(\n        data,\n        salt,\n        this.ITERATIONS,\n        this.KEY_LENGTH,\n        this.ALGORITHM,\n        (err, derivedKey) => {\n          if (err) reject(err);\n          else resolve(derivedKey.toString(this.ENCODING));\n        },\n      );\n    });\n\n    // Use timing-safe comparison to prevent timing attacks\n    return crypto.timingSafeEqual(\n      Buffer.from(hash, this.ENCODING),\n      Buffer.from(storedHash, this.ENCODING),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/encryption.ts\n            \n            class\n            Encryption\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/lib/hash.ts\n            \n            class\n            Hash\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/lib/hash.ts\n            \n            type alias\n            HashResult\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/crypto\nSummary\nCrypto library offering powerful encryption and hashing utilities for secure data handling. It provides functions to encrypt and decrypt sensitive data using industry-standard algorithms, along with robust hashing methods for data integrity verification. Ideal for protecting sensitive information, implementing password storage, and ensuring data confidentiality in modern web applications.\nInstall\nExample :  pnpm add @puq/cryptoFunding\nThank you for using @puq/crypto It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.5.50\n        \n            Description : Crypto library offering powerful encryption and hashing utilities for secure data handling. It provides functions to encrypt and decrypt sensitive data using industry-standard algorithms, along with robust hashing methods for data integrity verification. Ideal for protecting sensitive information, implementing password storage, and ensuring data confidentiality in modern web applications.\n        \n            Keywords : puq, crypto, hash, encrypt, encode, decode\n        \n            Homepage : https://rbrightline.github.io/puq/crypto\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HashResult   (src/.../hash.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/hash.ts\n    \n    \n        \n            \n                \n                    \n                    HashResult\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
