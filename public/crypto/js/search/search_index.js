var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Encryption.html",[0,0.646,1,0.646]],["body/classes/Encryption.html",[0,0.274,1,0.891,2,0.48,3,0.634,4,0.48,5,0.48,6,0.634,7,1.018,8,0.9,9,1.05,10,1.437,11,1.437,12,1.839,13,1.183,14,2.553,15,0.365,16,0.605,17,2.315,18,2.673,19,2.315,20,1.731,21,1.731,22,1.839,23,1.344,24,0.605,25,1.866,26,1.183,27,1.183,28,2.138,29,1.437,30,1.344,31,1.437,32,1.19,33,0.109,34,2.562,35,1.562,36,1.562,37,2.553,38,2.266,39,2.703,40,2.143,41,0.868,42,1.562,43,0.868,44,1.05,45,1.05,46,0.868,47,2.553,48,1.866,49,1.866,50,0.868,51,2.685,52,1.437,53,3.228,54,0.868,55,1.138,56,2.933,57,2.138,58,1.562,59,1.183,60,1.562,61,1.437,62,2.138,63,1.05,64,2.138,65,2.066,66,2.143,67,2.066,68,1.562,69,2.138,70,1.437,71,0.868,72,1.437,73,0.868,74,1.05,75,2.138,76,1.437,77,1.437,78,0.605,79,1.437,80,0.868,81,1.437,82,1.437,83,1.05,84,1.437,85,1.344,86,1.344,87,0.868,88,1.05,89,0.634,90,1.05,91,0.868,92,1.437,93,0.634,94,0.634,95,1.866,96,0.634,97,1.05,98,1.05,99,0.9,100,0.634,101,0.634,102,1.437,103,1.437,104,1.437,105,1.437,106,1.975,107,0.868,108,0.868,109,0.868,110,1.562,111,1.05,112,1.562,113,1.562,114,0.868,115,0.868,116,0.868,117,1.437,118,1.437,119,0.868,120,1.437,121,0.868,122,1.437,123,0.868,124,1.437,125,1.437,126,0.868,127,0.868,128,0.868,129,0.868,130,1.05,131,0.868,132,0.868,133,0.868,134,0.868,135,0.868,136,0.868,137,0.868,138,0.868,139,0.039,140,0.039]],["title/classes/Hash.html",[0,0.646,141,0.863]],["body/classes/Hash.html",[0,0.305,2,0.536,3,0.707,4,0.536,5,0.536,7,1.098,8,0.961,9,1.148,15,0.407,16,0.661,17,2.498,18,2.68,19,2.498,20,1.835,21,1.835,23,1.45,24,0.661,25,1.965,30,1.45,32,1.284,33,0.109,34,2.666,35,1.835,36,1.835,38,1.45,40,2.157,42,1.669,44,1.45,45,1.148,48,1.669,49,1.148,51,1.965,55,1.35,58,1.45,59,1.098,60,1.45,63,1.148,65,1.669,66,1.835,67,2.157,68,1.669,74,1.148,78,0.961,85,1.45,86,1.45,88,1.148,89,0.707,90,0.707,93,1.148,94,0.707,95,1.835,96,0.707,97,1.669,98,0.707,99,0.835,100,0.707,101,0.707,106,1.45,110,1.148,111,1.148,112,1.148,113,2.157,130,1.148,139,0.042,140,0.042,141,1.527,142,0.536,143,0.87,144,1.984,145,1.984,146,1.984,147,1.984,148,1.572,149,1.572,150,0.968,151,0.968,152,1.572,153,0.968,154,1.984,155,1.984,156,0.968,157,0.968,158,3.419,159,0.968,160,2.283,161,0.968,162,1.572,163,1.572,164,2.283,165,1.572,166,2.283,167,1.264,168,1.572,169,1.572,170,1.572,171,1.572,172,1.572,173,1.572,174,1.572,175,0.968,176,1.572,177,1.572,178,1.572,179,1.572,180,0.968,181,0.968,182,0.536,183,0.968,184,0.968,185,0.968,186,1.572,187,1.572,188,1.572,189,1.572,190,2.283,191,1.572,192,1.572,193,1.572,194,0.968,195,1.572,196,0.968,197,0.968,198,0.968,199,0.968,200,0.968,201,0.968]],["title/coverage.html",[202,2.009]],["body/coverage.html",[0,1.054,1,0.879,5,1.544,6,2.038,32,1.408,33,0.103,99,1.174,139,0.09,140,0.09,141,1.174,142,1.851,182,1.544,202,2.038,203,2.038,204,2.79,205,2.79,206,3.344,207,2.79,208,2.79,209,2.79,210,2.79,211,2.79,212,2.79,213,2.79]],["title/dependencies.html",[214,1.268,215,1.357]],["body/dependencies.html",[33,0.101,139,0.096,140,0.096,215,1.701,216,3.074,217,3.074]],["title/index.html",[15,0.731,218,1.736,219,1.736]],["body/index.html",[1,0.656,4,1.153,8,0.877,13,1.538,24,0.877,26,1.153,27,1.153,33,0.085,55,1.404,59,1.153,78,1.17,99,0.877,139,0.075,140,0.075,143,1.538,167,1.153,203,1.522,215,1.153,220,2.779,221,2.083,222,2.54,223,1.522,224,2.031,225,1.522,226,1.522,227,1.522,228,1.522,229,2.031,230,1.522,231,1.522,232,1.522,233,1.522,234,1.522,235,1.522,236,1.522,237,1.522,238,1.522,239,1.522,240,1.522,241,1.522,242,1.522,243,1.522,244,1.522,245,1.522,246,1.522,247,2.083,248,2.083,249,2.083,250,2.083,251,2.083,252,2.083,253,2.083,254,2.083,255,2.779,256,2.083,257,2.083,258,2.083,259,2.083,260,2.083,261,2.083,262,2.083,263,2.083,264,2.083,265,2.083,266,2.083,267,2.083,268,2.779,269,2.779,270,2.083,271,2.083,272,2.083,273,2.083,274,2.083,275,2.083,276,2.779,277,2.083,278,2.083,279,2.083,280,2.083,281,2.083,282,2.083,283,2.083,284,2.083,285,2.083,286,2.083,287,2.083,288,2.083,289,2.083,290,2.083,291,2.083,292,2.083,293,2.083,294,2.083,295,2.083,296,2.083,297,2.083,298,2.083,299,2.779,300,2.083,301,2.083]],["title/modules.html",[302,2.009]],["body/modules.html",[33,0.096,139,0.096,140,0.096,302,2.275]],["title/overview.html",[303,2.009]],["body/overview.html",[2,1.708,33,0.096,139,0.096,140,0.096,303,2.256,304,3.087]],["title/properties.html",[16,1.032,214,1.268]],["body/properties.html",[1,0.757,7,1.329,8,1.283,13,1.329,16,1.011,24,1.011,26,1.329,27,1.687,33,0.105,55,1.483,78,1.011,83,1.754,139,0.082,140,0.082,141,1.011,143,1.687,167,1.329,222,1.754,223,1.754,224,1.754,225,1.754,226,1.754,227,1.754,228,1.754,229,2.227,230,1.754,231,1.754,232,1.754,233,1.754,234,1.754,235,1.754,236,1.754,237,1.754,238,1.754,239,1.754,240,1.754,241,1.754,242,1.754,243,1.754,244,1.754,245,1.754,246,1.754,305,2.401,306,2.401,307,2.401,308,2.401,309,2.401,310,2.401,311,2.401,312,2.401,313,2.401,314,2.401,315,2.401,316,2.401,317,2.401,318,2.401,319,2.401,320,2.401]],["title/miscellaneous/typealiases.html",[321,1.268,322,2.452]],["body/miscellaneous/typealiases.html",[15,1.262,32,1.469,33,0.094,139,0.094,140,0.094,142,1.659,182,1.931,321,2.19,323,2.998,324,2.998,325,2.998]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":210,"title":{},"body":{"coverage.html":{}}}],["0.5.11",{"_index":305,"title":{},"body":{"properties.html":{}}}],["0.5.15",{"_index":217,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["10/10",{"_index":207,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":206,"title":{},"body":{"coverage.html":{}}}],["100000",{"_index":152,"title":{},"body":{"classes/Hash.html":{}}}],["128",{"_index":94,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["16",{"_index":45,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["2",{"_index":304,"title":{},"body":{"overview.html":{}}}],["256",{"_index":38,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["32",{"_index":49,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["9/9",{"_index":208,"title":{},"body":{"coverage.html":{}}}],["add",{"_index":250,"title":{},"body":{"index.html":{}}}],["aes",{"_index":37,"title":{},"body":{"classes/Encryption.html":{}}}],["against",{"_index":163,"title":{},"body":{"classes/Hash.html":{}}}],["algorithm",{"_index":20,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["algorithms",{"_index":232,"title":{},"body":{"index.html":{},"properties.html":{}}}],["alias",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":323,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":233,"title":{},"body":{"index.html":{},"properties.html":{}}}],["applications",{"_index":246,"title":{},"body":{"index.html":{},"properties.html":{}}}],["async",{"_index":25,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["asynchronous",{"_index":11,"title":{},"body":{"classes/Encryption.html":{}}}],["asynchronously",{"_index":57,"title":{},"body":{"classes/Encryption.html":{}}}],["attacks",{"_index":198,"title":{},"body":{"classes/Hash.html":{}}}],["author",{"_index":318,"title":{},"body":{"properties.html":{}}}],["await",{"_index":186,"title":{},"body":{"classes/Hash.html":{}}}],["bit",{"_index":76,"title":{},"body":{"classes/Encryption.html":{}}}],["bits",{"_index":65,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["boolean",{"_index":171,"title":{},"body":{"classes/Hash.html":{}}}],["both",{"_index":177,"title":{},"body":{"classes/Hash.html":{}}}],["brightline",{"_index":320,"title":{},"body":{"properties.html":{}}}],["buffer",{"_index":53,"title":{},"body":{"classes/Encryption.html":{}}}],["buffer.from(hash",{"_index":200,"title":{},"body":{"classes/Hash.html":{}}}],["buffer.from(ivhex",{"_index":129,"title":{},"body":{"classes/Encryption.html":{}}}],["buffer.from(storedhash",{"_index":201,"title":{},"body":{"classes/Hash.html":{}}}],["bug",{"_index":279,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":312,"title":{},"body":{"properties.html":{}}}],["bytes",{"_index":101,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["bytes/256",{"_index":64,"title":{},"body":{"classes/Encryption.html":{}}}],["cbc",{"_index":39,"title":{},"body":{"classes/Encryption.html":{}}}],["check",{"_index":88,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["chunk",{"_index":118,"title":{},"body":{"classes/Encryption.html":{}}}],["chunk.tostring('utf8",{"_index":135,"title":{},"body":{"classes/Encryption.html":{}}}],["chunk.tostring(this.encoding",{"_index":119,"title":{},"body":{"classes/Encryption.html":{}}}],["cipher",{"_index":108,"title":{},"body":{"classes/Encryption.html":{}}}],["class",{"_index":0,"title":{"classes/Encryption.html":{},"classes/Hash.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"overview.html":{}}}],["compare",{"_index":147,"title":{},"body":{"classes/Hash.html":{}}}],["compare(data",{"_index":159,"title":{},"body":{"classes/Hash.html":{}}}],["compares",{"_index":162,"title":{},"body":{"classes/Hash.html":{}}}],["comparison",{"_index":144,"title":{},"body":{"classes/Hash.html":{}}}],["compatibility",{"_index":282,"title":{},"body":{"index.html":{}}}],["confidentiality",{"_index":243,"title":{},"body":{"index.html":{},"properties.html":{}}}],["consider",{"_index":263,"title":{},"body":{"index.html":{}}}],["const",{"_index":106,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["contact",{"_index":298,"title":{},"body":{"index.html":{}}}],["containing",{"_index":77,"title":{},"body":{"classes/Encryption.html":{}}}],["contributions",{"_index":267,"title":{},"body":{"index.html":{}}}],["count",{"_index":155,"title":{},"body":{"classes/Hash.html":{}}}],["coverage",{"_index":202,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":115,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto",{"_index":8,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["crypto.createcipheriv(this.algorithm",{"_index":109,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto.createdecipheriv(this.algorithm",{"_index":132,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto.pbkdf2",{"_index":187,"title":{},"body":{"classes/Hash.html":{}}}],["crypto.randombytes(this.iv_length",{"_index":107,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto.randombytes(this.key_length",{"_index":137,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto.randombytes(this.salt_length).tostring(this.encoding",{"_index":185,"title":{},"body":{"classes/Hash.html":{}}}],["crypto.timingsafeequal",{"_index":199,"title":{},"body":{"classes/Hash.html":{}}}],["data",{"_index":55,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["date",{"_index":272,"title":{},"body":{"index.html":{}}}],["decipher",{"_index":131,"title":{},"body":{"classes/Encryption.html":{}}}],["decode",{"_index":309,"title":{},"body":{"properties.html":{}}}],["decrypt",{"_index":26,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["decrypt(encrypteddata",{"_index":52,"title":{},"body":{"classes/Encryption.html":{}}}],["decrypted",{"_index":69,"title":{},"body":{"classes/Encryption.html":{}}}],["decryption",{"_index":12,"title":{},"body":{"classes/Encryption.html":{}}}],["default",{"_index":35,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["defined",{"_index":40,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["dependencies",{"_index":215,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["derivedkey",{"_index":191,"title":{},"body":{"classes/Hash.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"properties.html":{}}}],["developer",{"_index":299,"title":{},"body":{"index.html":{}}}],["development",{"_index":266,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":203,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["e.g",{"_index":166,"title":{},"body":{"classes/Hash.html":{}}}],["effort",{"_index":259,"title":{},"body":{"index.html":{}}}],["encode",{"_index":308,"title":{},"body":{"properties.html":{}}}],["encoded",{"_index":178,"title":{},"body":{"classes/Hash.html":{}}}],["encoding",{"_index":21,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["encrypt",{"_index":27,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["encrypt(data",{"_index":70,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypted",{"_index":56,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypteddata",{"_index":61,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypteddata.split",{"_index":126,"title":{},"body":{"classes/Encryption.html":{}}}],["encryptedhex",{"_index":125,"title":{},"body":{"classes/Encryption.html":{}}}],["encryption",{"_index":1,"title":{"classes/Encryption.html":{}},"body":{"classes/Encryption.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["encrypts",{"_index":72,"title":{},"body":{"classes/Encryption.html":{}}}],["ensure",{"_index":269,"title":{},"body":{"index.html":{}}}],["ensuring",{"_index":242,"title":{},"body":{"index.html":{},"properties.html":{}}}],["environment",{"_index":81,"title":{},"body":{"classes/Encryption.html":{}}}],["err",{"_index":190,"title":{},"body":{"classes/Hash.html":{}}}],["error",{"_index":103,"title":{},"body":{"classes/Encryption.html":{}}}],["error('invalid",{"_index":127,"title":{},"body":{"classes/Encryption.html":{}}}],["error(`key",{"_index":100,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["even",{"_index":287,"title":{},"body":{"index.html":{}}}],["example",{"_index":248,"title":{},"body":{"index.html":{}}}],["export",{"_index":93,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["fails",{"_index":123,"title":{},"body":{"classes/Encryption.html":{}}}],["features",{"_index":285,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{}}}],["find",{"_index":260,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":280,"title":{},"body":{"index.html":{}}}],["format",{"_index":128,"title":{},"body":{"classes/Encryption.html":{}}}],["functions",{"_index":228,"title":{},"body":{"index.html":{},"properties.html":{}}}],["funding",{"_index":276,"title":{},"body":{"index.html":{}}}],["general",{"_index":292,"title":{},"body":{"index.html":{}}}],["generated",{"_index":169,"title":{},"body":{"classes/Hash.html":{}}}],["generatekey",{"_index":28,"title":{},"body":{"classes/Encryption.html":{}}}],["generates",{"_index":74,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["getkeyfromenv",{"_index":29,"title":{},"body":{"classes/Encryption.html":{}}}],["getkeyfromenv(version",{"_index":79,"title":{},"body":{"classes/Encryption.html":{}}}],["getting",{"_index":218,"title":{"index.html":{}},"body":{}}],["go",{"_index":277,"title":{},"body":{"index.html":{}}}],["handling",{"_index":226,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hash",{"_index":141,"title":{"classes/Hash.html":{}},"body":{"classes/Hash.html":{},"coverage.html":{},"properties.html":{}}}],["hash(data",{"_index":174,"title":{},"body":{"classes/Hash.html":{}}}],["hashing",{"_index":143,"title":{},"body":{"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["hashresult",{"_index":182,"title":{},"body":{"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["help",{"_index":268,"title":{},"body":{"index.html":{}}}],["hex",{"_index":42,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["high",{"_index":183,"title":{},"body":{"classes/Hash.html":{}}}],["homepage",{"_index":310,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":317,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":313,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/crypto",{"_index":311,"title":{},"body":{"properties.html":{}}}],["ideal",{"_index":237,"title":{},"body":{"index.html":{},"properties.html":{}}}],["identifier",{"_index":204,"title":{},"body":{"coverage.html":{}}}],["implementing",{"_index":240,"title":{},"body":{"index.html":{},"properties.html":{}}}],["import",{"_index":90,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["improvements",{"_index":289,"title":{},"body":{"index.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"miscellaneous/typealiases.html":{}}}],["indicating",{"_index":172,"title":{},"body":{"classes/Hash.html":{}}}],["industry",{"_index":230,"title":{},"body":{"index.html":{},"properties.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["information",{"_index":239,"title":{},"body":{"index.html":{},"properties.html":{}}}],["input",{"_index":113,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["install",{"_index":247,"title":{},"body":{"index.html":{}}}],["instant",{"_index":275,"title":{},"body":{"index.html":{}}}],["integrity",{"_index":235,"title":{},"body":{"index.html":{},"properties.html":{}}}],["invalid",{"_index":104,"title":{},"body":{"classes/Encryption.html":{}}}],["it's",{"_index":253,"title":{},"body":{"index.html":{}}}],["iteration",{"_index":154,"title":{},"body":{"classes/Hash.html":{}}}],["iterations",{"_index":145,"title":{},"body":{"classes/Hash.html":{}}}],["iv",{"_index":47,"title":{},"body":{"classes/Encryption.html":{}}}],["iv:encrypted_data",{"_index":62,"title":{},"body":{"classes/Encryption.html":{}}}],["iv_length",{"_index":22,"title":{},"body":{"classes/Encryption.html":{}}}],["ivhex",{"_index":124,"title":{},"body":{"classes/Encryption.html":{}}}],["keep",{"_index":294,"title":{},"body":{"index.html":{}}}],["key",{"_index":51,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["key?.length",{"_index":96,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["key_length",{"_index":23,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["keywords",{"_index":306,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":283,"title":{},"body":{"index.html":{}}}],["length",{"_index":48,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["library",{"_index":222,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":314,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":325,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintained",{"_index":274,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":256,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":293,"title":{},"body":{"index.html":{}}}],["make",{"_index":286,"title":{},"body":{"index.html":{}}}],["matches",{"_index":173,"title":{},"body":{"classes/Hash.html":{}}}],["matching",{"_index":140,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":24,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["miscellaneous",{"_index":321,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":315,"title":{},"body":{"properties.html":{}}}],["modern",{"_index":244,"title":{},"body":{"index.html":{},"properties.html":{}}}],["modules",{"_index":302,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":288,"title":{},"body":{"index.html":{}}}],["name",{"_index":59,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{}}}],["new",{"_index":99,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"index.html":{}}}],["null",{"_index":86,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["number",{"_index":44,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["object",{"_index":176,"title":{},"body":{"classes/Hash.html":{}}}],["offering",{"_index":223,"title":{},"body":{"index.html":{},"properties.html":{}}}],["on('data",{"_index":117,"title":{},"body":{"classes/Encryption.html":{}}}],["on('end",{"_index":120,"title":{},"body":{"classes/Encryption.html":{}}}],["on('error",{"_index":122,"title":{},"body":{"classes/Encryption.html":{}}}],["ongoing",{"_index":265,"title":{},"body":{"index.html":{}}}],["open",{"_index":254,"title":{},"body":{"index.html":{}}}],["optional",{"_index":60,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["original",{"_index":63,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["out",{"_index":291,"title":{},"body":{"index.html":{}}}],["overview",{"_index":303,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":214,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":95,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["parameters",{"_index":58,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["password",{"_index":167,"title":{},"body":{"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["pipe(cipher",{"_index":116,"title":{},"body":{"classes/Encryption.html":{}}}],["pipe(decipher",{"_index":134,"title":{},"body":{"classes/Encryption.html":{}}}],["please",{"_index":262,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":249,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":224,"title":{},"body":{"index.html":{},"properties.html":{}}}],["prevent",{"_index":197,"title":{},"body":{"classes/Hash.html":{}}}],["previously",{"_index":168,"title":{},"body":{"classes/Hash.html":{}}}],["private",{"_index":17,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["process.env[`encryption_key_${version",{"_index":138,"title":{},"body":{"classes/Encryption.html":{}}}],["project",{"_index":255,"title":{},"body":{"index.html":{}}}],["promise",{"_index":67,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["promise((resolve",{"_index":111,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"properties.html":{}}}],["protected",{"_index":30,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["protecting",{"_index":238,"title":{},"body":{"index.html":{},"properties.html":{}}}],["provides",{"_index":227,"title":{},"body":{"index.html":{},"properties.html":{}}}],["puq",{"_index":307,"title":{},"body":{"properties.html":{}}}],["puq/crypto",{"_index":220,"title":{},"body":{"index.html":{}}}],["puq/cryptofunding",{"_index":251,"title":{},"body":{"index.html":{}}}],["random",{"_index":75,"title":{},"body":{"classes/Encryption.html":{}}}],["readable",{"_index":91,"title":{},"body":{"classes/Encryption.html":{}}}],["readable.from([buffer.from(encryptedhex",{"_index":133,"title":{},"body":{"classes/Encryption.html":{}}}],["readable.from([data",{"_index":114,"title":{},"body":{"classes/Encryption.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["reject",{"_index":112,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["reject(err",{"_index":192,"title":{},"body":{"classes/Hash.html":{}}}],["repository",{"_index":316,"title":{},"body":{"properties.html":{}}}],["resolve(`${iv.tostring(this.encoding)}:${encrypted",{"_index":121,"title":{},"body":{"classes/Encryption.html":{}}}],["resolve(decrypted",{"_index":136,"title":{},"body":{"classes/Encryption.html":{}}}],["resolve(derivedkey.tostring(this.encoding",{"_index":193,"title":{},"body":{"classes/Hash.html":{}}}],["resolving",{"_index":68,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["results",{"_index":139,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":110,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["returns",{"_index":66,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["robert",{"_index":319,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":300,"title":{},"body":{"index.html":{}}}],["robust",{"_index":234,"title":{},"body":{"index.html":{},"properties.html":{}}}],["running",{"_index":295,"title":{},"body":{"index.html":{}}}],["safe",{"_index":196,"title":{},"body":{"classes/Hash.html":{}}}],["salt",{"_index":158,"title":{},"body":{"classes/Hash.html":{}}}],["salt_length",{"_index":146,"title":{},"body":{"classes/Hash.html":{}}}],["secure",{"_index":78,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["securely",{"_index":297,"title":{},"body":{"index.html":{}}}],["security",{"_index":184,"title":{},"body":{"classes/Hash.html":{}}}],["sensitive",{"_index":229,"title":{},"body":{"index.html":{},"properties.html":{}}}],["sha256",{"_index":149,"title":{},"body":{"classes/Hash.html":{}}}],["smoothly",{"_index":296,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{}}}],["src/.../hash.ts",{"_index":324,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/encryption.ts",{"_index":6,"title":{},"body":{"classes/Encryption.html":{},"coverage.html":{}}}],["src/lib/encryption.ts:105",{"_index":80,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:11",{"_index":41,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:16",{"_index":50,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:21",{"_index":46,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:26",{"_index":43,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:32",{"_index":87,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:45",{"_index":71,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:70",{"_index":54,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:96",{"_index":73,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/hash.ts",{"_index":142,"title":{},"body":{"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hash.ts:12",{"_index":153,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:17",{"_index":156,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:22",{"_index":150,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:27",{"_index":157,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:32",{"_index":151,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:38",{"_index":180,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:49",{"_index":175,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:74",{"_index":161,"title":{},"body":{"classes/Hash.html":{}}}],["standard",{"_index":231,"title":{},"body":{"index.html":{},"properties.html":{}}}],["started",{"_index":219,"title":{"index.html":{}},"body":{}}],["statements",{"_index":205,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["stays",{"_index":270,"title":{},"body":{"index.html":{}}}],["storage",{"_index":241,"title":{},"body":{"index.html":{},"properties.html":{}}}],["stored",{"_index":164,"title":{},"body":{"classes/Hash.html":{}}}],["storedhash",{"_index":160,"title":{},"body":{"classes/Hash.html":{}}}],["stream",{"_index":92,"title":{},"body":{"classes/Encryption.html":{}}}],["streams",{"_index":14,"title":{},"body":{"classes/Encryption.html":{}}}],["string",{"_index":34,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["summary",{"_index":221,"title":{},"body":{"index.html":{}}}],["support",{"_index":301,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":264,"title":{},"body":{"index.html":{}}}],["swc/helpers",{"_index":216,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":213,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":212,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":257,"title":{},"body":{"index.html":{}}}],["thank",{"_index":252,"title":{},"body":{"index.html":{}}}],["this.algorithm",{"_index":189,"title":{},"body":{"classes/Hash.html":{}}}],["this.encoding",{"_index":130,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["this.iterations",{"_index":188,"title":{},"body":{"classes/Hash.html":{}}}],["this.key_length",{"_index":97,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["this.validatekey(key",{"_index":105,"title":{},"body":{"classes/Encryption.html":{}}}],["throw",{"_index":98,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["throws",{"_index":102,"title":{},"body":{"classes/Encryption.html":{}}}],["time",{"_index":258,"title":{},"body":{"index.html":{}}}],["timing",{"_index":195,"title":{},"body":{"classes/Hash.html":{}}}],["toward",{"_index":278,"title":{},"body":{"index.html":{}}}],["truly",{"_index":10,"title":{},"body":{"classes/Encryption.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":322,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":85,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["up",{"_index":271,"title":{},"body":{"index.html":{}}}],["updates",{"_index":281,"title":{},"body":{"index.html":{}}}],["use",{"_index":194,"title":{},"body":{"classes/Hash.html":{}}}],["used",{"_index":170,"title":{},"body":{"classes/Hash.html":{}}}],["useful",{"_index":261,"title":{},"body":{"index.html":{}}}],["users",{"_index":290,"title":{},"body":{"index.html":{}}}],["using",{"_index":13,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["utilities",{"_index":225,"title":{},"body":{"index.html":{},"properties.html":{}}}],["utility",{"_index":9,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["validatedata",{"_index":148,"title":{},"body":{"classes/Hash.html":{}}}],["validatedata(key",{"_index":179,"title":{},"body":{"classes/Hash.html":{}}}],["validatekey",{"_index":31,"title":{},"body":{"classes/Encryption.html":{}}}],["validatekey(key",{"_index":84,"title":{},"body":{"classes/Encryption.html":{}}}],["value",{"_index":36,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["variables",{"_index":82,"title":{},"body":{"classes/Encryption.html":{}}}],["verification",{"_index":236,"title":{},"body":{"index.html":{},"properties.html":{}}}],["verify",{"_index":165,"title":{},"body":{"classes/Hash.html":{}}}],["version",{"_index":83,"title":{},"body":{"classes/Encryption.html":{},"properties.html":{}}}],["versions",{"_index":284,"title":{},"body":{"index.html":{}}}],["void",{"_index":89,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["web",{"_index":245,"title":{},"body":{"index.html":{},"properties.html":{}}}],["well",{"_index":273,"title":{},"body":{"index.html":{}}}],["yes",{"_index":181,"title":{},"body":{"classes/Hash.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Encryption.html":{"url":"classes/Encryption.html","title":"class - Encryption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Encryption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/encryption.ts\n        \n\n\n            \n                Description\n            \n            \n                Crypto utility with truly asynchronous encryption and decryption using streams\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALGORITHM\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ENCODING\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                IV_LENGTH\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                KEY_LENGTH\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                decrypt\n                            \n                            \n                                    Static\n                                    Async\n                                encrypt\n                            \n                            \n                                    Static\n                                generateKey\n                            \n                            \n                                    Static\n                                getKeyFromEnv\n                            \n                            \n                                    Protected\n                                    Static\n                                validateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALGORITHM\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'aes-256-cbc'\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:11\n                        \n                    \n\n            \n                \n                    Algorithm\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ENCODING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hex'\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:26\n                        \n                    \n\n            \n                \n                    Encoding\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        IV_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 16\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:21\n                        \n                    \n\n            \n                \n                    Iv length\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        KEY_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 32\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:16\n                        \n                    \n\n            \n                \n                    Key length\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        decrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrypt(encryptedData: string, key: Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:70\n                        \n                    \n\n\n            \n                \n                        Decrypt data encrypted with AES-256-CBC asynchronously with streams\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encryptedData\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Encrypted string (IV:encrypted_data)\n\n                                            \n                                        \n                                        \n                                                key\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Original encryption key (32 bytes/256 bits)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to decrypted string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    encrypt(data: string, key: Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:45\n                        \n                    \n\n\n            \n                \n                        Encrypts data using AES-256-CBC asynchronously with streams\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String to encrypt\n\n                                            \n                                        \n                                        \n                                                key\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Encryption key (32 bytes/256 bits)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to encrypted string (IV:encrypted_data in hex)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        generateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:96\n                        \n                    \n\n\n            \n                \n                        Generates a random 256-bit key\n\n\n                        \n                            Returns :     Buffer\n\n                        \n                            \n                                Buffer containing a secure random key\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getKeyFromEnv\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeyFromEnv(version: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:105\n                        \n                    \n\n\n            \n                \n                        Get key from environment variables\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                version\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Static\n                        validateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateKey(key: Buffer | undefined | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:32\n                        \n                    \n\n\n            \n                \n                        Check the key has at 256 bits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        Buffer | undefined | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { Readable } from 'stream';\n\n/**\n * Crypto utility with truly asynchronous encryption and decryption using streams\n */\nexport class Encryption {\n  /**\n   * Algorithm\n   */\n  private static readonly ALGORITHM = 'aes-256-cbc';\n\n  /**\n   * Key length\n   */\n  private static readonly KEY_LENGTH = 32; // 256 bits\n\n  /**\n   * Iv length\n   */\n  private static readonly IV_LENGTH = 16; // 128 bits for CBC\n\n  /**\n   * Encoding\n   */\n  private static readonly ENCODING = 'hex';\n\n  /**\n   * Check the key has at 256 bits\n   * @param key\n   */\n  protected static validateKey(key: Buffer | undefined | null) {\n    if (key?.length !== this.KEY_LENGTH) {\n      throw new Error(`Key must be ${this.KEY_LENGTH} bytes`);\n    }\n  }\n\n  /**\n   * Encrypts data using AES-256-CBC asynchronously with streams\n   * @param data String to encrypt\n   * @param key Encryption key (32 bytes/256 bits)\n   * @returns Promise resolving to encrypted string (IV:encrypted_data in hex)\n   * @throws Error if key length is invalid\n   */\n  static async encrypt(data: string, key: Buffer): Promise {\n    this.validateKey(key);\n\n    const iv = crypto.randomBytes(this.IV_LENGTH);\n    const cipher = crypto.createCipheriv(this.ALGORITHM, key, iv);\n\n    return new Promise((resolve, reject) => {\n      let encrypted = '';\n      const input = Readable.from([data]); // Create stream from string\n\n      input\n        .pipe(cipher)\n        .on('data', (chunk) => (encrypted += chunk.toString(this.ENCODING)))\n        .on('end', () => resolve(`${iv.toString(this.ENCODING)}:${encrypted}`))\n        .on('error', reject);\n    });\n  }\n\n  /**\n   * Decrypt data encrypted with AES-256-CBC asynchronously with streams\n   * @param encryptedData Encrypted string (IV:encrypted_data)\n   * @param key Original encryption key (32 bytes/256 bits)\n   * @returns Promise resolving to decrypted string\n   * @throws Error if key length is invalid or decryption fails\n   */\n  static async decrypt(encryptedData: string, key: Buffer): Promise {\n    this.validateKey(key);\n\n    const [ivHex, encryptedHex] = encryptedData.split(':');\n    if (!ivHex || !encryptedHex) {\n      throw new Error('Invalid encrypted data format');\n    }\n\n    const iv = Buffer.from(ivHex, this.ENCODING);\n    const decipher = crypto.createDecipheriv(this.ALGORITHM, key, iv);\n    const input = Readable.from([Buffer.from(encryptedHex, this.ENCODING)]);\n\n    return new Promise((resolve, reject) => {\n      let decrypted = '';\n      input\n        .pipe(decipher)\n        .on('data', (chunk) => (decrypted += chunk.toString('utf8')))\n        .on('end', () => resolve(decrypted))\n        .on('error', reject);\n    });\n  }\n\n  /**\n   * Generates a random 256-bit key\n   * @returns Buffer containing a secure random key\n   */\n  static generateKey(): Buffer {\n    return crypto.randomBytes(this.KEY_LENGTH);\n  }\n\n  /**\n   * Get key from environment variables\n   * @param version\n   * @returns\n   */\n  static getKeyFromEnv(version: string) {\n    return process.env[`ENCRYPTION_KEY_${version}`];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hash.html":{"url":"classes/Hash.html","title":"class - Hash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hash.ts\n        \n\n\n            \n                Description\n            \n            \n                Crypto utility for secure hashing and comparison\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALGORITHM\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ENCODING\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ITERATIONS\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                KEY_LENGTH\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                SALT_LENGTH\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                compare\n                            \n                            \n                                    Static\n                                    Async\n                                hash\n                            \n                            \n                                    Protected\n                                    Static\n                                validateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALGORITHM\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'sha256'\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:22\n                        \n                    \n\n            \n                \n                    algorithm\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ENCODING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hex'\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:32\n                        \n                    \n\n            \n                \n                    encoding\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ITERATIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100000\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:12\n                        \n                    \n\n            \n                \n                    iteration count\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        KEY_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 32\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:17\n                        \n                    \n\n            \n                \n                    key length\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        SALT_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 16\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:27\n                        \n                    \n\n            \n                \n                    salt length\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string, storedHash: string, salt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/hash.ts:74\n                        \n                    \n\n\n            \n                \n                        Compares input data against a stored hash\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Input string to verify (e.g., password)\n\n                                            \n                                        \n                                        \n                                                storedHash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Previously generated hash\n\n                                            \n                                        \n                                        \n                                                salt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Salt used in original hash\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to boolean indicating if input matches stored hash\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/hash.ts:49\n                        \n                    \n\n\n            \n                \n                        Generates a secure hash from input data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String to hash (e.g., password)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise resolving to object with hash and salt (both hex-encoded)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Static\n                        validateData\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateData(key?: string | undefined | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/hash.ts:38\n                        \n                    \n\n\n            \n                \n                        Check the key has at 256 bits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        string | undefined | null\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\n\nexport type HashResult = { hash: string; salt: string };\n\n/**\n * Crypto utility for secure hashing and comparison\n */\nexport class Hash {\n  /**\n   * iteration count\n   */\n  private static readonly ITERATIONS = 100000; // High iteration count for security\n\n  /**\n   * key length\n   */\n  private static readonly KEY_LENGTH = 32; // 256 bits\n\n  /**\n   * algorithm\n   */\n  private static readonly ALGORITHM = 'sha256';\n\n  /**\n   * salt length\n   */\n  private static readonly SALT_LENGTH = 16; // 128 bits\n\n  /**\n   * encoding\n   */\n  private static readonly ENCODING = 'hex';\n\n  /**\n   * Check the key has at 256 bits\n   * @param key\n   */\n  protected static validateData(key?: string | undefined | null) {\n    if (key?.length !== this.KEY_LENGTH) {\n      throw new Error(`Key must be ${this.KEY_LENGTH} bytes`);\n    }\n  }\n\n  /**\n   * Generates a secure hash from input data\n   * @param data String to hash (e.g., password)\n   * @returns Promise resolving to object with hash and salt (both hex-encoded)\n   */\n  static async hash(data: string): Promise {\n    const salt = crypto.randomBytes(this.SALT_LENGTH).toString(this.ENCODING);\n    const hash = await new Promise((resolve, reject) => {\n      crypto.pbkdf2(\n        data,\n        salt,\n        this.ITERATIONS,\n        this.KEY_LENGTH,\n        this.ALGORITHM,\n        (err, derivedKey) => {\n          if (err) reject(err);\n          else resolve(derivedKey.toString(this.ENCODING));\n        },\n      );\n    });\n    return { hash, salt };\n  }\n\n  /**\n   * Compares input data against a stored hash\n   * @param data Input string to verify (e.g., password)\n   * @param storedHash Previously generated hash\n   * @param salt Salt used in original hash\n   * @returns Promise resolving to boolean indicating if input matches stored hash\n   */\n  static async compare(\n    data: string,\n    storedHash: string,\n    salt: string,\n  ): Promise {\n    const hash = await new Promise((resolve, reject) => {\n      crypto.pbkdf2(\n        data,\n        salt,\n        this.ITERATIONS,\n        this.KEY_LENGTH,\n        this.ALGORITHM,\n        (err, derivedKey) => {\n          if (err) reject(err);\n          else resolve(derivedKey.toString(this.ENCODING));\n        },\n      );\n    });\n\n    // Use timing-safe comparison to prevent timing attacks\n    return crypto.timingSafeEqual(\n      Buffer.from(hash, this.ENCODING),\n      Buffer.from(storedHash, this.ENCODING),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/encryption.ts\n            \n            class\n            Encryption\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/lib/hash.ts\n            \n            class\n            Hash\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/lib/hash.ts\n            \n            type alias\n            HashResult\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/crypto\nSummary\nCrypto library offering powerful encryption and hashing utilities for secure data handling. It provides functions to encrypt and decrypt sensitive data using industry-standard algorithms, along with robust hashing methods for data integrity verification. Ideal for protecting sensitive information, implementing password storage, and ensuring data confidentiality in modern web applications.\nInstall\nExample :  pnpm add @puq/cryptoFunding\nThank you for using @puq/crypto It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.5.11\n        \n            Description : Crypto library offering powerful encryption and hashing utilities for secure data handling. It provides functions to encrypt and decrypt sensitive data using industry-standard algorithms, along with robust hashing methods for data integrity verification. Ideal for protecting sensitive information, implementing password storage, and ensuring data confidentiality in modern web applications.\n        \n            Keywords : puq, crypto, hash, encrypt, encode, decode\n        \n            Homepage : https://rbrightline.github.io/puq/crypto\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HashResult   (src/.../hash.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/hash.ts\n    \n    \n        \n            \n                \n                    \n                    HashResult\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
