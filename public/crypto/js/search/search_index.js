var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Encryption.html",[0,0.646,1,0.646]],["body/classes/Encryption.html",[0,0.266,1,0.881,2,0.468,3,0.618,4,0.468,5,0.468,6,0.618,7,0.999,8,1.164,9,1.027,10,1.406,11,1.406,12,1.805,13,1.164,14,2.52,15,0.356,16,0.592,17,2.296,18,2.662,19,2.296,20,1.319,21,1.319,22,1.805,23,1.319,24,0.592,25,1.842,26,0.778,27,1.164,28,2.103,29,1.406,30,1.805,31,1.406,32,1.177,33,0.109,34,2.548,35,1.537,36,1.537,37,2.52,38,2.246,39,2.671,40,2.122,41,0.845,42,1.537,43,0.845,44,1.027,45,1.027,46,0.845,47,1.842,48,0.845,49,1.406,50,3.625,51,3.204,52,0.845,53,1.406,54,1.124,55,2.904,56,2.103,57,1.537,58,1.164,59,1.537,60,1.406,61,2.103,62,1.027,63,2.103,64,2.044,65,2.122,66,2.044,67,1.537,68,2.103,69,1.406,70,0.845,71,1.406,72,0.845,73,1.027,74,2.103,75,1.406,76,1.406,77,0.592,78,1.406,79,0.845,80,1.406,81,1.406,82,1.027,83,1.406,84,0.845,85,1.406,86,0.845,87,1.027,88,0.845,89,1.406,90,0.618,91,0.618,92,1.842,93,0.845,94,1.027,95,1.406,96,0.885,97,0.845,98,0.845,99,1.406,100,1.406,101,1.406,102,1.406,103,1.406,104,1.952,105,2.103,106,0.845,107,0.845,108,0.845,109,1.537,110,1.027,111,1.537,112,1.537,113,0.845,114,0.845,115,0.845,116,1.406,117,1.406,118,0.845,119,1.406,120,0.845,121,1.406,122,0.845,123,1.406,124,1.406,125,0.845,126,0.845,127,0.845,128,0.845,129,1.027,130,0.845,131,0.845,132,0.845,133,0.845,134,0.845,135,0.845,136,0.845,137,0.845,138,0.038,139,0.038]],["title/classes/Hash.html",[0,0.646,140,0.863]],["body/classes/Hash.html",[0,0.327,2,0.574,3,0.758,4,0.574,5,0.574,7,1.151,8,1.316,9,1.215,15,0.437,16,0.7,17,2.539,18,2.666,19,2.539,20,1.52,21,1.52,23,1.52,24,0.7,25,2.028,32,1.275,33,0.108,34,2.65,35,1.901,36,1.901,38,0.758,40,2.13,42,1.738,44,1.52,45,1.215,47,1.215,54,1.378,57,1.215,58,0.92,59,1.215,62,1.215,64,1.215,65,1.738,66,2.214,67,1.738,73,1.215,77,1.001,87,0.758,90,1.215,91,0.758,92,1.738,94,1.215,96,0.7,104,1.52,109,1.215,110,1.215,111,1.215,112,2.214,129,1.215,138,0.045,139,0.045,140,1.545,141,0.574,142,0.92,143,2.079,144,2.079,145,2.079,146,2.079,147,1.662,148,1.038,149,1.038,150,1.662,151,1.038,152,1.038,153,1.038,154,1.038,155,2.378,156,3.387,157,1.038,158,1.662,159,1.662,160,2.378,161,1.662,162,2.378,163,1.316,164,1.662,165,1.662,166,1.662,167,1.662,168,1.662,169,1.662,170,1.662,171,1.038,172,1.662,173,1.662,174,1.662,175,0.574,176,1.038,177,1.038,178,1.038,179,1.038,180,1.038,181,1.662,182,1.662,183,1.662,184,1.662,185,2.378,186,1.662,187,1.662,188,1.662,189,1.038,190,1.662,191,1.038,192,1.038,193,1.038,194,1.038,195,1.038,196,1.038]],["title/coverage.html",[197,2.009]],["body/coverage.html",[0,1.045,1,0.867,5,1.523,6,2.012,32,1.396,33,0.102,96,1.159,138,0.09,139,0.09,140,1.159,141,1.836,175,1.523,197,2.012,198,2.012,199,2.753,200,2.753,201,2.753,202,2.753,203,2.753,204,2.753,205,2.753,206,2.753,207,2.753,208,2.753,209,2.753]],["title/dependencies.html",[210,1.268,211,1.357]],["body/dependencies.html",[33,0.101,138,0.095,139,0.095,211,1.694,212,3.061,213,3.061]],["title/index.html",[15,0.731,214,1.736,215,1.736]],["body/index.html",[1,0.634,4,1.113,13,1.502,24,0.846,26,1.113,27,1.113,33,0.083,54,1.384,58,1.113,77,1.142,96,0.846,138,0.073,139,0.073,142,1.502,163,1.113,198,1.469,211,1.113,216,2.714,217,2.011,218,1.469,219,2.51,220,1.469,221,1.983,222,1.469,223,1.469,224,1.469,225,1.469,226,1.983,227,1.469,228,1.469,229,1.469,230,1.469,231,1.469,232,1.469,233,1.469,234,1.469,235,1.469,236,1.469,237,1.469,238,1.469,239,1.469,240,1.469,241,1.469,242,1.469,243,1.469,244,2.011,245,2.011,246,2.011,247,2.011,248,2.011,249,2.011,250,2.011,251,2.011,252,2.714,253,2.011,254,2.011,255,2.011,256,2.011,257,2.011,258,2.011,259,2.011,260,2.011,261,2.011,262,2.011,263,2.011,264,2.011,265,2.714,266,2.714,267,2.011,268,2.011,269,2.011,270,2.011,271,2.011,272,2.011,273,2.714,274,2.011,275,2.011,276,2.011,277,2.011,278,2.011,279,2.011,280,2.011,281,2.011,282,2.011,283,2.011,284,2.011,285,2.011,286,2.011,287,2.011,288,2.011,289,2.011,290,2.011,291,2.011,292,2.011,293,2.011,294,2.011,295,2.011,296,2.714,297,2.011,298,2.011]],["title/modules.html",[299,2.009]],["body/modules.html",[33,0.096,138,0.096,139,0.096,299,2.268]],["title/overview.html",[300,2.009]],["body/overview.html",[2,1.702,33,0.096,138,0.096,139,0.096,300,2.247,301,3.075]],["title/properties.html",[16,1.032,210,1.268]],["body/properties.html",[1,0.738,7,1.295,8,1.295,13,1.295,16,0.985,24,0.985,26,1.295,27,1.66,33,0.105,54,1.469,77,0.985,82,1.71,138,0.081,139,0.081,140,0.985,142,1.66,163,1.295,218,1.71,219,1.71,220,1.71,221,1.71,222,1.71,223,1.71,224,1.71,225,1.71,226,2.192,227,1.71,228,1.71,229,1.71,230,1.71,231,1.71,232,1.71,233,1.71,234,1.71,235,1.71,236,1.71,237,1.71,238,1.71,239,1.71,240,1.71,241,1.71,242,1.71,243,1.71,302,2.341,303,2.341,304,2.341,305,2.341,306,2.341,307,2.341,308,2.341,309,2.341,310,2.341,311,2.341,312,2.341,313,2.341,314,2.341,315,2.341,316,2.341,317,2.341]],["title/miscellaneous/typealiases.html",[318,1.268,319,2.452]],["body/miscellaneous/typealiases.html",[15,1.253,32,1.463,33,0.094,138,0.094,139,0.094,141,1.648,175,1.923,318,2.176,320,2.978,321,2.978,322,2.978]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":206,"title":{},"body":{"coverage.html":{}}}],["0.1.0",{"_index":302,"title":{},"body":{"properties.html":{}}}],["0.5.11",{"_index":213,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":207,"title":{},"body":{"coverage.html":{}}}],["100000",{"_index":150,"title":{},"body":{"classes/Hash.html":{}}}],["128",{"_index":91,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["16",{"_index":45,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["2",{"_index":301,"title":{},"body":{"overview.html":{}}}],["256",{"_index":38,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["3/8",{"_index":204,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":47,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["37",{"_index":203,"title":{},"body":{"coverage.html":{}}}],["6/10",{"_index":202,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":201,"title":{},"body":{"coverage.html":{}}}],["add",{"_index":247,"title":{},"body":{"index.html":{}}}],["aes",{"_index":37,"title":{},"body":{"classes/Encryption.html":{}}}],["against",{"_index":159,"title":{},"body":{"classes/Hash.html":{}}}],["algorithm",{"_index":20,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["algorithms",{"_index":229,"title":{},"body":{"index.html":{},"properties.html":{}}}],["alias",{"_index":205,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":320,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":230,"title":{},"body":{"index.html":{},"properties.html":{}}}],["applications",{"_index":243,"title":{},"body":{"index.html":{},"properties.html":{}}}],["async",{"_index":25,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["asynchronous",{"_index":11,"title":{},"body":{"classes/Encryption.html":{}}}],["asynchronously",{"_index":56,"title":{},"body":{"classes/Encryption.html":{}}}],["attacks",{"_index":193,"title":{},"body":{"classes/Hash.html":{}}}],["author",{"_index":315,"title":{},"body":{"properties.html":{}}}],["await",{"_index":181,"title":{},"body":{"classes/Hash.html":{}}}],["bit",{"_index":75,"title":{},"body":{"classes/Encryption.html":{}}}],["bits",{"_index":64,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["boolean",{"_index":167,"title":{},"body":{"classes/Hash.html":{}}}],["both",{"_index":173,"title":{},"body":{"classes/Hash.html":{}}}],["brightline",{"_index":317,"title":{},"body":{"properties.html":{}}}],["buffer",{"_index":51,"title":{},"body":{"classes/Encryption.html":{}}}],["buffer.from(hash",{"_index":195,"title":{},"body":{"classes/Hash.html":{}}}],["buffer.from(ivhex",{"_index":128,"title":{},"body":{"classes/Encryption.html":{}}}],["buffer.from(storedhash",{"_index":196,"title":{},"body":{"classes/Hash.html":{}}}],["bug",{"_index":276,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":309,"title":{},"body":{"properties.html":{}}}],["bytes",{"_index":98,"title":{},"body":{"classes/Encryption.html":{}}}],["bytes/256",{"_index":63,"title":{},"body":{"classes/Encryption.html":{}}}],["cbc",{"_index":39,"title":{},"body":{"classes/Encryption.html":{}}}],["check",{"_index":85,"title":{},"body":{"classes/Encryption.html":{}}}],["chunk",{"_index":117,"title":{},"body":{"classes/Encryption.html":{}}}],["chunk.tostring('utf8",{"_index":134,"title":{},"body":{"classes/Encryption.html":{}}}],["chunk.tostring(this.encoding",{"_index":118,"title":{},"body":{"classes/Encryption.html":{}}}],["cipher",{"_index":107,"title":{},"body":{"classes/Encryption.html":{}}}],["class",{"_index":0,"title":{"classes/Encryption.html":{},"classes/Hash.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"overview.html":{}}}],["compare",{"_index":146,"title":{},"body":{"classes/Hash.html":{}}}],["compare(data",{"_index":154,"title":{},"body":{"classes/Hash.html":{}}}],["compares",{"_index":158,"title":{},"body":{"classes/Hash.html":{}}}],["comparison",{"_index":143,"title":{},"body":{"classes/Hash.html":{}}}],["compatibility",{"_index":279,"title":{},"body":{"index.html":{}}}],["confidentiality",{"_index":240,"title":{},"body":{"index.html":{},"properties.html":{}}}],["consider",{"_index":260,"title":{},"body":{"index.html":{}}}],["const",{"_index":104,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["contact",{"_index":295,"title":{},"body":{"index.html":{}}}],["containing",{"_index":76,"title":{},"body":{"classes/Encryption.html":{}}}],["contributions",{"_index":264,"title":{},"body":{"index.html":{}}}],["count",{"_index":178,"title":{},"body":{"classes/Hash.html":{}}}],["coverage",{"_index":197,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":114,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto",{"_index":8,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"properties.html":{}}}],["crypto.createcipheriv(this.algorithm",{"_index":108,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto.createdecipheriv(this.algorithm",{"_index":131,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto.pbkdf2",{"_index":182,"title":{},"body":{"classes/Hash.html":{}}}],["crypto.randombytes(this.iv_length",{"_index":106,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto.randombytes(this.key_length",{"_index":136,"title":{},"body":{"classes/Encryption.html":{}}}],["crypto.randombytes(this.salt_length).tostring(this.encoding",{"_index":180,"title":{},"body":{"classes/Hash.html":{}}}],["crypto.timingsafeequal",{"_index":194,"title":{},"body":{"classes/Hash.html":{}}}],["data",{"_index":54,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["date",{"_index":269,"title":{},"body":{"index.html":{}}}],["decipher",{"_index":130,"title":{},"body":{"classes/Encryption.html":{}}}],["decode",{"_index":306,"title":{},"body":{"properties.html":{}}}],["decrypt",{"_index":26,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["decrypt(encrypteddata",{"_index":49,"title":{},"body":{"classes/Encryption.html":{}}}],["decrypted",{"_index":68,"title":{},"body":{"classes/Encryption.html":{}}}],["decryption",{"_index":12,"title":{},"body":{"classes/Encryption.html":{}}}],["decrypts",{"_index":53,"title":{},"body":{"classes/Encryption.html":{}}}],["default",{"_index":35,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["defined",{"_index":40,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["dependencies",{"_index":211,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["derivedkey",{"_index":186,"title":{},"body":{"classes/Hash.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"properties.html":{}}}],["developer",{"_index":296,"title":{},"body":{"index.html":{}}}],["development",{"_index":263,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":198,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["e.g",{"_index":162,"title":{},"body":{"classes/Hash.html":{}}}],["effort",{"_index":256,"title":{},"body":{"index.html":{}}}],["encode",{"_index":305,"title":{},"body":{"properties.html":{}}}],["encoded",{"_index":174,"title":{},"body":{"classes/Hash.html":{}}}],["encoding",{"_index":21,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["encrypt",{"_index":27,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["encrypt(data",{"_index":69,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypted",{"_index":55,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypteddata",{"_index":60,"title":{},"body":{"classes/Encryption.html":{}}}],["encrypteddata.split",{"_index":125,"title":{},"body":{"classes/Encryption.html":{}}}],["encryptedhex",{"_index":124,"title":{},"body":{"classes/Encryption.html":{}}}],["encryption",{"_index":1,"title":{"classes/Encryption.html":{}},"body":{"classes/Encryption.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["encrypts",{"_index":71,"title":{},"body":{"classes/Encryption.html":{}}}],["ensure",{"_index":266,"title":{},"body":{"index.html":{}}}],["ensuring",{"_index":239,"title":{},"body":{"index.html":{},"properties.html":{}}}],["environment",{"_index":80,"title":{},"body":{"classes/Encryption.html":{}}}],["err",{"_index":185,"title":{},"body":{"classes/Hash.html":{}}}],["error",{"_index":100,"title":{},"body":{"classes/Encryption.html":{}}}],["error('invalid",{"_index":126,"title":{},"body":{"classes/Encryption.html":{}}}],["error(`key",{"_index":97,"title":{},"body":{"classes/Encryption.html":{}}}],["even",{"_index":284,"title":{},"body":{"index.html":{}}}],["example",{"_index":245,"title":{},"body":{"index.html":{}}}],["export",{"_index":90,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["fails",{"_index":122,"title":{},"body":{"classes/Encryption.html":{}}}],["features",{"_index":282,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{}}}],["find",{"_index":257,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":277,"title":{},"body":{"index.html":{}}}],["format",{"_index":127,"title":{},"body":{"classes/Encryption.html":{}}}],["functions",{"_index":225,"title":{},"body":{"index.html":{},"properties.html":{}}}],["funding",{"_index":273,"title":{},"body":{"index.html":{}}}],["general",{"_index":289,"title":{},"body":{"index.html":{}}}],["generated",{"_index":165,"title":{},"body":{"classes/Hash.html":{}}}],["generatekey",{"_index":28,"title":{},"body":{"classes/Encryption.html":{}}}],["generates",{"_index":73,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["getkeyfromenv",{"_index":29,"title":{},"body":{"classes/Encryption.html":{}}}],["getkeyfromenv(version",{"_index":78,"title":{},"body":{"classes/Encryption.html":{}}}],["getting",{"_index":214,"title":{"index.html":{}},"body":{}}],["go",{"_index":274,"title":{},"body":{"index.html":{}}}],["handling",{"_index":223,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hash",{"_index":140,"title":{"classes/Hash.html":{}},"body":{"classes/Hash.html":{},"coverage.html":{},"properties.html":{}}}],["hash(data",{"_index":170,"title":{},"body":{"classes/Hash.html":{}}}],["hashing",{"_index":142,"title":{},"body":{"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["hashresult",{"_index":175,"title":{},"body":{"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["help",{"_index":265,"title":{},"body":{"index.html":{}}}],["hex",{"_index":42,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["high",{"_index":176,"title":{},"body":{"classes/Hash.html":{}}}],["homepage",{"_index":307,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":314,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":310,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/crypto",{"_index":308,"title":{},"body":{"properties.html":{}}}],["ideal",{"_index":234,"title":{},"body":{"index.html":{},"properties.html":{}}}],["identifier",{"_index":199,"title":{},"body":{"coverage.html":{}}}],["implementing",{"_index":237,"title":{},"body":{"index.html":{},"properties.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["improvements",{"_index":286,"title":{},"body":{"index.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"miscellaneous/typealiases.html":{}}}],["indicating",{"_index":168,"title":{},"body":{"classes/Hash.html":{}}}],["industry",{"_index":227,"title":{},"body":{"index.html":{},"properties.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["information",{"_index":236,"title":{},"body":{"index.html":{},"properties.html":{}}}],["input",{"_index":112,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["install",{"_index":244,"title":{},"body":{"index.html":{}}}],["instant",{"_index":272,"title":{},"body":{"index.html":{}}}],["integrity",{"_index":232,"title":{},"body":{"index.html":{},"properties.html":{}}}],["invalid",{"_index":102,"title":{},"body":{"classes/Encryption.html":{}}}],["it's",{"_index":250,"title":{},"body":{"index.html":{}}}],["iteration",{"_index":177,"title":{},"body":{"classes/Hash.html":{}}}],["iterations",{"_index":144,"title":{},"body":{"classes/Hash.html":{}}}],["iv",{"_index":105,"title":{},"body":{"classes/Encryption.html":{}}}],["iv:encrypted_data",{"_index":61,"title":{},"body":{"classes/Encryption.html":{}}}],["iv_length",{"_index":22,"title":{},"body":{"classes/Encryption.html":{}}}],["ivhex",{"_index":123,"title":{},"body":{"classes/Encryption.html":{}}}],["keep",{"_index":291,"title":{},"body":{"index.html":{}}}],["key",{"_index":50,"title":{},"body":{"classes/Encryption.html":{}}}],["key.length",{"_index":93,"title":{},"body":{"classes/Encryption.html":{}}}],["key_length",{"_index":23,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["keywords",{"_index":303,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":280,"title":{},"body":{"index.html":{}}}],["length",{"_index":101,"title":{},"body":{"classes/Encryption.html":{}}}],["library",{"_index":219,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":311,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":322,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintained",{"_index":271,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":253,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":290,"title":{},"body":{"index.html":{}}}],["make",{"_index":283,"title":{},"body":{"index.html":{}}}],["matches",{"_index":169,"title":{},"body":{"classes/Hash.html":{}}}],["matching",{"_index":139,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":24,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["miscellaneous",{"_index":318,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":312,"title":{},"body":{"properties.html":{}}}],["modern",{"_index":241,"title":{},"body":{"index.html":{},"properties.html":{}}}],["modules",{"_index":299,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":285,"title":{},"body":{"index.html":{}}}],["name",{"_index":58,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{}}}],["new",{"_index":96,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"index.html":{}}}],["number",{"_index":44,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["object",{"_index":172,"title":{},"body":{"classes/Hash.html":{}}}],["offering",{"_index":220,"title":{},"body":{"index.html":{},"properties.html":{}}}],["on('data",{"_index":116,"title":{},"body":{"classes/Encryption.html":{}}}],["on('end",{"_index":119,"title":{},"body":{"classes/Encryption.html":{}}}],["on('error",{"_index":121,"title":{},"body":{"classes/Encryption.html":{}}}],["ongoing",{"_index":262,"title":{},"body":{"index.html":{}}}],["open",{"_index":251,"title":{},"body":{"index.html":{}}}],["optional",{"_index":59,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["original",{"_index":62,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["out",{"_index":288,"title":{},"body":{"index.html":{}}}],["overview",{"_index":300,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":210,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":92,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["password",{"_index":163,"title":{},"body":{"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["pipe(cipher",{"_index":115,"title":{},"body":{"classes/Encryption.html":{}}}],["pipe(decipher",{"_index":133,"title":{},"body":{"classes/Encryption.html":{}}}],["please",{"_index":259,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":246,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":221,"title":{},"body":{"index.html":{},"properties.html":{}}}],["prevent",{"_index":192,"title":{},"body":{"classes/Hash.html":{}}}],["previously",{"_index":164,"title":{},"body":{"classes/Hash.html":{}}}],["private",{"_index":17,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["process.env[`encryption_key_${version",{"_index":137,"title":{},"body":{"classes/Encryption.html":{}}}],["project",{"_index":252,"title":{},"body":{"index.html":{}}}],["promise",{"_index":66,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["promise((resolve",{"_index":110,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"properties.html":{}}}],["protected",{"_index":30,"title":{},"body":{"classes/Encryption.html":{}}}],["protecting",{"_index":235,"title":{},"body":{"index.html":{},"properties.html":{}}}],["provides",{"_index":224,"title":{},"body":{"index.html":{},"properties.html":{}}}],["puq",{"_index":304,"title":{},"body":{"properties.html":{}}}],["puq/crypto",{"_index":216,"title":{},"body":{"index.html":{}}}],["puq/cryptofunding",{"_index":248,"title":{},"body":{"index.html":{}}}],["random",{"_index":74,"title":{},"body":{"classes/Encryption.html":{}}}],["readable",{"_index":88,"title":{},"body":{"classes/Encryption.html":{}}}],["readable.from([buffer.from(encryptedhex",{"_index":132,"title":{},"body":{"classes/Encryption.html":{}}}],["readable.from([data",{"_index":113,"title":{},"body":{"classes/Encryption.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["reject",{"_index":111,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["reject(err",{"_index":187,"title":{},"body":{"classes/Hash.html":{}}}],["repository",{"_index":313,"title":{},"body":{"properties.html":{}}}],["resolve(`${iv.tostring(this.encoding)}:${encrypted",{"_index":120,"title":{},"body":{"classes/Encryption.html":{}}}],["resolve(decrypted",{"_index":135,"title":{},"body":{"classes/Encryption.html":{}}}],["resolve(derivedkey.tostring(this.encoding",{"_index":188,"title":{},"body":{"classes/Hash.html":{}}}],["resolving",{"_index":67,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["results",{"_index":138,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":109,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["returns",{"_index":65,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["robert",{"_index":316,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":297,"title":{},"body":{"index.html":{}}}],["robust",{"_index":231,"title":{},"body":{"index.html":{},"properties.html":{}}}],["running",{"_index":292,"title":{},"body":{"index.html":{}}}],["safe",{"_index":191,"title":{},"body":{"classes/Hash.html":{}}}],["salt",{"_index":156,"title":{},"body":{"classes/Hash.html":{}}}],["salt_length",{"_index":145,"title":{},"body":{"classes/Hash.html":{}}}],["secure",{"_index":77,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{},"properties.html":{}}}],["securely",{"_index":294,"title":{},"body":{"index.html":{}}}],["security",{"_index":179,"title":{},"body":{"classes/Hash.html":{}}}],["sensitive",{"_index":226,"title":{},"body":{"index.html":{},"properties.html":{}}}],["sha256",{"_index":147,"title":{},"body":{"classes/Hash.html":{}}}],["smoothly",{"_index":293,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"index.html":{}}}],["src/.../hash.ts",{"_index":321,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/encryption.ts",{"_index":6,"title":{},"body":{"classes/Encryption.html":{},"coverage.html":{}}}],["src/lib/encryption.ts:10",{"_index":46,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:11",{"_index":43,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:17",{"_index":84,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:30",{"_index":70,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:55",{"_index":52,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:8",{"_index":41,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:81",{"_index":72,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:9",{"_index":48,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/encryption.ts:90",{"_index":79,"title":{},"body":{"classes/Encryption.html":{}}}],["src/lib/hash.ts",{"_index":141,"title":{},"body":{"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hash.ts:10",{"_index":152,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:11",{"_index":148,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:12",{"_index":153,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:13",{"_index":149,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:20",{"_index":171,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:45",{"_index":157,"title":{},"body":{"classes/Hash.html":{}}}],["src/lib/hash.ts:9",{"_index":151,"title":{},"body":{"classes/Hash.html":{}}}],["standard",{"_index":228,"title":{},"body":{"index.html":{},"properties.html":{}}}],["started",{"_index":215,"title":{"index.html":{}},"body":{}}],["statements",{"_index":200,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["stays",{"_index":267,"title":{},"body":{"index.html":{}}}],["storage",{"_index":238,"title":{},"body":{"index.html":{},"properties.html":{}}}],["stored",{"_index":160,"title":{},"body":{"classes/Hash.html":{}}}],["storedhash",{"_index":155,"title":{},"body":{"classes/Hash.html":{}}}],["stream",{"_index":89,"title":{},"body":{"classes/Encryption.html":{}}}],["streams",{"_index":14,"title":{},"body":{"classes/Encryption.html":{}}}],["string",{"_index":34,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["summary",{"_index":217,"title":{},"body":{"index.html":{}}}],["support",{"_index":298,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":261,"title":{},"body":{"index.html":{}}}],["swc/helpers",{"_index":212,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":208,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":254,"title":{},"body":{"index.html":{}}}],["thank",{"_index":249,"title":{},"body":{"index.html":{}}}],["this.algorithm",{"_index":184,"title":{},"body":{"classes/Hash.html":{}}}],["this.encoding",{"_index":129,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["this.iterations",{"_index":183,"title":{},"body":{"classes/Hash.html":{}}}],["this.key_length",{"_index":94,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["this.validatekey(key",{"_index":103,"title":{},"body":{"classes/Encryption.html":{}}}],["throw",{"_index":95,"title":{},"body":{"classes/Encryption.html":{}}}],["throws",{"_index":99,"title":{},"body":{"classes/Encryption.html":{}}}],["time",{"_index":255,"title":{},"body":{"index.html":{}}}],["timing",{"_index":190,"title":{},"body":{"classes/Hash.html":{}}}],["toward",{"_index":275,"title":{},"body":{"index.html":{}}}],["truly",{"_index":10,"title":{},"body":{"classes/Encryption.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":319,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":218,"title":{},"body":{"index.html":{},"properties.html":{}}}],["up",{"_index":268,"title":{},"body":{"index.html":{}}}],["updates",{"_index":278,"title":{},"body":{"index.html":{}}}],["use",{"_index":189,"title":{},"body":{"classes/Hash.html":{}}}],["used",{"_index":166,"title":{},"body":{"classes/Hash.html":{}}}],["useful",{"_index":258,"title":{},"body":{"index.html":{}}}],["users",{"_index":287,"title":{},"body":{"index.html":{}}}],["using",{"_index":13,"title":{},"body":{"classes/Encryption.html":{},"index.html":{},"properties.html":{}}}],["utilities",{"_index":222,"title":{},"body":{"index.html":{},"properties.html":{}}}],["utility",{"_index":9,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["validatekey",{"_index":31,"title":{},"body":{"classes/Encryption.html":{}}}],["validatekey(key",{"_index":83,"title":{},"body":{"classes/Encryption.html":{}}}],["value",{"_index":36,"title":{},"body":{"classes/Encryption.html":{},"classes/Hash.html":{}}}],["variables",{"_index":81,"title":{},"body":{"classes/Encryption.html":{}}}],["verification",{"_index":233,"title":{},"body":{"index.html":{},"properties.html":{}}}],["verify",{"_index":161,"title":{},"body":{"classes/Hash.html":{}}}],["version",{"_index":82,"title":{},"body":{"classes/Encryption.html":{},"properties.html":{}}}],["versions",{"_index":281,"title":{},"body":{"index.html":{}}}],["void",{"_index":86,"title":{},"body":{"classes/Encryption.html":{}}}],["web",{"_index":242,"title":{},"body":{"index.html":{},"properties.html":{}}}],["well",{"_index":270,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Encryption.html":{"url":"classes/Encryption.html","title":"class - Encryption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Encryption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/encryption.ts\n        \n\n\n            \n                Description\n            \n            \n                Crypto utility with truly asynchronous encryption and decryption using streams\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALGORITHM\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ENCODING\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                IV_LENGTH\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                KEY_LENGTH\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                decrypt\n                            \n                            \n                                    Static\n                                    Async\n                                encrypt\n                            \n                            \n                                    Static\n                                generateKey\n                            \n                            \n                                    Static\n                                getKeyFromEnv\n                            \n                            \n                                    Protected\n                                    Static\n                                validateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALGORITHM\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'aes-256-cbc'\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ENCODING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hex'\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        IV_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 16\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        KEY_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 32\n                    \n                \n                    \n                        \n                                Defined in src/lib/encryption.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        decrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrypt(encryptedData: string, key: Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:55\n                        \n                    \n\n\n            \n                \n                        Decrypts data encrypted with AES-256-CBC asynchronously with streams\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encryptedData\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Encrypted string (IV:encrypted_data)\n\n                                            \n                                        \n                                        \n                                                key\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Original encryption key (32 bytes/256 bits)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to decrypted string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    encrypt(data: string, key: Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:30\n                        \n                    \n\n\n            \n                \n                        Encrypts data using AES-256-CBC asynchronously with streams\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String to encrypt\n\n                                            \n                                        \n                                        \n                                                key\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Encryption key (32 bytes/256 bits)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to encrypted string (IV:encrypted_data in hex)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        generateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:81\n                        \n                    \n\n\n            \n                \n                        Generates a random 256-bit key\n\n\n                        \n                            Returns :     Buffer\n\n                        \n                            \n                                Buffer containing a secure random key\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getKeyFromEnv\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeyFromEnv(version: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:90\n                        \n                    \n\n\n            \n                \n                        Get key from environment variables\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                version\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Static\n                        validateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateKey(key: Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/encryption.ts:17\n                        \n                    \n\n\n            \n                \n                        Check the key has at 256 bits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { Readable } from 'stream';\n\n/**\n * Crypto utility with truly asynchronous encryption and decryption using streams\n */\nexport class Encryption {\n  private static readonly ALGORITHM = 'aes-256-cbc';\n  private static readonly KEY_LENGTH = 32; // 256 bits\n  private static readonly IV_LENGTH = 16; // 128 bits for CBC\n  private static readonly ENCODING = 'hex';\n\n  /**\n   * Check the key has at 256 bits\n   * @param key\n   */\n  protected static validateKey(key: Buffer) {\n    if (key.length !== this.KEY_LENGTH) {\n      throw new Error(`Key must be ${this.KEY_LENGTH} bytes`);\n    }\n  }\n\n  /**\n   * Encrypts data using AES-256-CBC asynchronously with streams\n   * @param data String to encrypt\n   * @param key Encryption key (32 bytes/256 bits)\n   * @returns Promise resolving to encrypted string (IV:encrypted_data in hex)\n   * @throws Error if key length is invalid\n   */\n  static async encrypt(data: string, key: Buffer): Promise {\n    this.validateKey(key);\n\n    const iv = crypto.randomBytes(this.IV_LENGTH);\n    const cipher = crypto.createCipheriv(this.ALGORITHM, key, iv);\n\n    return new Promise((resolve, reject) => {\n      let encrypted = '';\n      const input = Readable.from([data]); // Create stream from string\n\n      input\n        .pipe(cipher)\n        .on('data', (chunk) => (encrypted += chunk.toString(this.ENCODING)))\n        .on('end', () => resolve(`${iv.toString(this.ENCODING)}:${encrypted}`))\n        .on('error', reject);\n    });\n  }\n\n  /**\n   * Decrypts data encrypted with AES-256-CBC asynchronously with streams\n   * @param encryptedData Encrypted string (IV:encrypted_data)\n   * @param key Original encryption key (32 bytes/256 bits)\n   * @returns Promise resolving to decrypted string\n   * @throws Error if key length is invalid or decryption fails\n   */\n  static async decrypt(encryptedData: string, key: Buffer): Promise {\n    this.validateKey(key);\n\n    const [ivHex, encryptedHex] = encryptedData.split(':');\n    if (!ivHex || !encryptedHex) {\n      throw new Error('Invalid encrypted data format');\n    }\n\n    const iv = Buffer.from(ivHex, this.ENCODING);\n    const decipher = crypto.createDecipheriv(this.ALGORITHM, key, iv);\n    const input = Readable.from([Buffer.from(encryptedHex, this.ENCODING)]);\n\n    return new Promise((resolve, reject) => {\n      let decrypted = '';\n      input\n        .pipe(decipher)\n        .on('data', (chunk) => (decrypted += chunk.toString('utf8')))\n        .on('end', () => resolve(decrypted))\n        .on('error', reject);\n    });\n  }\n\n  /**\n   * Generates a random 256-bit key\n   * @returns Buffer containing a secure random key\n   */\n  static generateKey(): Buffer {\n    return crypto.randomBytes(this.KEY_LENGTH);\n  }\n\n  /**\n   * Get key from environment variables\n   * @param version\n   * @returns\n   */\n  static getKeyFromEnv(version: string) {\n    return process.env[`ENCRYPTION_KEY_${version}`];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hash.html":{"url":"classes/Hash.html","title":"class - Hash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hash.ts\n        \n\n\n            \n                Description\n            \n            \n                Crypto utility for secure hashing and comparison\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALGORITHM\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ENCODING\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ITERATIONS\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                KEY_LENGTH\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                SALT_LENGTH\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                compare\n                            \n                            \n                                    Static\n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALGORITHM\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'sha256'\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ENCODING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hex'\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ITERATIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100000\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        KEY_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 32\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        SALT_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 16\n                    \n                \n                    \n                        \n                                Defined in src/lib/hash.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string, storedHash: string, salt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/hash.ts:45\n                        \n                    \n\n\n            \n                \n                        Compares input data against a stored hash\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Input string to verify (e.g., password)\n\n                                            \n                                        \n                                        \n                                                storedHash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Previously generated hash\n\n                                            \n                                        \n                                        \n                                                salt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Salt used in original hash\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to boolean indicating if input matches stored hash\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/hash.ts:20\n                        \n                    \n\n\n            \n                \n                        Generates a secure hash from input data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String to hash (e.g., password)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise resolving to object with hash and salt (both hex-encoded)\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\n\nexport type HashResult = { hash: string; salt: string };\n\n/**\n * Crypto utility for secure hashing and comparison\n */\nexport class Hash {\n  private static readonly ITERATIONS = 100000; // High iteration count for security\n  private static readonly KEY_LENGTH = 32; // 256 bits\n  private static readonly ALGORITHM = 'sha256';\n  private static readonly SALT_LENGTH = 16; // 128 bits\n  private static readonly ENCODING = 'hex';\n\n  /**\n   * Generates a secure hash from input data\n   * @param data String to hash (e.g., password)\n   * @returns Promise resolving to object with hash and salt (both hex-encoded)\n   */\n  static async hash(data: string): Promise {\n    const salt = crypto.randomBytes(this.SALT_LENGTH).toString(this.ENCODING);\n    const hash = await new Promise((resolve, reject) => {\n      crypto.pbkdf2(\n        data,\n        salt,\n        this.ITERATIONS,\n        this.KEY_LENGTH,\n        this.ALGORITHM,\n        (err, derivedKey) => {\n          if (err) reject(err);\n          else resolve(derivedKey.toString(this.ENCODING));\n        }\n      );\n    });\n    return { hash, salt };\n  }\n\n  /**\n   * Compares input data against a stored hash\n   * @param data Input string to verify (e.g., password)\n   * @param storedHash Previously generated hash\n   * @param salt Salt used in original hash\n   * @returns Promise resolving to boolean indicating if input matches stored hash\n   */\n  static async compare(\n    data: string,\n    storedHash: string,\n    salt: string\n  ): Promise {\n    const hash = await new Promise((resolve, reject) => {\n      crypto.pbkdf2(\n        data,\n        salt,\n        this.ITERATIONS,\n        this.KEY_LENGTH,\n        this.ALGORITHM,\n        (err, derivedKey) => {\n          if (err) reject(err);\n          else resolve(derivedKey.toString(this.ENCODING));\n        }\n      );\n    });\n\n    // Use timing-safe comparison to prevent timing attacks\n    return crypto.timingSafeEqual(\n      Buffer.from(hash, this.ENCODING),\n      Buffer.from(storedHash, this.ENCODING)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/encryption.ts\n            \n            class\n            Encryption\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                src/lib/hash.ts\n            \n            class\n            Hash\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                        src/lib/hash.ts\n            \n            type alias\n            HashResult\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ~0.5.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/crypto\nSummary\nA TypeScript library offering powerful encryption and hashing utilities for secure data handling. It provides functions to encrypt and decrypt sensitive data using industry-standard algorithms, along with robust hashing methods for data integrity verification. Ideal for protecting sensitive information, implementing password storage, and ensuring data confidentiality in modern web applications.\nInstall\nExample :  pnpm add @puq/cryptoFunding\nThank you for using @puq/crypto It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            Description : A TypeScript library offering powerful encryption and hashing utilities for secure data handling. It provides functions to encrypt and decrypt sensitive data using industry-standard algorithms, along with robust hashing methods for data integrity verification. Ideal for protecting sensitive information, implementing password storage, and ensuring data confidentiality in modern web applications.\n        \n            Keywords : puq, crypto, hash, encrypt, encode, decode\n        \n            Homepage : https://rbrightline.github.io/puq/crypto\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HashResult   (src/.../hash.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/hash.ts\n    \n    \n        \n            \n                \n                    \n                    HashResult\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
