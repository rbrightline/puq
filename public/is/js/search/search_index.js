var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/IsThen.html",[0,0.646,1,1.134]],["body/classes/IsThen.html",[0,0.56,1,2.009,2,0.458,3,0.604,4,0.458,5,0.458,6,2.23,7,0.604,8,0.458,9,1.009,10,1.38,11,1.009,12,1.009,13,1.38,14,1.009,15,1.38,16,0.348,17,1.009,18,2.402,19,2.492,20,2.492,21,2.492,22,2.492,23,2.492,24,1.38,25,2.817,26,3.741,27,1.609,28,2.576,29,0.11,30,2.77,31,3.79,32,1.644,33,0.827,34,1.103,35,2.537,36,1.644,37,1.461,38,2.171,39,2.171,40,0.827,41,1.38,42,0.827,43,0.827,44,1.38,45,0.827,46,0.827,47,1.38,48,0.827,49,0.827,50,1.38,51,0.827,52,0.827,53,1.009,54,0.827,55,0.604,56,0.827,57,0.827,58,0.604,59,2.307,60,2.307,61,0.971,62,1.644,63,0.827,64,0.827,65,0.827,66,0.827,67,0.827,68,0.827,69,2.307,70,1.38,71,1.38,72,0.037,73,0.037]],["title/classes/Switch.html",[0,0.646,74,1.134]],["body/classes/Switch.html",[0,0.849,2,0.873,3,1.153,4,1.87,5,0.873,8,1.492,11,1.673,12,1.673,14,1.673,16,0.664,17,1.673,18,1.97,25,1.97,27,1.652,28,2.469,29,0.109,30,2.161,32,1.636,34,0.99,35,2.295,36,1.492,37,0.964,38,1.153,39,2.161,53,1.153,58,1.153,61,0.664,62,1.267,72,0.062,73,0.062,74,2.009,75,1.153,76,3.462,77,2.29,78,2.695,79,2.957,80,1.578,81,2.29,82,1.578,83,1.578,84,1.578,85,3.462,86,3.275,87,3.275,88,1.578,89,1.636,90,3.275,91,3.275,92,0.964,93,2.29,94,2.29,95,1.578,96,2.29,97,2.29,98,1.153,99,1.578,100,1.578,101,1.578,102,1.578,103,2.957,104,1.578,105,1.578,106,1.578,107,1.578,108,1.578,109,1.578]],["title/coverage.html",[110,2.009]],["body/coverage.html",[0,0.616,1,0.706,5,0.706,6,0.932,7,0.932,29,0.108,32,0.706,34,1.168,37,1.668,55,0.932,61,0.537,72,0.053,73,0.053,74,0.706,75,0.932,98,0.932,110,0.932,111,0.932,112,1.275,113,1.275,114,1.953,115,1.953,116,3.964,117,3.964,118,1.275,119,1.275,120,1.275,121,1.275,122,1.275,123,1.275,124,1.275,125,1.427,126,0.932,127,1.953,128,0.932,129,0.932,130,0.932,131,0.932,132,1.275,133,0.932,134,1.275,135,1.275,136,1.275,137,1.275,138,1.275,139,1.275,140,3.654,141,3.681,142,1.275,143,1.275,144,1.275,145,1.275,146,1.275,147,1.275,148,1.275,149,1.275,150,1.275,151,1.275,152,1.275,153,1.275,154,1.275,155,1.275,156,1.275,157,1.275,158,0.932,159,1.275,160,1.275,161,1.275,162,1.953,163,1.953,164,3.654,165,3.654,166,1.275,167,1.275,168,1.275,169,1.275,170,1.275,171,1.275,172,1.275,173,1.275,174,1.275,175,1.275,176,1.275,177,1.275,178,1.275,179,1.275,180,1.275,181,1.275,182,1.275,183,1.275,184,1.275,185,1.275,186,1.275,187,1.275]],["title/dependencies.html",[188,1.268,189,1.357]],["body/dependencies.html",[29,0.103,72,0.095,73,0.095,189,1.683,190,3.041,191,3.041,192,3.041,193,3.041]],["title/index.html",[16,0.731,194,1.736,195,1.736]],["body/index.html",[4,1.291,9,1.705,27,0.982,29,0.089,34,0.735,36,1.291,61,0.982,72,0.081,73,0.081,89,1.291,92,0.982,111,1.705,189,1.291,196,2.993,197,2.333,198,1.705,199,1.705,200,2.333,201,2.333,202,2.333,203,2.333,204,2.333,205,2.333,206,2.333,207,2.333,208,2.993,209,2.333,210,2.333,211,2.333,212,2.333,213,2.333,214,3.486,215,2.333,216,2.333,217,2.333,218,2.333,219,2.333,220,2.333,221,2.333,222,2.993,223,2.993,224,2.333,225,2.333,226,2.333,227,2.333,228,2.333,229,2.333,230,2.333,231,2.993,232,2.333,233,2.333,234,2.333,235,2.333,236,2.333,237,2.333,238,2.333,239,2.333,240,2.333,241,2.333,242,2.333,243,2.333,244,2.333,245,2.333,246,2.333,247,2.333,248,2.333,249,2.333,250,2.333,251,2.333,252,2.333,253,2.333,254,2.333,255,2.993,256,2.333,257,2.333]],["title/modules.html",[258,2.009]],["body/modules.html",[29,0.096,72,0.096,73,0.096,258,2.278]],["title/overview.html",[259,2.009]],["body/overview.html",[2,1.711,29,0.096,72,0.096,73,0.096,259,2.259,260,3.092]],["title/properties.html",[188,1.268,261,1.792]],["body/properties.html",[8,1.523,27,1.158,29,0.107,72,0.09,73,0.09,89,1.523,92,1.158,158,2.011,198,2.011,199,2.011,261,2.011,262,2.752,263,2.752,264,2.752,265,2.752,266,2.752,267,2.752,268,2.752,269,2.752,270,2.752,271,2.752,272,2.752,273,2.752,274,2.752,275,2.752,276,2.752,277,2.752,278,2.752]],["title/miscellaneous/typealiases.html",[279,1.268,280,2.452]],["body/miscellaneous/typealiases.html",[16,1.198,29,0.091,34,1.138,37,1.198,62,1.575,72,0.091,73,0.091,92,1.198,125,2.079,126,2.473,128,2.473,129,2.079,130,2.473,131,2.473,133,2.079,279,2.079,281,2.845,282,2.845,283,2.845,284,2.845,285,2.845]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":162,"title":{},"body":{"coverage.html":{}}}],["0.4.20",{"_index":263,"title":{},"body":{"properties.html":{}}}],["0.5.15",{"_index":191,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":163,"title":{},"body":{"coverage.html":{}}}],["1/1",{"_index":117,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":183,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":116,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":260,"title":{},"body":{"overview.html":{}}}],["3/4",{"_index":185,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":184,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":182,"title":{},"body":{"coverage.html":{}}}],["accordingly",{"_index":93,"title":{},"body":{"classes/Switch.html":{}}}],["add",{"_index":9,"title":{},"body":{"classes/IsThen.html":{},"index.html":{}}}],["alias",{"_index":127,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":281,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["author",{"_index":276,"title":{},"body":{"properties.html":{}}}],["brightline",{"_index":278,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":234,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":270,"title":{},"body":{"properties.html":{}}}],["case",{"_index":76,"title":{},"body":{"classes/Switch.html":{}}}],["check",{"_index":89,"title":{},"body":{"classes/Switch.html":{},"index.html":{},"properties.html":{}}}],["class",{"_index":0,"title":{"classes/IsThen.html":{},"classes/Switch.html":{}},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"overview.html":{}}}],["clone.ts",{"_index":123,"title":{},"body":{"coverage.html":{}}}],["compatibility",{"_index":237,"title":{},"body":{"index.html":{}}}],["conditional",{"_index":13,"title":{},"body":{"classes/IsThen.html":{}}}],["consider",{"_index":217,"title":{},"body":{"index.html":{}}}],["const",{"_index":59,"title":{},"body":{"classes/IsThen.html":{}}}],["constructor",{"_index":80,"title":{},"body":{"classes/Switch.html":{}}}],["constructor(private",{"_index":101,"title":{},"body":{"classes/Switch.html":{}}}],["constructor(value",{"_index":82,"title":{},"body":{"classes/Switch.html":{}}}],["contact",{"_index":254,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":221,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":110,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["date",{"_index":226,"title":{},"body":{"index.html":{}}}],["deepclone",{"_index":124,"title":{},"body":{"coverage.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["defined.js",{"_index":57,"title":{},"body":{"classes/IsThen.html":{}}}],["defined.ts",{"_index":115,"title":{},"body":{"coverage.html":{}}}],["defined/is",{"_index":56,"title":{},"body":{"classes/IsThen.html":{}}}],["dependencies",{"_index":189,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"properties.html":{}}}],["developer",{"_index":255,"title":{},"body":{"index.html":{}}}],["development",{"_index":220,"title":{},"body":{"index.html":{}}}],["docs",{"_index":10,"title":{},"body":{"classes/IsThen.html":{}}}],["documentation",{"_index":111,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["effort",{"_index":212,"title":{},"body":{"index.html":{}}}],["elsehandler",{"_index":31,"title":{},"body":{"classes/IsThen.html":{}}}],["empty",{"_index":158,"title":{},"body":{"coverage.html":{},"properties.html":{}}}],["empty.ts",{"_index":120,"title":{},"body":{"coverage.html":{}}}],["ensure",{"_index":223,"title":{},"body":{"index.html":{}}}],["entries",{"_index":126,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entriesreturntype",{"_index":128,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["enumeratorparam",{"_index":131,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["equal",{"_index":90,"title":{},"body":{"classes/Switch.html":{}}}],["even",{"_index":242,"title":{},"body":{"index.html":{}}}],["example",{"_index":201,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":285,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["fail",{"_index":87,"title":{},"body":{"classes/Switch.html":{}}}],["fail?.(value",{"_index":109,"title":{},"body":{"classes/Switch.html":{}}}],["false",{"_index":71,"title":{},"body":{"classes/IsThen.html":{}}}],["features",{"_index":240,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["find",{"_index":213,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":235,"title":{},"body":{"index.html":{}}}],["flow",{"_index":77,"title":{},"body":{"classes/Switch.html":{}}}],["flows",{"_index":15,"title":{},"body":{"classes/IsThen.html":{}}}],["function",{"_index":37,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":92,"title":{},"body":{"classes/Switch.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["funding",{"_index":231,"title":{},"body":{"index.html":{}}}],["general",{"_index":248,"title":{},"body":{"index.html":{}}}],["getting",{"_index":194,"title":{"index.html":{}},"body":{}}],["go",{"_index":232,"title":{},"body":{"index.html":{}}}],["handler",{"_index":26,"title":{},"body":{"classes/IsThen.html":{}}}],["handler(value",{"_index":69,"title":{},"body":{"classes/IsThen.html":{}}}],["help",{"_index":222,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":268,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":275,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":271,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/is",{"_index":269,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":112,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":53,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["improvements",{"_index":245,"title":{},"body":{"index.html":{}}}],["incaseof",{"_index":78,"title":{},"body":{"classes/Switch.html":{}}}],["incaseof(value",{"_index":84,"title":{},"body":{"classes/Switch.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["install",{"_index":200,"title":{},"body":{"index.html":{}}}],["instance",{"_index":60,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.isfalse(value",{"_index":66,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.isnotfalse(value",{"_index":67,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.isnottrue(value",{"_index":65,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.istrue(value",{"_index":64,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.ok(value",{"_index":63,"title":{},"body":{"classes/IsThen.html":{}}}],["instant",{"_index":230,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":166,"title":{},"body":{"coverage.html":{}}}],["isarraybigint",{"_index":167,"title":{},"body":{"coverage.html":{}}}],["isarraybigintorthrow",{"_index":142,"title":{},"body":{"coverage.html":{}}}],["isarrayboolean",{"_index":168,"title":{},"body":{"coverage.html":{}}}],["isarraybooleanorthrow",{"_index":143,"title":{},"body":{"coverage.html":{}}}],["isarrayfunction",{"_index":169,"title":{},"body":{"coverage.html":{}}}],["isarrayfunctionorthrow",{"_index":144,"title":{},"body":{"coverage.html":{}}}],["isarraynumber",{"_index":170,"title":{},"body":{"coverage.html":{}}}],["isarraynumberorthrow",{"_index":145,"title":{},"body":{"coverage.html":{}}}],["isarrayobject",{"_index":171,"title":{},"body":{"coverage.html":{}}}],["isarrayobjectorthrow",{"_index":146,"title":{},"body":{"coverage.html":{}}}],["isarrayorthrow",{"_index":147,"title":{},"body":{"coverage.html":{}}}],["isarraystring",{"_index":172,"title":{},"body":{"coverage.html":{}}}],["isarraystringorthrow",{"_index":148,"title":{},"body":{"coverage.html":{}}}],["isarraysymbol",{"_index":173,"title":{},"body":{"coverage.html":{}}}],["isarraysymbolorthrow",{"_index":149,"title":{},"body":{"coverage.html":{}}}],["isbigint",{"_index":174,"title":{},"body":{"coverage.html":{}}}],["isbigintorthrow",{"_index":150,"title":{},"body":{"coverage.html":{}}}],["isboolean",{"_index":175,"title":{},"body":{"coverage.html":{}}}],["isbooleanorthrow",{"_index":151,"title":{},"body":{"coverage.html":{}}}],["isdefined",{"_index":55,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["isdefined(value",{"_index":68,"title":{},"body":{"classes/IsThen.html":{}}}],["isdefinedorthrow",{"_index":98,"title":{},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["isdefinedorthrow(switchvalue",{"_index":105,"title":{},"body":{"classes/Switch.html":{}}}],["isfalse",{"_index":19,"title":{},"body":{"classes/IsThen.html":{}}}],["isfalse(value",{"_index":24,"title":{},"body":{"classes/IsThen.html":{}}}],["isfunction",{"_index":176,"title":{},"body":{"coverage.html":{}}}],["isfunctionorthrow",{"_index":152,"title":{},"body":{"coverage.html":{}}}],["isnotdefined",{"_index":118,"title":{},"body":{"coverage.html":{}}}],["isnotfalse",{"_index":20,"title":{},"body":{"classes/IsThen.html":{}}}],["isnotfalse(value",{"_index":41,"title":{},"body":{"classes/IsThen.html":{}}}],["isnottrue",{"_index":21,"title":{},"body":{"classes/IsThen.html":{}}}],["isnottrue(value",{"_index":44,"title":{},"body":{"classes/IsThen.html":{}}}],["isnumber",{"_index":177,"title":{},"body":{"coverage.html":{}}}],["isnumberorthrow",{"_index":153,"title":{},"body":{"coverage.html":{}}}],["isobject",{"_index":178,"title":{},"body":{"coverage.html":{}}}],["isobjectorthrow",{"_index":154,"title":{},"body":{"coverage.html":{}}}],["isprimitive",{"_index":179,"title":{},"body":{"coverage.html":{}}}],["isstring",{"_index":180,"title":{},"body":{"coverage.html":{}}}],["isstringorthrow",{"_index":155,"title":{},"body":{"coverage.html":{}}}],["issymbol",{"_index":181,"title":{},"body":{"coverage.html":{}}}],["issymbolorthrow",{"_index":156,"title":{},"body":{"coverage.html":{}}}],["isthen",{"_index":1,"title":{"classes/IsThen.html":{}},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["istrue",{"_index":22,"title":{},"body":{"classes/IsThen.html":{}}}],["istrue(value",{"_index":47,"title":{},"body":{"classes/IsThen.html":{}}}],["it's",{"_index":206,"title":{},"body":{"index.html":{}}}],["keep",{"_index":250,"title":{},"body":{"index.html":{}}}],["keys",{"_index":133,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["keywords",{"_index":266,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":238,"title":{},"body":{"index.html":{}}}],["library",{"_index":214,"title":{},"body":{"index.html":{}}}],["license",{"_index":272,"title":{},"body":{"properties.html":{}}}],["maintained",{"_index":229,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":209,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":249,"title":{},"body":{"index.html":{}}}],["make",{"_index":241,"title":{},"body":{"index.html":{}}}],["matching",{"_index":73,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["miscellaneous",{"_index":279,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":273,"title":{},"body":{"properties.html":{}}}],["modules",{"_index":258,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":243,"title":{},"body":{"index.html":{}}}],["name",{"_index":36,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{}}}],["new",{"_index":61,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"index.html":{}}}],["notempty",{"_index":121,"title":{},"body":{"coverage.html":{}}}],["notemptyorthrow",{"_index":159,"title":{},"body":{"coverage.html":{}}}],["null",{"_index":265,"title":{},"body":{"properties.html":{}}}],["ok",{"_index":23,"title":{},"body":{"classes/IsThen.html":{}}}],["ok(value",{"_index":50,"title":{},"body":{"classes/IsThen.html":{}}}],["omit",{"_index":135,"title":{},"body":{"coverage.html":{}}}],["ongoing",{"_index":219,"title":{},"body":{"index.html":{}}}],["open",{"_index":207,"title":{},"body":{"index.html":{}}}],["optional",{"_index":25,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["out",{"_index":247,"title":{},"body":{"index.html":{}}}],["overview",{"_index":259,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":85,"title":{},"body":{"classes/Switch.html":{}}}],["package",{"_index":188,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":103,"title":{},"body":{"classes/Switch.html":{}}}],["param.ts",{"_index":130,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["parameter",{"_index":284,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":35,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["pass",{"_index":86,"title":{},"body":{"classes/Switch.html":{}}}],["pass(value",{"_index":108,"title":{},"body":{"classes/Switch.html":{}}}],["pick",{"_index":137,"title":{},"body":{"coverage.html":{}}}],["please",{"_index":216,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":202,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":244,"title":{},"body":{"index.html":{}}}],["private",{"_index":81,"title":{},"body":{"classes/Switch.html":{}}}],["project",{"_index":208,"title":{},"body":{"index.html":{}}}],["properties",{"_index":261,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["public",{"_index":104,"title":{},"body":{"classes/Switch.html":{}}}],["puq",{"_index":267,"title":{},"body":{"properties.html":{}}}],["puq/error",{"_index":192,"title":{},"body":{"dependencies.html":{}}}],["puq/is",{"_index":196,"title":{},"body":{"index.html":{}}}],["puq/isfunding",{"_index":203,"title":{},"body":{"index.html":{}}}],["puq/type",{"_index":54,"title":{},"body":{"classes/IsThen.html":{}}}],["readonly",{"_index":102,"title":{},"body":{"classes/Switch.html":{}}}],["repository",{"_index":274,"title":{},"body":{"properties.html":{}}}],["required/is",{"_index":99,"title":{},"body":{"classes/Switch.html":{}}}],["results",{"_index":72,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":62,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":39,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["robert",{"_index":277,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":256,"title":{},"body":{"index.html":{}}}],["run",{"_index":91,"title":{},"body":{"classes/Switch.html":{}}}],["running",{"_index":251,"title":{},"body":{"index.html":{}}}],["secure",{"_index":227,"title":{},"body":{"index.html":{}}}],["securely",{"_index":253,"title":{},"body":{"index.html":{}}}],["set",{"_index":198,"title":{},"body":{"index.html":{},"properties.html":{}}}],["simplify",{"_index":12,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["smoothly",{"_index":252,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{}}}],["src/.../entries.ts",{"_index":282,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../enumerator",{"_index":283,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/defined/is",{"_index":114,"title":{},"body":{"coverage.html":{}}}],["src/lib/defined/not",{"_index":119,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/deep",{"_index":122,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/entries.ts",{"_index":125,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/object/enumerator",{"_index":129,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/object/keys.ts",{"_index":132,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/omit.ts",{"_index":134,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/pick.ts",{"_index":136,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/values.ts",{"_index":138,"title":{},"body":{"coverage.html":{}}}],["src/lib/required/is",{"_index":140,"title":{},"body":{"coverage.html":{}}}],["src/lib/required/not",{"_index":157,"title":{},"body":{"coverage.html":{}}}],["src/lib/string/trim.ts",{"_index":160,"title":{},"body":{"coverage.html":{}}}],["src/lib/type/is",{"_index":164,"title":{},"body":{"coverage.html":{}}}],["src/lib/workflow/is",{"_index":6,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["src/lib/workflow/switch.ts",{"_index":75,"title":{},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["src/lib/workflow/switch.ts:14",{"_index":95,"title":{},"body":{"classes/Switch.html":{}}}],["src/lib/workflow/switch.ts:26",{"_index":88,"title":{},"body":{"classes/Switch.html":{}}}],["src/lib/workflow/switch.ts:6",{"_index":83,"title":{},"body":{"classes/Switch.html":{}}}],["start",{"_index":96,"title":{},"body":{"classes/Switch.html":{}}}],["started",{"_index":195,"title":{"index.html":{}},"body":{}}],["statement",{"_index":97,"title":{},"body":{"classes/Switch.html":{}}}],["statements",{"_index":113,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["stays",{"_index":224,"title":{},"body":{"index.html":{}}}],["summary",{"_index":197,"title":{},"body":{"index.html":{}}}],["support",{"_index":257,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":218,"title":{},"body":{"index.html":{}}}],["swc/helpers",{"_index":190,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":74,"title":{"classes/Switch.html":{}},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["switch(switchvalue",{"_index":106,"title":{},"body":{"classes/Switch.html":{}}}],["switchvalue",{"_index":79,"title":{},"body":{"classes/Switch.html":{}}}],["switchvalue(switchvalue",{"_index":94,"title":{},"body":{"classes/Switch.html":{}}}],["t",{"_index":28,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["table",{"_index":187,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":186,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":210,"title":{},"body":{"index.html":{}}}],["thank",{"_index":204,"title":{},"body":{"index.html":{}}}],["then.ts",{"_index":7,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["then.ts:106",{"_index":43,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:18",{"_index":48,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:27",{"_index":45,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:36",{"_index":33,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:45",{"_index":42,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:54",{"_index":52,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:67",{"_index":49,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:80",{"_index":46,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:9",{"_index":51,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:93",{"_index":40,"title":{},"body":{"classes/IsThen.html":{}}}],["this.value",{"_index":107,"title":{},"body":{"classes/Switch.html":{}}}],["throw.js",{"_index":100,"title":{},"body":{"classes/Switch.html":{}}}],["throw.ts",{"_index":141,"title":{},"body":{"coverage.html":{}}}],["time",{"_index":211,"title":{},"body":{"index.html":{}}}],["toward",{"_index":233,"title":{},"body":{"index.html":{}}}],["trim",{"_index":161,"title":{},"body":{"coverage.html":{}}}],["true",{"_index":70,"title":{},"body":{"classes/IsThen.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts",{"_index":165,"title":{},"body":{"coverage.html":{}}}],["typealiases",{"_index":280,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":264,"title":{},"body":{"properties.html":{}}}],["up",{"_index":225,"title":{},"body":{"index.html":{}}}],["updates",{"_index":236,"title":{},"body":{"index.html":{}}}],["useful",{"_index":215,"title":{},"body":{"index.html":{}}}],["users",{"_index":246,"title":{},"body":{"index.html":{}}}],["using",{"_index":205,"title":{},"body":{"index.html":{}}}],["utility",{"_index":199,"title":{},"body":{"index.html":{},"properties.html":{}}}],["value",{"_index":27,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{},"properties.html":{}}}],["values",{"_index":139,"title":{},"body":{"coverage.html":{}}}],["version",{"_index":262,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":239,"title":{},"body":{"index.html":{}}}],["void",{"_index":30,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["well",{"_index":228,"title":{},"body":{"index.html":{}}}],["work",{"_index":14,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["workflow",{"_index":11,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["workspace",{"_index":193,"title":{},"body":{"dependencies.html":{}}}],["yes",{"_index":38,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/IsThen.html":{"url":"classes/IsThen.html","title":"class - IsThen","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsThen\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/workflow/is-then.ts\n        \n\n\n            \n                Description\n            \n            \n                \n add docs\nWorkflow class to simplify conditional work flows.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFalse\n                            \n                            \n                                isFalse\n                            \n                            \n                                    Static\n                                isNotFalse\n                            \n                            \n                                isNotFalse\n                            \n                            \n                                    Static\n                                isNotTrue\n                            \n                            \n                                isNotTrue\n                            \n                            \n                                    Static\n                                isTrue\n                            \n                            \n                                isTrue\n                            \n                            \n                                    Static\n                                ok\n                            \n                            \n                                ok\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isFalse\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFalse(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:36\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFalse\n                        \n                    \n                \n            \n            \n                \nisFalse(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNotFalse\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNotFalse(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:45\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNotFalse\n                        \n                    \n                \n            \n            \n                \nisNotFalse(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:106\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNotTrue\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNotTrue(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:27\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNotTrue\n                        \n                    \n                \n            \n            \n                \nisNotTrue(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:80\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isTrue\n                        \n                    \n                \n            \n            \n                \n                        \n                    isTrue(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTrue\n                        \n                    \n                \n            \n            \n                \nisTrue(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:67\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ok\n                        \n                    \n                \n            \n            \n                \n                        \n                    ok(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:9\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ok\n                        \n                    \n                \n            \n            \n                \nok(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { Optional } from '@puq/type';\nimport { isDefined } from '../defined/is-defined.js';\n\n/**\n * - [ ] add docs\n * Workflow class to simplify conditional work flows.\n */\nexport class IsThen {\n  static ok(\n    value: Optional,\n    handler: (value: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.ok(value, handler, elseHandler);\n  }\n\n  static isTrue(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isTrue(value, handler, elseHandler);\n  }\n\n  static isNotTrue(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isNotTrue(value, handler, elseHandler);\n  }\n\n  static isFalse(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isFalse(value, handler, elseHandler);\n  }\n\n  static isNotFalse(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isNotFalse(value, handler, elseHandler);\n  }\n\n  ok(\n    value: Optional,\n    handler: (value: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (isDefined(value)) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  isTrue(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value === true) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  isNotTrue(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value !== true) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  isFalse(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value === false) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  isNotFalse(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value !== false) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Switch.html":{"url":"classes/Switch.html","title":"class - Switch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Switch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/workflow/switch.ts\n        \n\n\n            \n                Description\n            \n            \n                Workflow class to simplify switch-case work-flow\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                inCaseOf\n                            \n                            \n                                    Static\n                                switchValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor(value: T)\n                    \n                \n                        \n                            \n                                Defined in src/lib/workflow/switch.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        inCaseOf\n                        \n                    \n                \n            \n            \n                \ninCaseOf(value: P, pass: (value: P) => void, fail?: (value?: P) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/switch.ts:26\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                            \n                        \n                    \n\n            \n                \n                        Check the value is equal to the source value or not and run the pass or fail functions accordingly\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        P\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ncase value\n\n\n                                            \n                                        \n                                        \n                                                pass\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nrun when the case value is equal to the source value\n\n\n                                            \n                                        \n                                        \n                                                fail\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nrun when the case value is not equal to the source value\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Switch>\n\n                        \n                            \n                                \nthis\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        switchValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    switchValue(switchValue: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/switch.ts:14\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Start the switch statement\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                switchValue\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nvalue to check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Switch\n\n                        \n                            \n                                this\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { isDefinedOrThrow } from '../required/is-defined-or-throw.js';\n\n/**\n * Workflow class to simplify switch-case work-flow\n */\nexport class Switch {\n  private constructor(private readonly value: T) {}\n\n  /**\n   * Start the switch statement\n   * @param switchValue - value to check\n   * @returns this\n   */\n  public static switchValue(switchValue: T): Switch {\n    isDefinedOrThrow(switchValue);\n    return new Switch(switchValue);\n  }\n\n  /**\n   * Check the `value` is equal to the source value or not and run the `pass` or `fail` functions accordingly\n   * @param value - case value\n   * @param pass - run when the case value is equal to the source value\n   * @param fail - run when the case value is not equal to the source value\n   * @returns - this\n   */\n  inCaseOf(\n    value: P,\n    pass: (value?: P) => void,\n    fail?: (value?: P) => void,\n  ): Switch> {\n    if (value === this.value) {\n      pass(value);\n    } else {\n      fail?.(value);\n    }\n    return this as Switch>;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/lib/defined/is-defined.ts\n            \n            function\n            isDefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/defined/is-not-defined.ts\n            \n            function\n            isNotDefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/defined/not-empty.ts\n            \n            function\n            notEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/deep-clone.ts\n            \n            function\n            deepClone\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/entries.ts\n            \n            function\n            entries\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/entries.ts\n            \n            type alias\n            EntriesReturnType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/enumerator-param.ts\n            \n            type alias\n            EnumeratorParam\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/keys.ts\n            \n            function\n            keys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/omit.ts\n            \n            function\n            omit\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/pick.ts\n            \n            function\n            pick\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/values.ts\n            \n            function\n            values\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-defined-or-throw.ts\n            \n            function\n            isDefinedOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayBigintOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayBooleanOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayFunctionOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayNumberOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayObjectOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayStringOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArraySymbolOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isBigintOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isBooleanOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isFunctionOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isNumberOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isObjectOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isStringOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isSymbolOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/not-empty-or-throw.ts\n            \n            function\n            notEmptyOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/string/trim.ts\n            \n            function\n            trim\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayBigint\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArraySymbol\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isBigint\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isPrimitive\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isSymbol\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/workflow/is-then.ts\n            \n            class\n            IsThen\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/lib/workflow/switch.ts\n            \n            class\n            Switch\n            \n                75 %\n                (3/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n        \n            @puq/error : workspace:^\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/is\nSummary\nA set of utility functions to check type of value.\nInstall\nExample :  pnpm add @puq/isFunding\nThank you for using @puq/is It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.4.20\n        \n            Description : A set of utility functions to check the value is undefined, null, or empty\n        \n            Keywords : puq, is\n        \n            Homepage : https://rbrightline.github.io/puq/is\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EntriesReturnType   (src/.../entries.ts)\n                        \n                        \n                            EnumeratorParam   (src/.../enumerator-param.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/object/entries.ts\n    \n    \n        \n            \n                \n                    \n                    EntriesReturnType\n                \n            \n            \n                \n                    The return type of the entries function\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/object/enumerator-param.ts\n    \n    \n        \n            \n                \n                    \n                    EnumeratorParam\n                \n            \n            \n                \n                    The parameter type of the entries and keys functions\n\n                \n            \n            \n                \n                        Exclude\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
