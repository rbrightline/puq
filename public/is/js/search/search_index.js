var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/IsThen.html",[0,0.646,1,1.134]],["body/classes/IsThen.html",[0,0.49,1,2.133,2,0.381,3,0.504,4,0.381,5,0.381,6,2.089,7,0.504,8,1.582,9,0.498,10,1.183,11,1.183,12,2.583,13,2.553,14,1.183,15,2.597,16,2.715,17,1.347,18,1.183,19,1.908,20,0.864,21,2.772,22,1.183,23,0.864,24,0.864,25,1.347,26,1.183,27,1.183,28,2.879,29,1.183,30,1.183,31,2.48,32,0.86,33,0.111,34,1.347,35,1.183,36,1.843,37,1.843,38,1.183,39,1.347,40,0.689,41,1.771,42,1.843,43,1.354,44,1.183,45,1.183,46,1.183,47,3.572,48,0.864,49,0.29,50,2.265,51,2.265,52,2.265,53,2.265,54,2.265,55,1.183,56,2.83,57,1.698,58,2.692,59,2.813,60,3.79,61,0.689,62,1.131,63,2.434,64,2.05,65,3.494,66,3.849,67,1.534,68,1.844,69,1.844,70,1.402,71,2.708,72,2.026,73,0.689,74,2.026,75,1.183,76,0.689,77,0.689,78,1.183,79,0.689,80,0.689,81,1.183,82,0.689,83,0.689,84,1.183,85,0.689,86,0.689,87,0.864,88,0.689,89,0.504,90,0.689,91,0.689,92,0.689,93,0.504,94,2.026,95,0.864,96,1.183,97,2.61,98,1.534,99,0.689,100,2.557,101,0.689,102,0.689,103,0.689,104,0.689,105,0.689,106,2.075,107,0.032,108,0.032]],["title/classes/Switch.html",[0,0.646,109,1.134]],["body/classes/Switch.html",[0,0.943,2,0.778,3,1.027,4,0.778,5,0.778,8,1.547,9,0.885,12,1.536,13,2.043,15,2.188,16,2.296,17,1.536,19,1.802,23,1.536,24,1.536,25,1.536,28,2.38,31,2.043,32,1.394,33,0.111,39,2.043,41,1.536,43,1.26,48,1.841,49,0.591,56,2.043,57,1.683,58,2.674,59,2.296,62,1.202,63,2.188,67,1.394,68,1.163,69,1.163,70,0.885,71,2.043,72,1.027,74,1.536,87,1.027,93,1.027,94,1.841,95,1.536,97,2.188,98,1.163,107,0.057,108,0.057,109,2.153,110,1.027,111,2.102,112,3.54,113,2.102,114,2.102,115,2.102,116,2.102,117,2.102,118,2.102,119,2.796,120,2.102,121,2.796,122,2.102,123,2.796,124,2.102,125,2.102,126,2.102,127,2.102,128,2.102,129,2.102,130,2.102,131,2.796,132,2.102,133,2.796,134,2.102,135,2.796,136,1.405,137,2.102,138,3.142,139,3.142,140,2.102,141,2.102,142,2.102,143,2.102,144,2.102,145,2.102,146,2.102,147,2.519,148,2.994,149,2.519,150,2.796,151,1.405,152,1.405,153,2.102,154,1.405,155,3.585,156,3.142,157,3.142,158,1.405,159,2.102,160,3.349,161,2.102,162,2.102,163,2.102,164,2.102,165,2.102,166,2.102,167,2.796,168,2.102,169,2.102,170,2.102,171,2.102,172,1.405,173,2.102,174,2.796,175,2.519,176,2.519,177,2.102,178,2.102,179,1.536,180,1.405,181,1.405,182,2.102,183,1.405,184,1.405,185,1.405,186,1.405,187,1.405,188,1.405,189,1.405,190,1.405,191,1.405,192,1.405,193,1.405,194,1.405]],["title/coverage.html",[195,2.009]],["body/coverage.html",[0,0.77,1,0.956,5,0.956,6,1.263,7,1.263,19,0.956,20,1.263,33,0.11,43,0.728,62,1.219,70,1.704,89,1.263,107,0.066,108,0.066,109,0.956,110,1.263,179,1.263,195,1.263,196,1.263,197,1.728,198,1.728,199,2.445,200,2.445,201,4.057,202,4.052,203,1.728,204,1.728,205,1.728,206,1.728,207,1.728,208,1.728,209,1.728,210,1.728,211,1.728,212,1.786,213,1.263,214,2.445,215,1.263,216,1.263,217,1.263,218,1.263,219,1.728,220,1.728,221,1.728,222,1.728,223,1.263,224,1.728,225,1.728,226,1.728,227,1.728,228,1.728,229,1.728,230,1.728,231,1.728,232,3.835,233,3.853,234,1.728,235,1.728,236,1.728,237,1.728,238,1.728,239,1.728,240,1.728,241,1.728,242,1.728,243,1.728,244,1.728,245,1.728,246,1.728,247,1.728,248,1.728,249,1.728,250,1.263,251,1.728,252,1.728,253,1.728,254,3.835,255,3.835,256,1.728,257,1.728,258,1.728,259,1.728,260,1.728,261,1.728,262,1.728,263,1.728,264,1.728,265,1.728,266,1.728,267,1.728,268,1.728,269,1.728,270,1.728,271,1.728,272,1.728,273,1.728,274,1.728,275,1.728,276,1.728,277,1.728]],["title/dependencies.html",[278,1.268,279,1.357]],["body/dependencies.html",[33,0.104,107,0.096,108,0.096,279,1.97,280,3.104,281,3.104,282,3.104,283,3.104,284,2.268]],["title/index.html",[49,0.731,285,1.736,286,1.736]],["body/index.html",[4,1.479,9,1.125,32,1.479,33,0.095,34,1.953,43,1.125,57,1.125,62,0.842,64,1.479,67,1.479,107,0.088,108,0.088,196,1.953,279,1.479,287,3.259,288,2.673,289,1.953,290,1.479,291,2.673,292,2.673,293,2.673,294,2.673,295,2.673,296,2.673,297,2.673,298,3.259,299,2.673,300,2.673,301,2.673,302,2.673,303,2.673,304,3.66,305,2.673,306,2.673,307,2.673,308,2.673,309,2.673,310,2.673,311,2.673,312,3.259,313,3.259,314,2.673,315,2.673,316,2.673,317,2.673,318,2.673,319,2.673,320,2.673,321,3.259,322,2.673,323,2.673,324,2.673,325,2.673,326,2.673,327,2.673,328,2.673,329,2.673,330,2.673,331,2.673,332,2.673,333,2.673,334,2.673,335,2.673,336,2.673,337,2.673,338,2.673,339,2.673,340,2.673,341,2.673,342,2.673,343,2.673,344,2.673,345,3.259,346,2.673,347,2.673]],["title/modules.html",[348,2.009]],["body/modules.html",[33,0.097,107,0.097,108,0.097,348,2.309]],["title/overview.html",[349,2.009]],["body/overview.html",[2,1.741,33,0.097,107,0.097,108,0.097,349,2.299,350,3.146]],["title/properties.html",[278,1.268,351,1.792]],["body/properties.html",[8,1.631,9,1.241,33,0.108,57,1.241,64,1.631,68,1.631,69,1.631,107,0.093,108,0.093,250,2.154,284,2.154,289,2.154,290,1.631,351,2.154,352,2.948,353,2.948,354,2.948,355,2.948,356,2.948,357,2.948,358,2.948,359,2.948,360,2.948,361,2.948,362,2.948,363,2.948,364,2.948,365,2.948]],["title/miscellaneous/typealiases.html",[366,1.268,367,2.452]],["body/miscellaneous/typealiases.html",[33,0.094,49,1.265,62,1.164,70,1.265,98,1.663,107,0.094,108,0.094,212,2.195,213,2.553,215,2.553,216,2.195,217,2.553,218,2.553,223,2.195,290,1.663,366,2.195,368,3.004,369,3.004,370,3.004,371,3.004,372,3.004]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":270,"title":{},"body":{"coverage.html":{}}}],["0.5.11",{"_index":284,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0.5.15",{"_index":281,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":271,"title":{},"body":{"coverage.html":{}}}],["1/1",{"_index":202,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":201,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":274,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":350,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":275,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":48,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["42\"example",{"_index":136,"title":{},"body":{"classes/Switch.html":{}}}],["50",{"_index":133,"title":{},"body":{"classes/Switch.html":{}}}],["active",{"_index":139,"title":{},"body":{"classes/Switch.html":{}}}],["add",{"_index":293,"title":{},"body":{"index.html":{}}}],["against",{"_index":119,"title":{},"body":{"classes/Switch.html":{}}}],["alias",{"_index":214,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":368,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":117,"title":{},"body":{"classes/Switch.html":{}}}],["author",{"_index":363,"title":{},"body":{"properties.html":{}}}],["based",{"_index":26,"title":{},"body":{"classes/IsThen.html":{}}}],["basic",{"_index":127,"title":{},"body":{"classes/Switch.html":{}}}],["being",{"_index":95,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["boolean",{"_index":21,"title":{},"body":{"classes/IsThen.html":{}}}],["brightline",{"_index":365,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":324,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":357,"title":{},"body":{"properties.html":{}}}],["callback",{"_index":71,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["case",{"_index":112,"title":{},"body":{"classes/Switch.html":{}}}],["cases",{"_index":121,"title":{},"body":{"classes/Switch.html":{}}}],["chainable",{"_index":115,"title":{},"body":{"classes/Switch.html":{}}}],["chaining",{"_index":13,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["check",{"_index":64,"title":{},"body":{"classes/IsThen.html":{},"index.html":{},"properties.html":{}}}],["checked",{"_index":96,"title":{},"body":{"classes/IsThen.html":{}}}],["checker",{"_index":42,"title":{},"body":{"classes/IsThen.html":{}}}],["checking",{"_index":118,"title":{},"body":{"classes/Switch.html":{}}}],["checks",{"_index":159,"title":{},"body":{"classes/Switch.html":{}}}],["class",{"_index":0,"title":{"classes/IsThen.html":{},"classes/Switch.html":{}},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"overview.html":{}}}],["clone.ts",{"_index":210,"title":{},"body":{"coverage.html":{}}}],["compare",{"_index":166,"title":{},"body":{"classes/Switch.html":{}}}],["compatibility",{"_index":327,"title":{},"body":{"index.html":{}}}],["condition",{"_index":27,"title":{},"body":{"classes/IsThen.html":{}}}],["conditional",{"_index":10,"title":{},"body":{"classes/IsThen.html":{}}}],["conditions",{"_index":22,"title":{},"body":{"classes/IsThen.html":{}}}],["consider",{"_index":307,"title":{},"body":{"index.html":{}}}],["console.log(\"active",{"_index":144,"title":{},"body":{"classes/Switch.html":{}}}],["console.log(\"inactive",{"_index":146,"title":{},"body":{"classes/Switch.html":{}}}],["console.log(\"is",{"_index":46,"title":{},"body":{"classes/IsThen.html":{}}}],["console.log(\"matched",{"_index":131,"title":{},"body":{"classes/Switch.html":{}}}],["console.log(\"not",{"_index":134,"title":{},"body":{"classes/Switch.html":{}}}],["console.log(\"undefined",{"_index":38,"title":{},"body":{"classes/IsThen.html":{}}}],["console.log(val",{"_index":37,"title":{},"body":{"classes/IsThen.html":{}}}],["const",{"_index":41,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["constructor",{"_index":149,"title":{},"body":{"classes/Switch.html":{}}}],["constructor(private",{"_index":183,"title":{},"body":{"classes/Switch.html":{}}}],["constructor(value",{"_index":151,"title":{},"body":{"classes/Switch.html":{}}}],["constructor.ts",{"_index":220,"title":{},"body":{"coverage.html":{}}}],["contact",{"_index":344,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":311,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":122,"title":{},"body":{"classes/Switch.html":{}}}],["coverage",{"_index":195,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":208,"title":{},"body":{"coverage.html":{}}}],["current",{"_index":74,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["date",{"_index":316,"title":{},"body":{"index.html":{}}}],["deepclone",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["defined.js",{"_index":91,"title":{},"body":{"classes/IsThen.html":{}}}],["defined.ts",{"_index":200,"title":{},"body":{"coverage.html":{}}}],["defined/is",{"_index":90,"title":{},"body":{"classes/IsThen.html":{}}}],["dependencies",{"_index":279,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"properties.html":{}}}],["developer",{"_index":345,"title":{},"body":{"index.html":{}}}],["development",{"_index":310,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":196,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["don't",{"_index":163,"title":{},"body":{"classes/Switch.html":{}}}],["e.g",{"_index":177,"title":{},"body":{"classes/Switch.html":{}}}],["each",{"_index":30,"title":{},"body":{"classes/IsThen.html":{}}}],["effort",{"_index":302,"title":{},"body":{"index.html":{}}}],["elsehandler",{"_index":60,"title":{},"body":{"classes/IsThen.html":{}}}],["empty",{"_index":250,"title":{},"body":{"coverage.html":{},"properties.html":{}}}],["empty.ts",{"_index":205,"title":{},"body":{"coverage.html":{}}}],["ensure",{"_index":313,"title":{},"body":{"index.html":{}}}],["entries",{"_index":213,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entriesreturntype",{"_index":215,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["enumeratorparam",{"_index":218,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["equal",{"_index":169,"title":{},"body":{"classes/Switch.html":{}}}],["equals",{"_index":168,"title":{},"body":{"classes/Switch.html":{}}}],["error",{"_index":176,"title":{},"body":{"classes/Switch.html":{}}}],["even",{"_index":332,"title":{},"body":{"index.html":{}}}],["example",{"_index":32,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{}}}],["exclude",{"_index":372,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["excluded",{"_index":126,"title":{},"body":{"classes/Switch.html":{}}}],["excluding",{"_index":165,"title":{},"body":{"classes/Switch.html":{}}}],["execute",{"_index":66,"title":{},"body":{"classes/IsThen.html":{}}}],["executed",{"_index":167,"title":{},"body":{"classes/Switch.html":{}}}],["executes",{"_index":162,"title":{},"body":{"classes/Switch.html":{}}}],["executing",{"_index":23,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["execution",{"_index":11,"title":{},"body":{"classes/IsThen.html":{}}}],["export",{"_index":93,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["extending",{"_index":100,"title":{},"body":{"classes/IsThen.html":{}}}],["fail",{"_index":157,"title":{},"body":{"classes/Switch.html":{}}}],["fail?.(value",{"_index":194,"title":{},"body":{"classes/Switch.html":{}}}],["fallback",{"_index":29,"title":{},"body":{"classes/IsThen.html":{}}}],["false",{"_index":65,"title":{},"body":{"classes/IsThen.html":{}}}],["features",{"_index":330,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["find",{"_index":303,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":325,"title":{},"body":{"index.html":{}}}],["fluent",{"_index":114,"title":{},"body":{"classes/Switch.html":{}}}],["found",{"_index":124,"title":{},"body":{"classes/Switch.html":{}}}],["from.ts",{"_index":225,"title":{},"body":{"coverage.html":{}}}],["function",{"_index":70,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":290,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["funding",{"_index":321,"title":{},"body":{"index.html":{}}}],["general",{"_index":338,"title":{},"body":{"index.html":{}}}],["getting",{"_index":285,"title":{"index.html":{}},"body":{}}],["go",{"_index":322,"title":{},"body":{"index.html":{}}}],["handle",{"_index":18,"title":{},"body":{"classes/IsThen.html":{}}}],["handler",{"_index":56,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["handler(value",{"_index":106,"title":{},"body":{"classes/IsThen.html":{}}}],["handlers",{"_index":25,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["hello",{"_index":92,"title":{},"body":{"classes/IsThen.html":{}}}],["hello\"example",{"_index":40,"title":{},"body":{"classes/IsThen.html":{}}}],["help",{"_index":312,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":355,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":362,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":358,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/is",{"_index":356,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":197,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["improvements",{"_index":335,"title":{},"body":{"index.html":{}}}],["inactive",{"_index":140,"title":{},"body":{"classes/Switch.html":{}}}],["incaseof",{"_index":147,"title":{},"body":{"classes/Switch.html":{}}}],["incaseof('active",{"_index":143,"title":{},"body":{"classes/Switch.html":{}}}],["incaseof('inactive",{"_index":145,"title":{},"body":{"classes/Switch.html":{}}}],["incaseof(42",{"_index":130,"title":{},"body":{"classes/Switch.html":{}}}],["incaseof(50",{"_index":132,"title":{},"body":{"classes/Switch.html":{}}}],["incaseof(value",{"_index":154,"title":{},"body":{"classes/Switch.html":{}}}],["index",{"_index":49,"title":{"index.html":{}},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["initialize",{"_index":153,"title":{},"body":{"classes/Switch.html":{}}}],["initiate",{"_index":173,"title":{},"body":{"classes/Switch.html":{}}}],["install",{"_index":291,"title":{},"body":{"index.html":{}}}],["instance",{"_index":16,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["instance.isfalse(value",{"_index":103,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.isnotfalse(value",{"_index":104,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.isnottrue(value",{"_index":102,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.istrue(value",{"_index":101,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.ok(value",{"_index":99,"title":{},"body":{"classes/IsThen.html":{}}}],["instant",{"_index":320,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":256,"title":{},"body":{"coverage.html":{}}}],["isarraybigint",{"_index":257,"title":{},"body":{"coverage.html":{}}}],["isarraybigintorthrow",{"_index":234,"title":{},"body":{"coverage.html":{}}}],["isarrayboolean",{"_index":258,"title":{},"body":{"coverage.html":{}}}],["isarraybooleanorthrow",{"_index":235,"title":{},"body":{"coverage.html":{}}}],["isarrayfunction",{"_index":259,"title":{},"body":{"coverage.html":{}}}],["isarrayfunctionorthrow",{"_index":236,"title":{},"body":{"coverage.html":{}}}],["isarraynumber",{"_index":260,"title":{},"body":{"coverage.html":{}}}],["isarraynumberorthrow",{"_index":237,"title":{},"body":{"coverage.html":{}}}],["isarrayobject",{"_index":261,"title":{},"body":{"coverage.html":{}}}],["isarrayobjectorthrow",{"_index":238,"title":{},"body":{"coverage.html":{}}}],["isarrayorthrow",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["isarraystring",{"_index":262,"title":{},"body":{"coverage.html":{}}}],["isarraystringorthrow",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["isarraysymbol",{"_index":263,"title":{},"body":{"coverage.html":{}}}],["isarraysymbolorthrow",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["isbigint",{"_index":264,"title":{},"body":{"coverage.html":{}}}],["isbigintorthrow",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["isboolean",{"_index":265,"title":{},"body":{"coverage.html":{}}}],["isbooleanorthrow",{"_index":243,"title":{},"body":{"coverage.html":{}}}],["isconstructor",{"_index":221,"title":{},"body":{"coverage.html":{}}}],["isdefined",{"_index":89,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["isdefined(value",{"_index":105,"title":{},"body":{"classes/IsThen.html":{}}}],["isdefinedorthrow",{"_index":179,"title":{},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["isdefinedorthrow(switchvalue",{"_index":187,"title":{},"body":{"classes/Switch.html":{}}}],["isfalse",{"_index":50,"title":{},"body":{"classes/IsThen.html":{}}}],["isfalse(value",{"_index":55,"title":{},"body":{"classes/IsThen.html":{}}}],["isfunction",{"_index":266,"title":{},"body":{"coverage.html":{}}}],["isfunctionorthrow",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["isnotdefined",{"_index":203,"title":{},"body":{"coverage.html":{}}}],["isnotfalse",{"_index":51,"title":{},"body":{"classes/IsThen.html":{}}}],["isnotfalse(value",{"_index":75,"title":{},"body":{"classes/IsThen.html":{}}}],["isnottrue",{"_index":52,"title":{},"body":{"classes/IsThen.html":{}}}],["isnottrue(value",{"_index":78,"title":{},"body":{"classes/IsThen.html":{}}}],["isnumber",{"_index":267,"title":{},"body":{"coverage.html":{}}}],["isnumberorthrow",{"_index":245,"title":{},"body":{"coverage.html":{}}}],["isobject",{"_index":268,"title":{},"body":{"coverage.html":{}}}],["isobjectorthrow",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["isprimitive",{"_index":269,"title":{},"body":{"coverage.html":{}}}],["isstring",{"_index":272,"title":{},"body":{"coverage.html":{}}}],["isstringorthrow",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["issymbol",{"_index":273,"title":{},"body":{"coverage.html":{}}}],["issymbolorthrow",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["isthen",{"_index":1,"title":{"classes/IsThen.html":{}},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["isthen.ok(\"hello",{"_index":35,"title":{},"body":{"classes/IsThen.html":{}}}],["istrue",{"_index":53,"title":{},"body":{"classes/IsThen.html":{}}}],["istrue(true",{"_index":45,"title":{},"body":{"classes/IsThen.html":{}}}],["istrue(value",{"_index":81,"title":{},"body":{"classes/IsThen.html":{}}}],["it's",{"_index":296,"title":{},"body":{"index.html":{}}}],["keep",{"_index":340,"title":{},"body":{"index.html":{}}}],["keys",{"_index":223,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["keywords",{"_index":353,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":328,"title":{},"body":{"index.html":{}}}],["library",{"_index":304,"title":{},"body":{"index.html":{}}}],["license",{"_index":359,"title":{},"body":{"properties.html":{}}}],["maintained",{"_index":319,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":299,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":339,"title":{},"body":{"index.html":{}}}],["make",{"_index":331,"title":{},"body":{"index.html":{}}}],["manner",{"_index":116,"title":{},"body":{"classes/Switch.html":{}}}],["match",{"_index":123,"title":{},"body":{"classes/Switch.html":{}}}],["matched",{"_index":135,"title":{},"body":{"classes/Switch.html":{}}}],["matches",{"_index":161,"title":{},"body":{"classes/Switch.html":{}}}],["matching",{"_index":108,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["method",{"_index":12,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["miscellaneous",{"_index":366,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":360,"title":{},"body":{"properties.html":{}}}],["modules",{"_index":348,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":333,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":120,"title":{},"body":{"classes/Switch.html":{}}}],["name",{"_index":67,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{}}}],["narrowed",{"_index":170,"title":{},"body":{"classes/Switch.html":{}}}],["narrowing",{"_index":137,"title":{},"body":{"classes/Switch.html":{}}}],["narrows",{"_index":164,"title":{},"body":{"classes/Switch.html":{}}}],["new",{"_index":43,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"index.html":{}}}],["newfrom",{"_index":226,"title":{},"body":{"coverage.html":{}}}],["notempty",{"_index":206,"title":{},"body":{"coverage.html":{}}}],["notemptyorthrow",{"_index":251,"title":{},"body":{"coverage.html":{}}}],["null",{"_index":69,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"properties.html":{}}}],["ok",{"_index":54,"title":{},"body":{"classes/IsThen.html":{}}}],["ok(42",{"_index":44,"title":{},"body":{"classes/IsThen.html":{}}}],["ok(value",{"_index":84,"title":{},"body":{"classes/IsThen.html":{}}}],["omit",{"_index":228,"title":{},"body":{"coverage.html":{}}}],["ongoing",{"_index":309,"title":{},"body":{"index.html":{}}}],["open",{"_index":297,"title":{},"body":{"index.html":{}}}],["optional",{"_index":28,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["out",{"_index":337,"title":{},"body":{"index.html":{}}}],["output",{"_index":39,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["overview",{"_index":349,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":155,"title":{},"body":{"classes/Switch.html":{}}}],["package",{"_index":278,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":97,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["param.ts",{"_index":217,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["parameter",{"_index":371,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":63,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["pass",{"_index":156,"title":{},"body":{"classes/Switch.html":{}}}],["pass(value",{"_index":193,"title":{},"body":{"classes/Switch.html":{}}}],["peer",{"_index":282,"title":{},"body":{"dependencies.html":{}}}],["pending",{"_index":141,"title":{},"body":{"classes/Switch.html":{}}}],["pick",{"_index":230,"title":{},"body":{"coverage.html":{}}}],["please",{"_index":306,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":292,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":334,"title":{},"body":{"index.html":{}}}],["private",{"_index":150,"title":{},"body":{"classes/Switch.html":{}}}],["project",{"_index":298,"title":{},"body":{"index.html":{}}}],["properties",{"_index":351,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["provided",{"_index":24,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["provides",{"_index":14,"title":{},"body":{"classes/IsThen.html":{}}}],["public",{"_index":186,"title":{},"body":{"classes/Switch.html":{}}}],["puq",{"_index":354,"title":{},"body":{"properties.html":{}}}],["puq/error",{"_index":283,"title":{},"body":{"dependencies.html":{}}}],["puq/is",{"_index":287,"title":{},"body":{"index.html":{}}}],["puq/isfunding",{"_index":294,"title":{},"body":{"index.html":{}}}],["puq/type",{"_index":88,"title":{},"body":{"classes/IsThen.html":{}}}],["readonly",{"_index":184,"title":{},"body":{"classes/Switch.html":{}}}],["refining",{"_index":125,"title":{},"body":{"classes/Switch.html":{}}}],["repository",{"_index":361,"title":{},"body":{"properties.html":{}}}],["representing",{"_index":190,"title":{},"body":{"classes/Switch.html":{}}}],["required/is",{"_index":180,"title":{},"body":{"classes/Switch.html":{}}}],["results",{"_index":107,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":98,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":31,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["robert",{"_index":364,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":346,"title":{},"body":{"index.html":{}}}],["running",{"_index":341,"title":{},"body":{"index.html":{}}}],["secure",{"_index":317,"title":{},"body":{"index.html":{}}}],["securely",{"_index":343,"title":{},"body":{"index.html":{}}}],["set",{"_index":289,"title":{},"body":{"index.html":{},"properties.html":{}}}],["simplify",{"_index":111,"title":{},"body":{"classes/Switch.html":{}}}],["smoothly",{"_index":342,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{}}}],["src/.../entries.ts",{"_index":369,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../enumerator",{"_index":370,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/defined/is",{"_index":199,"title":{},"body":{"coverage.html":{}}}],["src/lib/defined/not",{"_index":204,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/create.ts",{"_index":207,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/deep",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/entries.ts",{"_index":212,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/object/enumerator",{"_index":216,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/object/is",{"_index":219,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/keys.ts",{"_index":222,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/new",{"_index":224,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/omit.ts",{"_index":227,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/pick.ts",{"_index":229,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/values.ts",{"_index":231,"title":{},"body":{"coverage.html":{}}}],["src/lib/required/is",{"_index":232,"title":{},"body":{"coverage.html":{}}}],["src/lib/required/not",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["src/lib/string/trim.ts",{"_index":252,"title":{},"body":{"coverage.html":{}}}],["src/lib/type/is",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["src/lib/workflow/is",{"_index":6,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["src/lib/workflow/switch.ts",{"_index":110,"title":{},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["src/lib/workflow/switch.ts:27",{"_index":152,"title":{},"body":{"classes/Switch.html":{}}}],["src/lib/workflow/switch.ts:44",{"_index":172,"title":{},"body":{"classes/Switch.html":{}}}],["src/lib/workflow/switch.ts:60",{"_index":158,"title":{},"body":{"classes/Switch.html":{}}}],["start",{"_index":178,"title":{},"body":{"classes/Switch.html":{}}}],["started",{"_index":286,"title":{"index.html":{}},"body":{}}],["statements",{"_index":198,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":15,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["status",{"_index":138,"title":{},"body":{"classes/Switch.html":{}}}],["stays",{"_index":314,"title":{},"body":{"index.html":{}}}],["stored",{"_index":160,"title":{},"body":{"classes/Switch.html":{}}}],["sub",{"_index":189,"title":{},"body":{"classes/Switch.html":{}}}],["summary",{"_index":288,"title":{},"body":{"index.html":{}}}],["support",{"_index":347,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":308,"title":{},"body":{"index.html":{}}}],["swc/helpers",{"_index":280,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":109,"title":{"classes/Switch.html":{}},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["switch(switchvalue",{"_index":188,"title":{},"body":{"classes/Switch.html":{}}}],["switch.switchvalue(42",{"_index":129,"title":{},"body":{"classes/Switch.html":{}}}],["switch.switchvalue(status",{"_index":142,"title":{},"body":{"classes/Switch.html":{}}}],["switched",{"_index":182,"title":{},"body":{"classes/Switch.html":{}}}],["switchvalue",{"_index":148,"title":{},"body":{"classes/Switch.html":{}}}],["switchvalue(switchvalue",{"_index":171,"title":{},"body":{"classes/Switch.html":{}}}],["t",{"_index":58,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["table",{"_index":277,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":276,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":300,"title":{},"body":{"index.html":{}}}],["template",{"_index":94,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["thank",{"_index":295,"title":{},"body":{"index.html":{}}}],["then.ts",{"_index":7,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["then.ts:105",{"_index":76,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:123",{"_index":86,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:145",{"_index":83,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:167",{"_index":80,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:189",{"_index":73,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:211",{"_index":77,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:33",{"_index":85,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:51",{"_index":82,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:69",{"_index":79,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:87",{"_index":61,"title":{},"body":{"classes/IsThen.html":{}}}],["this.value",{"_index":192,"title":{},"body":{"classes/Switch.html":{}}}],["throw.js",{"_index":181,"title":{},"body":{"classes/Switch.html":{}}}],["throw.ts",{"_index":233,"title":{},"body":{"coverage.html":{}}}],["throws",{"_index":175,"title":{},"body":{"classes/Switch.html":{}}}],["time",{"_index":301,"title":{},"body":{"index.html":{}}}],["toward",{"_index":323,"title":{},"body":{"index.html":{}}}],["trim",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["true",{"_index":47,"title":{},"body":{"classes/IsThen.html":{}}}],["type",{"_index":62,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts",{"_index":255,"title":{},"body":{"coverage.html":{}}}],["typealiases",{"_index":367,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":68,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"properties.html":{}}}],["up",{"_index":315,"title":{},"body":{"index.html":{}}}],["updates",{"_index":326,"title":{},"body":{"index.html":{}}}],["usage",{"_index":128,"title":{},"body":{"classes/Switch.html":{}}}],["useful",{"_index":305,"title":{},"body":{"index.html":{}}}],["users",{"_index":336,"title":{},"body":{"index.html":{}}}],["using",{"_index":34,"title":{},"body":{"classes/IsThen.html":{},"index.html":{}}}],["utility",{"_index":9,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{},"properties.html":{}}}],["val",{"_index":36,"title":{},"body":{"classes/IsThen.html":{}}}],["value",{"_index":57,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{},"properties.html":{}}}],["value's",{"_index":191,"title":{},"body":{"classes/Switch.html":{}}}],["values",{"_index":20,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["version",{"_index":352,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":329,"title":{},"body":{"index.html":{}}}],["via",{"_index":185,"title":{},"body":{"classes/Switch.html":{}}}],["void",{"_index":59,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["well",{"_index":318,"title":{},"body":{"index.html":{}}}],["workflow",{"_index":174,"title":{},"body":{"classes/Switch.html":{}}}],["workflows",{"_index":113,"title":{},"body":{"classes/Switch.html":{}}}],["yes",{"_index":72,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/IsThen.html":{"url":"classes/IsThen.html","title":"class - IsThen","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsThen\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/workflow/is-then.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for conditional execution with method chaining.\nProvides static and instance methods to handle defined values and boolean conditions,\nexecuting provided handlers based on the condition, with optional fallback handlers.\nEach method returns the IsThen instance for chaining.\nExample :// Using static method\nIsThen.ok(\"hello\", (val) => console.log(val), () => console.log(\"undefined\"));\n// Output: \"hello\"Example :// Using instance method with chaining\nconst checker = new IsThen();\nchecker\n  .ok(42, (val) => console.log(val))\n  .isTrue(true, () => console.log(\"is true\"));\n// Output: 42, \"is true\"\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFalse\n                            \n                            \n                                isFalse\n                            \n                            \n                                    Static\n                                isNotFalse\n                            \n                            \n                                isNotFalse\n                            \n                            \n                                    Static\n                                isNotTrue\n                            \n                            \n                                isNotTrue\n                            \n                            \n                                    Static\n                                isTrue\n                            \n                            \n                                isTrue\n                            \n                            \n                                    Static\n                                ok\n                            \n                            \n                                ok\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isFalse\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFalse(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:87\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Static method to check if a value is false and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is false.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is not false.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                A new IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFalse\n                        \n                    \n                \n            \n            \n                \nisFalse(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:189\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Instance method to check if a value is false and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is false.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is not false.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                The current IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNotFalse\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNotFalse(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:105\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Static method to check if a value is not false and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is not false.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is false.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                A new IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNotFalse\n                        \n                    \n                \n            \n            \n                \nisNotFalse(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:211\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Instance method to check if a value is not false and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is not false.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is false.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                The current IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNotTrue\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNotTrue(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:69\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Static method to check if a value is not true and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is not true.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is true.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                A new IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNotTrue\n                        \n                    \n                \n            \n            \n                \nisNotTrue(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:167\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Instance method to check if a value is not true and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is not true.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is true.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                The current IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isTrue\n                        \n                    \n                \n            \n            \n                \n                        \n                    isTrue(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:51\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Static method to check if a value is true and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is true.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is not true.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                A new IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTrue\n                        \n                    \n                \n            \n            \n                \nisTrue(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:145\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Instance method to check if a value is true and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is true.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is not true.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                The current IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ok\n                        \n                    \n                \n            \n            \n                \n                        \n                    ok(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:33\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Static method to check if a value is defined and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is defined.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is not defined.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                A new IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ok\n                        \n                    \n                \n            \n            \n                \nok(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:123\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Instance method to check if a value is defined and execute a handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to check (can be undefined or null).\n\n\n                                            \n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback to execute if the value is defined.\n\n\n                                            \n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback to execute if the value is not defined.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                The current IsThen instance for chaining.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { Optional } from '@puq/type';\nimport { isDefined } from '../defined/is-defined.js';\n\n/**\n * A utility class for conditional execution with method chaining.\n * Provides static and instance methods to handle defined values and boolean conditions,\n * executing provided handlers based on the condition, with optional fallback handlers.\n * Each method returns the `IsThen` instance for chaining.\n *\n * @example\n * // Using static method\n * IsThen.ok(\"hello\", (val) => console.log(val), () => console.log(\"undefined\"));\n * // Output: \"hello\"\n *\n * @example\n * // Using instance method with chaining\n * const checker = new IsThen();\n * checker\n *   .ok(42, (val) => console.log(val))\n *   .isTrue(true, () => console.log(\"is true\"));\n * // Output: 42, \"is true\"\n */\nexport class IsThen {\n  /**\n   * Static method to check if a value is defined and execute a handler.\n   *\n   * @template T - The type of the value being checked.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value: T) => void} handler - The callback to execute if the value is defined.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is not defined.\n   * @returns {IsThen} A new `IsThen` instance for chaining.\n   */\n  static ok(\n    value: Optional,\n    handler: (value: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.ok(value, handler, elseHandler);\n  }\n\n  /**\n   * Static method to check if a value is `true` and execute a handler.\n   *\n   * @template T - A type extending boolean.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value?: T) => void} handler - The callback to execute if the value is `true`.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is not `true`.\n   * @returns {IsThen} A new `IsThen` instance for chaining.\n   */\n  static isTrue(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isTrue(value, handler, elseHandler);\n  }\n\n  /**\n   * Static method to check if a value is not `true` and execute a handler.\n   *\n   * @template T - A type extending boolean.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value?: Optional) => void} handler - The callback to execute if the value is not `true`.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is `true`.\n   * @returns {IsThen} A new `IsThen` instance for chaining.\n   */\n  static isNotTrue(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isNotTrue(value, handler, elseHandler);\n  }\n\n  /**\n   * Static method to check if a value is `false` and execute a handler.\n   *\n   * @template T - A type extending boolean.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value?: T) => void} handler - The callback to execute if the value is `false`.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is not `false`.\n   * @returns {IsThen} A new `IsThen` instance for chaining.\n   */\n  static isFalse(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isFalse(value, handler, elseHandler);\n  }\n\n  /**\n   * Static method to check if a value is not `false` and execute a handler.\n   *\n   * @template T - A type extending boolean.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value?: Optional) => void} handler - The callback to execute if the value is not `false`.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is `false`.\n   * @returns {IsThen} A new `IsThen` instance for chaining.\n   */\n  static isNotFalse(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isNotFalse(value, handler, elseHandler);\n  }\n\n  /**\n   * Instance method to check if a value is defined and execute a handler.\n   *\n   * @template T - The type of the value being checked.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value: T) => void} handler - The callback to execute if the value is defined.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is not defined.\n   * @returns {IsThen} The current `IsThen` instance for chaining.\n   */\n  ok(\n    value: Optional,\n    handler: (value: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (isDefined(value)) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  /**\n   * Instance method to check if a value is `true` and execute a handler.\n   *\n   * @template T - A type extending boolean.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value?: T) => void} handler - The callback to execute if the value is `true`.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is not `true`.\n   * @returns {IsThen} The current `IsThen` instance for chaining.\n   */\n  isTrue(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value === true) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  /**\n   * Instance method to check if a value is not `true` and execute a handler.\n   *\n   * @template T - A type extending boolean.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value?: Optional) => void} handler - The callback to execute if the value is not `true`.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is `true`.\n   * @returns {IsThen} The current `IsThen` instance for chaining.\n   */\n  isNotTrue(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value !== true) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  /**\n   * Instance method to check if a value is `false` and execute a handler.\n   *\n   * @template T - A type extending boolean.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value?: T) => void} handler - The callback to execute if the value is `false`.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is not `false`.\n   * @returns {IsThen} The current `IsThen` instance for chaining.\n   */\n  isFalse(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value === false) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  /**\n   * Instance method to check if a value is not `false` and execute a handler.\n   *\n   * @template T - A type extending boolean.\n   * @param {Optional} value - The value to check (can be undefined or null).\n   * @param {(value?: Optional) => void} handler - The callback to execute if the value is not `false`.\n   * @param {() => void} [elseHandler] - Optional callback to execute if the value is `false`.\n   * @returns {IsThen} The current `IsThen` instance for chaining.\n   */\n  isNotFalse(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value !== false) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Switch.html":{"url":"classes/Switch.html","title":"class - Switch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Switch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/workflow/switch.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class to simplify switch-case workflows in a fluent, chainable manner.\nThe Switch class allows checking a value against multiple cases, executing\ncorresponding handlers when a match is found, and refining the type of the\nvalue as cases are excluded.\nExample :// Basic usage\nSwitch.switchValue(42)\n  .inCaseOf(42, () => console.log(\"Matched 42\"))\n  .inCaseOf(50, () => console.log(\"Matched 50\"), () => console.log(\"Not 50\"));\n// Output: \"Matched 42\"Example :// Type narrowing\ntype Status = 'active' | 'inactive' | 'pending';\nconst status: Status = 'active';\nSwitch.switchValue(status)\n  .inCaseOf('active', () => console.log(\"Active\"))\n  .inCaseOf('inactive', () => console.log(\"Inactive\"));\n// Output: \"Active\"\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                inCaseOf\n                            \n                            \n                                    Static\n                                switchValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor(value: T)\n                    \n                \n                        \n                            \n                                Defined in src/lib/workflow/switch.ts:27\n                            \n                        \n\n                \n                    \n                            Private constructor to initialize the switch value.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe value to switch on.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        inCaseOf\n                        \n                    \n                \n            \n            \n                \ninCaseOf(value: P, pass: (value: P) => void, fail?: (value?: P) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/switch.ts:60\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                            \n                        \n                    \n\n            \n                \n                        Checks if the stored value matches the provided case value.\nExecutes the pass handler if they match, or the optional fail handler if they don't.\nNarrows the type of the Switch instance by excluding the matched type from T.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        P\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe case value to compare against the stored value.\n\n\n                                            \n                                        \n                                        \n                                                pass\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback executed if the stored value equals the case value.\n\n\n                                            \n                                        \n                                        \n                                                fail\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional callback executed if the stored value does not equal the case value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Switch>\n\n                        \n                            \n                                The current Switch instance with a narrowed type for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        switchValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    switchValue(switchValue: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/switch.ts:44\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Static method to initiate a new Switch workflow with a value.\nThrows an error if the value is not defined (e.g., null or undefined).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                switchValue\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to start the switch workflow with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Switch\n\n                        \n                            \n                                A new Switch instance for chaining.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { isDefinedOrThrow } from '../required/is-defined-or-throw.js';\n\n/**\n * A utility class to simplify switch-case workflows in a fluent, chainable manner.\n * The `Switch` class allows checking a value against multiple cases, executing\n * corresponding handlers when a match is found, and refining the type of the\n * value as cases are excluded.\n *\n * @template T - The type of the value being switched on.\n *\n * @example\n * // Basic usage\n * Switch.switchValue(42)\n *   .inCaseOf(42, () => console.log(\"Matched 42\"))\n *   .inCaseOf(50, () => console.log(\"Matched 50\"), () => console.log(\"Not 50\"));\n * // Output: \"Matched 42\"\n *\n * @example\n * // Type narrowing\n * type Status = 'active' | 'inactive' | 'pending';\n * const status: Status = 'active';\n * Switch.switchValue(status)\n *   .inCaseOf('active', () => console.log(\"Active\"))\n *   .inCaseOf('inactive', () => console.log(\"Inactive\"));\n * // Output: \"Active\"\n */\nexport class Switch {\n  /**\n   * Private constructor to initialize the switch value.\n   *\n   * @param {T} value - The value to switch on.\n   */\n  private constructor(private readonly value: T) {}\n\n  /**\n   * Static method to initiate a new `Switch` workflow with a value.\n   * Throws an error if the value is not defined (e.g., `null` or `undefined`).\n   *\n   * @template T - The type of the value being switched on.\n   * @param {T} switchValue - The value to start the switch workflow with.\n   * @returns {Switch} A new `Switch` instance for chaining.\n   * @throws {Error} If `switchValue` is not defined (via `isDefinedOrThrow`).\n   */\n  public static switchValue(switchValue: T): Switch {\n    isDefinedOrThrow(switchValue);\n    return new Switch(switchValue);\n  }\n\n  /**\n   * Checks if the stored value matches the provided case value.\n   * Executes the `pass` handler if they match, or the optional `fail` handler if they don't.\n   * Narrows the type of the `Switch` instance by excluding the matched type from `T`.\n   *\n   * @template P - A sub type of `T` representing the case value's type.\n   * @param {P} value - The case value to compare against the stored value.\n   * @param {(value?: P) => void} pass - Callback executed if the stored value equals the case value.\n   * @param {(value?: P) => void} [fail] - Optional callback executed if the stored value does not equal the case value.\n   * @returns {Switch>} The current `Switch` instance with a narrowed type for chaining.\n   */\n  inCaseOf(\n    value: P,\n    pass: (value?: P) => void,\n    fail?: (value?: P) => void,\n  ): Switch> {\n    if (value === this.value) {\n      pass(value);\n    } else {\n      fail?.(value);\n    }\n    return this as Switch>;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/lib/defined/is-defined.ts\n            \n            function\n            isDefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/defined/is-not-defined.ts\n            \n            function\n            isNotDefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/defined/not-empty.ts\n            \n            function\n            notEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/create.ts\n            \n            function\n            create\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/deep-clone.ts\n            \n            function\n            deepClone\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/entries.ts\n            \n            function\n            entries\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/entries.ts\n            \n            type alias\n            EntriesReturnType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/enumerator-param.ts\n            \n            type alias\n            EnumeratorParam\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/is-constructor.ts\n            \n            function\n            isConstructor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/keys.ts\n            \n            function\n            keys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/new-from.ts\n            \n            function\n            newFrom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/omit.ts\n            \n            function\n            omit\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/pick.ts\n            \n            function\n            pick\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/values.ts\n            \n            function\n            values\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-defined-or-throw.ts\n            \n            function\n            isDefinedOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayBigintOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayBooleanOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayFunctionOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayNumberOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayObjectOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayStringOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArraySymbolOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isBigintOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isBooleanOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isFunctionOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isNumberOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isObjectOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isStringOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isSymbolOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/not-empty-or-throw.ts\n            \n            function\n            notEmptyOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/string/trim.ts\n            \n            function\n            trim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayBigint\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArraySymbol\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isBigint\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isPrimitive\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isSymbol\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/workflow/is-then.ts\n            \n            class\n            IsThen\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/lib/workflow/switch.ts\n            \n            class\n            Switch\n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @puq/error : ^0.5.11\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/is\nSummary\nA set of utility functions to check type of value.\nInstall\nExample :  pnpm add @puq/isFunding\nThank you for using @puq/is It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.5.11\n        \n            Description : A set of utility functions to check the value is undefined, null, or empty\n        \n            Keywords : puq, is\n        \n            Homepage : https://rbrightline.github.io/puq/is\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EntriesReturnType   (src/.../entries.ts)\n                        \n                        \n                            EnumeratorParam   (src/.../enumerator-param.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/object/entries.ts\n    \n    \n        \n            \n                \n                    \n                    EntriesReturnType\n                \n            \n            \n                \n                    The return type of the entries function\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/object/enumerator-param.ts\n    \n    \n        \n            \n                \n                    \n                    EnumeratorParam\n                \n            \n            \n                \n                    The parameter type of the entries and keys functions\n\n                \n            \n            \n                \n                        Exclude\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
