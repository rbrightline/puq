var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/IsThen.html",[0,0.646,1,1.134]],["body/classes/IsThen.html",[0,0.558,1,2.007,2,0.456,3,0.602,4,0.456,5,0.456,6,2.227,7,0.602,8,0.456,9,1.006,10,1.376,11,1.006,12,1.006,13,1.376,14,1.006,15,1.376,16,0.347,17,1.006,18,2.4,19,2.488,20,2.488,21,2.488,22,2.488,23,2.488,24,1.376,25,2.816,26,3.739,27,1.608,28,2.574,29,0.11,30,2.768,31,3.789,32,1.642,33,0.824,34,1.102,35,2.535,36,1.642,37,1.46,38,2.168,39,2.168,40,0.824,41,1.376,42,0.824,43,0.824,44,1.376,45,0.824,46,0.824,47,1.376,48,0.824,49,0.824,50,1.376,51,0.824,52,0.824,53,1.006,54,0.824,55,0.602,56,0.824,57,0.824,58,0.602,59,2.302,60,2.302,61,0.969,62,1.642,63,0.824,64,0.824,65,0.824,66,0.824,67,0.824,68,0.824,69,2.302,70,1.376,71,1.376,72,0.037,73,0.037]],["title/classes/Switch.html",[0,0.646,74,1.134]],["body/classes/Switch.html",[0,0.848,2,0.871,3,1.15,4,1.869,5,0.871,8,1.489,11,1.67,12,1.67,14,1.67,16,0.662,17,1.67,18,1.967,25,1.967,27,1.652,28,2.468,29,0.109,30,2.158,32,1.635,34,0.989,35,2.292,36,1.489,37,0.962,38,1.15,39,2.158,53,1.15,58,1.15,61,0.662,62,1.265,72,0.062,73,0.062,74,1.951,75,1.15,76,3.459,77,2.286,78,2.692,79,2.954,80,1.574,81,2.286,82,1.574,83,1.574,84,1.574,85,3.459,86,3.273,87,3.273,88,1.574,89,1.635,90,3.273,91,3.273,92,0.962,93,2.286,94,2.286,95,1.574,96,2.286,97,2.286,98,2.286,99,1.15,100,1.574,101,1.574,102,1.574,103,1.574,104,2.954,105,1.574,106,1.574,107,1.574,108,1.574,109,1.574,110,1.574]],["title/coverage.html",[111,2.009]],["body/coverage.html",[0,0.62,1,0.712,5,0.712,6,0.94,7,0.94,29,0.108,32,0.712,34,1.169,37,1.668,55,0.94,61,0.542,72,0.053,73,0.053,74,0.712,75,0.94,99,0.94,111,0.94,112,0.94,113,1.287,114,1.287,115,1.967,116,1.967,117,3.962,118,3.962,119,1.287,120,1.287,121,1.287,122,1.287,123,1.437,124,0.94,125,1.967,126,0.94,127,0.94,128,0.94,129,0.94,130,1.287,131,0.94,132,1.287,133,1.287,134,1.287,135,1.287,136,1.287,137,1.287,138,3.66,139,3.687,140,1.287,141,1.287,142,1.287,143,1.287,144,1.287,145,1.287,146,1.287,147,1.287,148,1.287,149,1.287,150,1.287,151,1.287,152,1.287,153,1.287,154,1.287,155,1.287,156,0.94,157,1.287,158,1.287,159,1.287,160,1.967,161,1.967,162,3.66,163,3.66,164,1.287,165,1.287,166,1.287,167,1.287,168,1.287,169,1.287,170,1.287,171,1.287,172,1.287,173,1.287,174,1.287,175,1.287,176,1.287,177,1.287,178,1.287,179,1.287,180,1.287,181,1.287,182,1.287,183,1.287,184,1.287,185,1.287]],["title/dependencies.html",[186,1.268,187,1.357]],["body/dependencies.html",[29,0.103,72,0.095,73,0.095,187,1.683,188,3.041,189,3.041,190,3.041,191,3.041]],["title/index.html",[16,0.731,192,1.736,193,1.736]],["body/index.html",[4,1.289,9,1.702,27,0.981,29,0.089,34,0.734,36,1.289,61,0.981,72,0.081,73,0.081,89,1.289,92,0.981,112,1.702,187,1.289,194,2.99,195,2.33,196,1.702,197,1.702,198,2.33,199,2.33,200,2.33,201,2.33,202,2.33,203,2.33,204,2.33,205,2.33,206,2.99,207,2.33,208,2.33,209,2.33,210,2.33,211,2.33,212,3.484,213,2.33,214,2.33,215,2.33,216,2.33,217,2.33,218,2.33,219,2.33,220,2.99,221,2.99,222,2.33,223,2.33,224,2.33,225,2.33,226,2.33,227,2.33,228,2.33,229,2.99,230,2.33,231,2.33,232,2.33,233,2.33,234,2.33,235,2.33,236,2.33,237,2.33,238,2.33,239,2.33,240,2.33,241,2.33,242,2.33,243,2.33,244,2.33,245,2.33,246,2.33,247,2.33,248,2.33,249,2.33,250,2.33,251,2.33,252,2.33,253,2.99,254,2.33,255,2.33]],["title/modules.html",[256,2.009]],["body/modules.html",[29,0.096,72,0.096,73,0.096,256,2.278]],["title/overview.html",[257,2.009]],["body/overview.html",[2,1.71,29,0.096,72,0.096,73,0.096,257,2.259,258,3.091]],["title/properties.html",[186,1.268,259,1.792]],["body/properties.html",[8,1.522,27,1.157,29,0.107,72,0.09,73,0.09,89,1.522,92,1.157,156,2.009,196,2.009,197,2.009,259,2.009,260,2.75,261,2.75,262,2.75,263,2.75,264,2.75,265,2.75,266,2.75,267,2.75,268,2.75,269,2.75,270,2.75,271,2.75,272,2.75,273,2.75,274,2.75,275,2.75,276,2.75]],["title/miscellaneous/typealiases.html",[277,1.268,278,2.452]],["body/miscellaneous/typealiases.html",[16,1.197,29,0.091,34,1.138,37,1.197,62,1.574,72,0.091,73,0.091,92,1.197,123,2.078,124,2.472,126,2.472,127,2.078,128,2.472,129,2.472,131,2.078,277,2.078,279,2.844,280,2.844,281,2.844,282,2.844,283,2.844]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":160,"title":{},"body":{"coverage.html":{}}}],["0.4.16",{"_index":261,"title":{},"body":{"properties.html":{}}}],["0.5.15",{"_index":189,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":161,"title":{},"body":{"coverage.html":{}}}],["1/1",{"_index":118,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":181,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":117,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":258,"title":{},"body":{"overview.html":{}}}],["3/4",{"_index":183,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":182,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":180,"title":{},"body":{"coverage.html":{}}}],["accordingly",{"_index":93,"title":{},"body":{"classes/Switch.html":{}}}],["add",{"_index":9,"title":{},"body":{"classes/IsThen.html":{},"index.html":{}}}],["alias",{"_index":125,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":279,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["author",{"_index":274,"title":{},"body":{"properties.html":{}}}],["brightline",{"_index":276,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":232,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":268,"title":{},"body":{"properties.html":{}}}],["case",{"_index":76,"title":{},"body":{"classes/Switch.html":{}}}],["check",{"_index":89,"title":{},"body":{"classes/Switch.html":{},"index.html":{},"properties.html":{}}}],["class",{"_index":0,"title":{"classes/IsThen.html":{},"classes/Switch.html":{}},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"overview.html":{}}}],["compatibility",{"_index":235,"title":{},"body":{"index.html":{}}}],["conditional",{"_index":13,"title":{},"body":{"classes/IsThen.html":{}}}],["consider",{"_index":215,"title":{},"body":{"index.html":{}}}],["const",{"_index":59,"title":{},"body":{"classes/IsThen.html":{}}}],["constructor",{"_index":80,"title":{},"body":{"classes/Switch.html":{}}}],["constructor(private",{"_index":102,"title":{},"body":{"classes/Switch.html":{}}}],["constructor(value",{"_index":82,"title":{},"body":{"classes/Switch.html":{}}}],["contact",{"_index":252,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":219,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":111,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["date",{"_index":224,"title":{},"body":{"index.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["defined.js",{"_index":57,"title":{},"body":{"classes/IsThen.html":{}}}],["defined.ts",{"_index":116,"title":{},"body":{"coverage.html":{}}}],["defined/is",{"_index":56,"title":{},"body":{"classes/IsThen.html":{}}}],["dependencies",{"_index":187,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"properties.html":{}}}],["developer",{"_index":253,"title":{},"body":{"index.html":{}}}],["development",{"_index":218,"title":{},"body":{"index.html":{}}}],["docs",{"_index":10,"title":{},"body":{"classes/IsThen.html":{}}}],["documentation",{"_index":112,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["effort",{"_index":210,"title":{},"body":{"index.html":{}}}],["elsehandler",{"_index":31,"title":{},"body":{"classes/IsThen.html":{}}}],["empty",{"_index":156,"title":{},"body":{"coverage.html":{},"properties.html":{}}}],["empty.ts",{"_index":121,"title":{},"body":{"coverage.html":{}}}],["ensure",{"_index":221,"title":{},"body":{"index.html":{}}}],["entries",{"_index":124,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entriesreturntype",{"_index":126,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["enumeratorparam",{"_index":129,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["equal",{"_index":90,"title":{},"body":{"classes/Switch.html":{}}}],["even",{"_index":240,"title":{},"body":{"index.html":{}}}],["example",{"_index":199,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":283,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["fail",{"_index":87,"title":{},"body":{"classes/Switch.html":{}}}],["fail?.(value",{"_index":110,"title":{},"body":{"classes/Switch.html":{}}}],["false",{"_index":71,"title":{},"body":{"classes/IsThen.html":{}}}],["features",{"_index":238,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{}}}],["find",{"_index":211,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":233,"title":{},"body":{"index.html":{}}}],["flow",{"_index":77,"title":{},"body":{"classes/Switch.html":{}}}],["flows",{"_index":15,"title":{},"body":{"classes/IsThen.html":{}}}],["function",{"_index":37,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":92,"title":{},"body":{"classes/Switch.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["funding",{"_index":229,"title":{},"body":{"index.html":{}}}],["general",{"_index":246,"title":{},"body":{"index.html":{}}}],["getting",{"_index":192,"title":{"index.html":{}},"body":{}}],["go",{"_index":230,"title":{},"body":{"index.html":{}}}],["handler",{"_index":26,"title":{},"body":{"classes/IsThen.html":{}}}],["handler(value",{"_index":69,"title":{},"body":{"classes/IsThen.html":{}}}],["help",{"_index":220,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":266,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":273,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":269,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/is",{"_index":267,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":113,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":53,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["improvements",{"_index":243,"title":{},"body":{"index.html":{}}}],["incaseof",{"_index":78,"title":{},"body":{"classes/Switch.html":{}}}],["incaseof(value",{"_index":84,"title":{},"body":{"classes/Switch.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["install",{"_index":198,"title":{},"body":{"index.html":{}}}],["instance",{"_index":60,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.isfalse(value",{"_index":66,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.isnotfalse(value",{"_index":67,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.isnottrue(value",{"_index":65,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.istrue(value",{"_index":64,"title":{},"body":{"classes/IsThen.html":{}}}],["instance.ok(value",{"_index":63,"title":{},"body":{"classes/IsThen.html":{}}}],["instant",{"_index":228,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":164,"title":{},"body":{"coverage.html":{}}}],["isarraybigint",{"_index":165,"title":{},"body":{"coverage.html":{}}}],["isarraybigintorthrow",{"_index":140,"title":{},"body":{"coverage.html":{}}}],["isarrayboolean",{"_index":166,"title":{},"body":{"coverage.html":{}}}],["isarraybooleanorthrow",{"_index":141,"title":{},"body":{"coverage.html":{}}}],["isarrayfunction",{"_index":167,"title":{},"body":{"coverage.html":{}}}],["isarrayfunctionorthrow",{"_index":142,"title":{},"body":{"coverage.html":{}}}],["isarraynumber",{"_index":168,"title":{},"body":{"coverage.html":{}}}],["isarraynumberorthrow",{"_index":143,"title":{},"body":{"coverage.html":{}}}],["isarrayobject",{"_index":169,"title":{},"body":{"coverage.html":{}}}],["isarrayobjectorthrow",{"_index":144,"title":{},"body":{"coverage.html":{}}}],["isarrayorthrow",{"_index":145,"title":{},"body":{"coverage.html":{}}}],["isarraystring",{"_index":170,"title":{},"body":{"coverage.html":{}}}],["isarraystringorthrow",{"_index":146,"title":{},"body":{"coverage.html":{}}}],["isarraysymbol",{"_index":171,"title":{},"body":{"coverage.html":{}}}],["isarraysymbolorthrow",{"_index":147,"title":{},"body":{"coverage.html":{}}}],["isbigint",{"_index":172,"title":{},"body":{"coverage.html":{}}}],["isbigintorthrow",{"_index":148,"title":{},"body":{"coverage.html":{}}}],["isboolean",{"_index":173,"title":{},"body":{"coverage.html":{}}}],["isbooleanorthrow",{"_index":149,"title":{},"body":{"coverage.html":{}}}],["isdefined",{"_index":55,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["isdefined(value",{"_index":68,"title":{},"body":{"classes/IsThen.html":{}}}],["isdefinedorthrow",{"_index":99,"title":{},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["isdefinedorthrow(switchvalue",{"_index":106,"title":{},"body":{"classes/Switch.html":{}}}],["isfalse",{"_index":19,"title":{},"body":{"classes/IsThen.html":{}}}],["isfalse(value",{"_index":24,"title":{},"body":{"classes/IsThen.html":{}}}],["isfunction",{"_index":174,"title":{},"body":{"coverage.html":{}}}],["isfunctionorthrow",{"_index":150,"title":{},"body":{"coverage.html":{}}}],["isnotdefined",{"_index":119,"title":{},"body":{"coverage.html":{}}}],["isnotfalse",{"_index":20,"title":{},"body":{"classes/IsThen.html":{}}}],["isnotfalse(value",{"_index":41,"title":{},"body":{"classes/IsThen.html":{}}}],["isnottrue",{"_index":21,"title":{},"body":{"classes/IsThen.html":{}}}],["isnottrue(value",{"_index":44,"title":{},"body":{"classes/IsThen.html":{}}}],["isnumber",{"_index":175,"title":{},"body":{"coverage.html":{}}}],["isnumberorthrow",{"_index":151,"title":{},"body":{"coverage.html":{}}}],["isobject",{"_index":176,"title":{},"body":{"coverage.html":{}}}],["isobjectorthrow",{"_index":152,"title":{},"body":{"coverage.html":{}}}],["isprimitive",{"_index":177,"title":{},"body":{"coverage.html":{}}}],["isstring",{"_index":178,"title":{},"body":{"coverage.html":{}}}],["isstringorthrow",{"_index":153,"title":{},"body":{"coverage.html":{}}}],["issymbol",{"_index":179,"title":{},"body":{"coverage.html":{}}}],["issymbolorthrow",{"_index":154,"title":{},"body":{"coverage.html":{}}}],["isthen",{"_index":1,"title":{"classes/IsThen.html":{}},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["istrue",{"_index":22,"title":{},"body":{"classes/IsThen.html":{}}}],["istrue(value",{"_index":47,"title":{},"body":{"classes/IsThen.html":{}}}],["it's",{"_index":204,"title":{},"body":{"index.html":{}}}],["keep",{"_index":248,"title":{},"body":{"index.html":{}}}],["keys",{"_index":131,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["keywords",{"_index":264,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":236,"title":{},"body":{"index.html":{}}}],["library",{"_index":212,"title":{},"body":{"index.html":{}}}],["license",{"_index":270,"title":{},"body":{"properties.html":{}}}],["maintained",{"_index":227,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":207,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":247,"title":{},"body":{"index.html":{}}}],["make",{"_index":239,"title":{},"body":{"index.html":{}}}],["matching",{"_index":73,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["miscellaneous",{"_index":277,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":271,"title":{},"body":{"properties.html":{}}}],["modules",{"_index":256,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":241,"title":{},"body":{"index.html":{}}}],["name",{"_index":36,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{}}}],["new",{"_index":61,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"index.html":{}}}],["notempty",{"_index":122,"title":{},"body":{"coverage.html":{}}}],["notemptyorthrow",{"_index":157,"title":{},"body":{"coverage.html":{}}}],["null",{"_index":263,"title":{},"body":{"properties.html":{}}}],["ok",{"_index":23,"title":{},"body":{"classes/IsThen.html":{}}}],["ok(value",{"_index":50,"title":{},"body":{"classes/IsThen.html":{}}}],["omit",{"_index":133,"title":{},"body":{"coverage.html":{}}}],["ongoing",{"_index":217,"title":{},"body":{"index.html":{}}}],["open",{"_index":205,"title":{},"body":{"index.html":{}}}],["optional",{"_index":25,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["out",{"_index":245,"title":{},"body":{"index.html":{}}}],["overview",{"_index":257,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":85,"title":{},"body":{"classes/Switch.html":{}}}],["package",{"_index":186,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":104,"title":{},"body":{"classes/Switch.html":{}}}],["param.ts",{"_index":128,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["parameter",{"_index":282,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":35,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["pass",{"_index":86,"title":{},"body":{"classes/Switch.html":{}}}],["pass(value",{"_index":109,"title":{},"body":{"classes/Switch.html":{}}}],["pick",{"_index":135,"title":{},"body":{"coverage.html":{}}}],["please",{"_index":214,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":200,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":242,"title":{},"body":{"index.html":{}}}],["private",{"_index":81,"title":{},"body":{"classes/Switch.html":{}}}],["project",{"_index":206,"title":{},"body":{"index.html":{}}}],["properties",{"_index":259,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["public",{"_index":105,"title":{},"body":{"classes/Switch.html":{}}}],["puq",{"_index":265,"title":{},"body":{"properties.html":{}}}],["puq/error",{"_index":190,"title":{},"body":{"dependencies.html":{}}}],["puq/is",{"_index":194,"title":{},"body":{"index.html":{}}}],["puq/isfunding",{"_index":201,"title":{},"body":{"index.html":{}}}],["puq/type",{"_index":54,"title":{},"body":{"classes/IsThen.html":{}}}],["readonly",{"_index":103,"title":{},"body":{"classes/Switch.html":{}}}],["repository",{"_index":272,"title":{},"body":{"properties.html":{}}}],["required/is",{"_index":100,"title":{},"body":{"classes/Switch.html":{}}}],["results",{"_index":72,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":62,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":39,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["robert",{"_index":275,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":254,"title":{},"body":{"index.html":{}}}],["run",{"_index":91,"title":{},"body":{"classes/Switch.html":{}}}],["running",{"_index":249,"title":{},"body":{"index.html":{}}}],["secure",{"_index":225,"title":{},"body":{"index.html":{}}}],["securely",{"_index":251,"title":{},"body":{"index.html":{}}}],["set",{"_index":196,"title":{},"body":{"index.html":{},"properties.html":{}}}],["simplify",{"_index":12,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["smoothly",{"_index":250,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{}}}],["src/.../entries.ts",{"_index":280,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../enumerator",{"_index":281,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/defined/is",{"_index":115,"title":{},"body":{"coverage.html":{}}}],["src/lib/defined/not",{"_index":120,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/entries.ts",{"_index":123,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/object/enumerator",{"_index":127,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/object/keys.ts",{"_index":130,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/omit.ts",{"_index":132,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/pick.ts",{"_index":134,"title":{},"body":{"coverage.html":{}}}],["src/lib/object/values.ts",{"_index":136,"title":{},"body":{"coverage.html":{}}}],["src/lib/required/is",{"_index":138,"title":{},"body":{"coverage.html":{}}}],["src/lib/required/not",{"_index":155,"title":{},"body":{"coverage.html":{}}}],["src/lib/string/trim.ts",{"_index":158,"title":{},"body":{"coverage.html":{}}}],["src/lib/type/is",{"_index":162,"title":{},"body":{"coverage.html":{}}}],["src/lib/workflow/is",{"_index":6,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["src/lib/workflow/switch.ts",{"_index":75,"title":{},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["src/lib/workflow/switch.ts:14",{"_index":95,"title":{},"body":{"classes/Switch.html":{}}}],["src/lib/workflow/switch.ts:26",{"_index":88,"title":{},"body":{"classes/Switch.html":{}}}],["src/lib/workflow/switch.ts:6",{"_index":83,"title":{},"body":{"classes/Switch.html":{}}}],["start",{"_index":96,"title":{},"body":{"classes/Switch.html":{}}}],["started",{"_index":193,"title":{"index.html":{}},"body":{}}],["statement",{"_index":98,"title":{},"body":{"classes/Switch.html":{}}}],["statements",{"_index":114,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["stays",{"_index":222,"title":{},"body":{"index.html":{}}}],["summary",{"_index":195,"title":{},"body":{"index.html":{}}}],["support",{"_index":255,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":216,"title":{},"body":{"index.html":{}}}],["swc/helpers",{"_index":188,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":74,"title":{"classes/Switch.html":{}},"body":{"classes/Switch.html":{},"coverage.html":{}}}],["switch(switchvalue",{"_index":107,"title":{},"body":{"classes/Switch.html":{}}}],["switchvalue",{"_index":79,"title":{},"body":{"classes/Switch.html":{}}}],["switchvalue(switchvalue",{"_index":94,"title":{},"body":{"classes/Switch.html":{}}}],["swtich",{"_index":97,"title":{},"body":{"classes/Switch.html":{}}}],["t",{"_index":28,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["table",{"_index":185,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":184,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":208,"title":{},"body":{"index.html":{}}}],["thank",{"_index":202,"title":{},"body":{"index.html":{}}}],["then.ts",{"_index":7,"title":{},"body":{"classes/IsThen.html":{},"coverage.html":{}}}],["then.ts:106",{"_index":43,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:18",{"_index":48,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:27",{"_index":45,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:36",{"_index":33,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:45",{"_index":42,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:54",{"_index":52,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:67",{"_index":49,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:80",{"_index":46,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:9",{"_index":51,"title":{},"body":{"classes/IsThen.html":{}}}],["then.ts:93",{"_index":40,"title":{},"body":{"classes/IsThen.html":{}}}],["this.value",{"_index":108,"title":{},"body":{"classes/Switch.html":{}}}],["throw.js",{"_index":101,"title":{},"body":{"classes/Switch.html":{}}}],["throw.ts",{"_index":139,"title":{},"body":{"coverage.html":{}}}],["time",{"_index":209,"title":{},"body":{"index.html":{}}}],["toward",{"_index":231,"title":{},"body":{"index.html":{}}}],["trim",{"_index":159,"title":{},"body":{"coverage.html":{}}}],["true",{"_index":70,"title":{},"body":{"classes/IsThen.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts",{"_index":163,"title":{},"body":{"coverage.html":{}}}],["typealiases",{"_index":278,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":262,"title":{},"body":{"properties.html":{}}}],["up",{"_index":223,"title":{},"body":{"index.html":{}}}],["updates",{"_index":234,"title":{},"body":{"index.html":{}}}],["useful",{"_index":213,"title":{},"body":{"index.html":{}}}],["users",{"_index":244,"title":{},"body":{"index.html":{}}}],["using",{"_index":203,"title":{},"body":{"index.html":{}}}],["utility",{"_index":197,"title":{},"body":{"index.html":{},"properties.html":{}}}],["value",{"_index":27,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{},"index.html":{},"properties.html":{}}}],["values",{"_index":137,"title":{},"body":{"coverage.html":{}}}],["version",{"_index":260,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":237,"title":{},"body":{"index.html":{}}}],["void",{"_index":30,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["well",{"_index":226,"title":{},"body":{"index.html":{}}}],["work",{"_index":14,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["workflow",{"_index":11,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}],["workspace",{"_index":191,"title":{},"body":{"dependencies.html":{}}}],["yes",{"_index":38,"title":{},"body":{"classes/IsThen.html":{},"classes/Switch.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/IsThen.html":{"url":"classes/IsThen.html","title":"class - IsThen","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsThen\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/workflow/is-then.ts\n        \n\n\n            \n                Description\n            \n            \n                \n add docs\nWorkflow class to simplify conditional work flows.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFalse\n                            \n                            \n                                isFalse\n                            \n                            \n                                    Static\n                                isNotFalse\n                            \n                            \n                                isNotFalse\n                            \n                            \n                                    Static\n                                isNotTrue\n                            \n                            \n                                isNotTrue\n                            \n                            \n                                    Static\n                                isTrue\n                            \n                            \n                                isTrue\n                            \n                            \n                                    Static\n                                ok\n                            \n                            \n                                ok\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isFalse\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFalse(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:36\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFalse\n                        \n                    \n                \n            \n            \n                \nisFalse(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNotFalse\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNotFalse(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:45\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNotFalse\n                        \n                    \n                \n            \n            \n                \nisNotFalse(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:106\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNotTrue\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNotTrue(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:27\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNotTrue\n                        \n                    \n                \n            \n            \n                \nisNotTrue(value: Optional, handler: (value: Optional) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:80\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isTrue\n                        \n                    \n                \n            \n            \n                \n                        \n                    isTrue(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTrue\n                        \n                    \n                \n            \n            \n                \nisTrue(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:67\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ok\n                        \n                    \n                \n            \n            \n                \n                        \n                    ok(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:9\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ok\n                        \n                    \n                \n            \n            \n                \nok(value: Optional, handler: (value: T) => void, elseHandler?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/is-then.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                elseHandler\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IsThen\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { Optional } from '@puq/type';\nimport { isDefined } from '../defined/is-defined.js';\n\n/**\n * - [ ] add docs\n * Workflow class to simplify conditional work flows.\n */\nexport class IsThen {\n  static ok(\n    value: Optional,\n    handler: (value: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.ok(value, handler, elseHandler);\n  }\n\n  static isTrue(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isTrue(value, handler, elseHandler);\n  }\n\n  static isNotTrue(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isNotTrue(value, handler, elseHandler);\n  }\n\n  static isFalse(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isFalse(value, handler, elseHandler);\n  }\n\n  static isNotFalse(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    const instance = new IsThen();\n    return instance.isNotFalse(value, handler, elseHandler);\n  }\n\n  ok(\n    value: Optional,\n    handler: (value: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (isDefined(value)) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  isTrue(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value === true) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  isNotTrue(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value !== true) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  isFalse(\n    value: Optional,\n    handler: (value?: T) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value === false) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n\n  isNotFalse(\n    value: Optional,\n    handler: (value?: Optional) => void,\n    elseHandler?: () => void,\n  ): IsThen {\n    if (value !== false) {\n      handler(value);\n    } else {\n      elseHandler?.();\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Switch.html":{"url":"classes/Switch.html","title":"class - Switch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Switch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/workflow/switch.ts\n        \n\n\n            \n                Description\n            \n            \n                Workflow class to simplify switch-case work-flow\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                inCaseOf\n                            \n                            \n                                    Static\n                                switchValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor(value: T)\n                    \n                \n                        \n                            \n                                Defined in src/lib/workflow/switch.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        inCaseOf\n                        \n                    \n                \n            \n            \n                \ninCaseOf(value: P, pass: (value: P) => void, fail?: (value?: P) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/switch.ts:26\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                            \n                        \n                    \n\n            \n                \n                        Check the value is equal to the source value or not and run the pass or fail functions accordingly\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        P\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ncase value\n\n\n                                            \n                                        \n                                        \n                                                pass\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nrun when the case value is equal to the source value\n\n\n                                            \n                                        \n                                        \n                                                fail\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nrun when the case value is not equal to the source value\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Switch>\n\n                        \n                            \n                                \nthis\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        switchValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    switchValue(switchValue: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/workflow/switch.ts:14\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Start the swtich statement\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                switchValue\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nvalue to check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Switch\n\n                        \n                            \n                                this\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { isDefinedOrThrow } from '../required/is-defined-or-throw.js';\n\n/**\n * Workflow class to simplify switch-case work-flow\n */\nexport class Switch {\n  private constructor(private readonly value: T) {}\n\n  /**\n   * Start the swtich statement\n   * @param switchValue - value to check\n   * @returns this\n   */\n  public static switchValue(switchValue: T): Switch {\n    isDefinedOrThrow(switchValue);\n    return new Switch(switchValue);\n  }\n\n  /**\n   * Check the `value` is equal to the source value or not and run the `pass` or `fail` functions accordingly\n   * @param value - case value\n   * @param pass - run when the case value is equal to the source value\n   * @param fail - run when the case value is not equal to the source value\n   * @returns - this\n   */\n  inCaseOf(\n    value: P,\n    pass: (value?: P) => void,\n    fail?: (value?: P) => void,\n  ): Switch> {\n    if (value === this.value) {\n      pass(value);\n    } else {\n      fail?.(value);\n    }\n    return this as Switch>;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/lib/defined/is-defined.ts\n            \n            function\n            isDefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/defined/is-not-defined.ts\n            \n            function\n            isNotDefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/defined/not-empty.ts\n            \n            function\n            notEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/entries.ts\n            \n            function\n            entries\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/entries.ts\n            \n            type alias\n            EntriesReturnType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/enumerator-param.ts\n            \n            type alias\n            EnumeratorParam\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/keys.ts\n            \n            function\n            keys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/omit.ts\n            \n            function\n            omit\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/pick.ts\n            \n            function\n            pick\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/object/values.ts\n            \n            function\n            values\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-defined-or-throw.ts\n            \n            function\n            isDefinedOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayBigintOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayBooleanOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayFunctionOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayNumberOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayObjectOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArrayStringOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isArraySymbolOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isBigintOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isBooleanOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isFunctionOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isNumberOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isObjectOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isStringOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/is-type-or-throw.ts\n            \n            function\n            isSymbolOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/required/not-empty-or-throw.ts\n            \n            function\n            notEmptyOrThrow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/string/trim.ts\n            \n            function\n            trim\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayBigint\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArrayString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isArraySymbol\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isBigint\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isPrimitive\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/type/is-type.ts\n            \n            function\n            isSymbol\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/workflow/is-then.ts\n            \n            class\n            IsThen\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/lib/workflow/switch.ts\n            \n            class\n            Switch\n            \n                75 %\n                (3/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n        \n            @puq/error : workspace:^\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/is\nSummary\nA set of utility functions to check type of value.\nInstall\nExample :  pnpm add @puq/isFunding\nThank you for using @puq/is It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.4.16\n        \n            Description : A set of utility functions to check the value is undefined, null, or empty\n        \n            Keywords : puq, is\n        \n            Homepage : https://rbrightline.github.io/puq/is\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EntriesReturnType   (src/.../entries.ts)\n                        \n                        \n                            EnumeratorParam   (src/.../enumerator-param.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/object/entries.ts\n    \n    \n        \n            \n                \n                    \n                    EntriesReturnType\n                \n            \n            \n                \n                    The return type of the entries function\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/object/enumerator-param.ts\n    \n    \n        \n            \n                \n                    \n                    EnumeratorParam\n                \n            \n            \n                \n                    The parameter type of the entries and keys functions\n\n                \n            \n            \n                \n                        Exclude\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
