var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/coverage.html",[0,1.706]],["body/coverage.html",[0,1.176,1,1.176,2,1.693,3,1.176,4,1.693,5,1.693,6,1.176,7,1.176,8,1.176,9,2.347,10,1.176,11,3.377,12,0.132,13,3.377,14,2.14,15,2.14,16,2.14,17,1.612,18,1.176,19,1.612,20,1.612,21,1.176,22,1.612,23,1.176,24,1.612,25,1.176,26,2.14,27,1.176,28,1.176,29,1.176,30,1.176,31,1.176,32,1.693,33,1.693,34,0.089,35,0.089]],["title/dependencies.html",[36,1.089,37,1.086]],["body/dependencies.html",[12,0.129,34,0.118,35,0.118,37,1.298,38,2.629,39,2.132,40,2.629]],["title/miscellaneous/functions.html",[41,1.089,42,1.528]],["body/miscellaneous/functions.html",[3,2.192,6,0.494,7,2.054,8,0.828,9,1.251,10,0.828,12,0.127,14,1.251,15,2.054,16,1.68,17,1.251,18,0.828,19,1.251,20,1.251,21,0.828,22,1.251,23,0.828,24,1.251,25,0.828,26,1.251,27,0.828,28,0.828,29,0.828,30,0.828,34,0.046,35,0.046,41,0.494,42,0.494,43,0.494,44,0.711,45,2.17,46,2.17,47,0.711,48,1.191,49,1.538,50,1.97,51,2.005,52,1.538,53,0.711,54,2.786,55,2.097,56,1.936,57,2.236,58,1.191,59,0.711,60,1.191,61,2.786,62,2.358,63,1.191,64,2.597,65,1.191,66,2.988,67,1.191,68,1.538,69,1.191,70,1.191,71,0.711,72,0.711,73,2.731,74,1.191,75,0.711,76,0.711,77,0.351,78,2.005,79,1.538,80,0.711,81,1.191,82,1.191,83,1.191,84,1.191,85,1.191,86,2.597,87,0.711,88,0.711,89,2.668,90,0.711,91,1.8,92,1.191,93,0.711,94,1.8,95,2.005,96,2.17,97,1.191,98,0.711,99,0.494,100,0.494,101,0.711,102,0.711,103,2.005,104,0.711,105,0.711,106,0.711,107,0.711,108,0.711,109,0.711,110,0.711,111,1.191,112,0.711,113,0.711,114,0.711,115,0.711,116,0.711,117,0.711,118,1.191,119,0.711,120,0.711]],["title/index.html",[43,1.089,121,1.567,122,1.567]],["body/index.html",[1,1.185,12,0.11,31,1.185,34,0.09,35,0.09,37,0.842,50,1.984,55,1.984,57,1.185,62,1.845,99,1.185,100,1.185,123,1.62,124,1.705,125,1.705,126,2.077,127,1.705,128,1.705,129,1.705,130,1.705,131,2.331,132,1.705,133,1.705,134,1.705,135,1.705,136,1.705,137,1.705,138,1.705,139,1.705,140,1.705,141,1.705,142,1.705,143,1.705,144,1.185,145,1.185,146,1.185,147,1.185,148,1.185,149,1.62,150,1.185,151,1.185,152,1.185,153,1.185,154,1.185,155,1.185,156,1.185,157,1.185,158,1.185,159,1.185,160,1.185,161,1.185,162,1.62,163,1.62,164,1.185,165,1.185,166,1.185,167,1.185,168,1.185,169,1.185,170,1.705,171,2.331,172,1.705,173,1.705,174,1.705,175,1.705,176,1.705,177,1.705,178,1.705,179,1.705,180,1.705,181,1.705,182,1.705,183,1.705,184,1.705,185,1.705,186,1.705,187,1.705,188,1.705,189,1.705,190,1.705,191,1.705,192,1.705,193,1.705,194,1.705,195,2.331,196,1.705,197,1.705]],["title/modules.html",[198,1.706]],["body/modules.html",[12,0.121,34,0.121,35,0.121,198,1.89]],["title/overview.html",[199,1.706]],["body/overview.html",[12,0.121,34,0.121,35,0.121,199,1.89]],["title/properties.html",[36,1.089,77,1.086]],["body/properties.html",[12,0.132,34,0.102,35,0.102,39,1.444,56,1.444,77,1.026,123,1.444,126,1.444,144,1.444,145,1.444,146,1.444,147,1.444,148,1.444,149,1.846,150,1.444,151,1.444,152,1.444,153,1.444,154,1.444,155,1.444,156,1.444,157,1.444,158,1.444,159,1.444,160,1.444,161,1.444,162,1.444,163,1.444,164,1.444,165,1.444,166,1.444,167,1.444,168,1.444,169,1.444,200,2.077,201,2.077,202,2.077,203,2.077,204,2.077,205,2.077,206,2.077,207,2.077,208,2.077,209,2.077,210,2.077,211,2.077,212,2.077,213,2.077,214,2.077]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0.1.0",{"_index":39,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["1/1",{"_index":13,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":11,"title":{},"body":{"coverage.html":{}}}],["add",{"_index":142,"title":{},"body":{"index.html":{}}}],["applicable",{"_index":69,"title":{},"body":{"miscellaneous/functions.html":{}}}],["author",{"_index":212,"title":{},"body":{"properties.html":{}}}],["based",{"_index":51,"title":{},"body":{"miscellaneous/functions.html":{}}}],["brightline",{"_index":214,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":174,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":206,"title":{},"body":{"properties.html":{}}}],["code",{"_index":74,"title":{},"body":{"miscellaneous/functions.html":{}}}],["column",{"_index":100,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["compatibility",{"_index":177,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configuration",{"_index":58,"title":{},"body":{"miscellaneous/functions.html":{}}}],["consider",{"_index":157,"title":{},"body":{"index.html":{},"properties.html":{}}}],["contact",{"_index":194,"title":{},"body":{"index.html":{}}}],["containing",{"_index":60,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contributions",{"_index":161,"title":{},"body":{"index.html":{},"properties.html":{}}}],["converts",{"_index":88,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coverage",{"_index":0,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["date",{"_index":166,"title":{},"body":{"index.html":{},"properties.html":{}}}],["decorator",{"_index":15,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decorator.ts",{"_index":20,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decoratorname",{"_index":97,"title":{},"body":{"miscellaneous/functions.html":{}}}],["definition",{"_index":103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["definition.ts",{"_index":22,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["definitions",{"_index":131,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":37,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":56,"title":{},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["determines",{"_index":49,"title":{},"body":{"miscellaneous/functions.html":{}}}],["developer",{"_index":195,"title":{},"body":{"index.html":{}}}],["development",{"_index":160,"title":{},"body":{"index.html":{},"properties.html":{}}}],["documentation",{"_index":1,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":135,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":96,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e.g.,'property",{"_index":98,"title":{},"body":{"miscellaneous/functions.html":{}}}],["eager",{"_index":115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["effort",{"_index":153,"title":{},"body":{"index.html":{},"properties.html":{}}}],["ensure",{"_index":163,"title":{},"body":{"index.html":{},"properties.html":{}}}],["entity",{"_index":133,"title":{},"body":{"index.html":{}}}],["even",{"_index":182,"title":{},"body":{"index.html":{}}}],["example",{"_index":140,"title":{},"body":{"index.html":{}}}],["extracts",{"_index":65,"title":{},"body":{"miscellaneous/functions.html":{}}}],["features",{"_index":180,"title":{},"body":{"index.html":{}}}],["file",{"_index":2,"title":{},"body":{"coverage.html":{}}}],["find",{"_index":154,"title":{},"body":{"index.html":{},"properties.html":{}}}],["fixes",{"_index":175,"title":{},"body":{"index.html":{}}}],["formatted",{"_index":78,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":9,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":42,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funding",{"_index":171,"title":{},"body":{"index.html":{}}}],["general",{"_index":188,"title":{},"body":{"index.html":{}}}],["generates",{"_index":94,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getoptionalmarker",{"_index":10,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getoptionalmarker(options",{"_index":47,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gettargetstring",{"_index":17,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gettargetstring(options",{"_index":63,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":121,"title":{"index.html":{}},"body":{}}],["given",{"_index":107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":172,"title":{},"body":{"index.html":{}}}],["handling",{"_index":76,"title":{},"body":{"miscellaneous/functions.html":{}}}],["help",{"_index":162,"title":{},"body":{"index.html":{},"properties.html":{}}}],["homepage",{"_index":204,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":211,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":207,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/printer",{"_index":205,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":4,"title":{},"body":{"coverage.html":{}}}],["improvements",{"_index":185,"title":{},"body":{"index.html":{}}}],["including",{"_index":91,"title":{},"body":{"miscellaneous/functions.html":{}}}],["index",{"_index":43,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{}}}],["inspect",{"_index":67,"title":{},"body":{"miscellaneous/functions.html":{}}}],["install",{"_index":139,"title":{},"body":{"index.html":{}}}],["instant",{"_index":170,"title":{},"body":{"index.html":{}}}],["it's",{"_index":146,"title":{},"body":{"index.html":{},"properties.html":{}}}],["json",{"_index":73,"title":{},"body":{"miscellaneous/functions.html":{}}}],["keep",{"_index":190,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":201,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":178,"title":{},"body":{"index.html":{}}}],["library",{"_index":126,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":208,"title":{},"body":{"properties.html":{}}}],["maintained",{"_index":169,"title":{},"body":{"index.html":{},"properties.html":{}}}],["maintaining",{"_index":150,"title":{},"body":{"index.html":{},"properties.html":{}}}],["maintenance",{"_index":189,"title":{},"body":{"index.html":{}}}],["make",{"_index":181,"title":{},"body":{"index.html":{}}}],["many",{"_index":113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["marker.ts",{"_index":8,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":35,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["miscellaneous",{"_index":41,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":209,"title":{},"body":{"properties.html":{}}}],["modified",{"_index":85,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modules",{"_index":198,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":183,"title":{},"body":{"index.html":{}}}],["name",{"_index":55,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["name:string",{"_index":134,"title":{},"body":{"index.html":{}}}],["new",{"_index":31,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["notation",{"_index":79,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":59,"title":{},"body":{"miscellaneous/functions.html":{}}}],["onetomany",{"_index":111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ongoing",{"_index":159,"title":{},"body":{"index.html":{},"properties.html":{}}}],["open",{"_index":147,"title":{},"body":{"index.html":{},"properties.html":{}}}],["optional",{"_index":7,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["optionality",{"_index":104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["options",{"_index":57,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["options.ts",{"_index":16,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["original",{"_index":83,"title":{},"body":{"miscellaneous/functions.html":{}}}],["otherwise",{"_index":70,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":187,"title":{},"body":{"index.html":{}}}],["overview",{"_index":199,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":36,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":54,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plain",{"_index":132,"title":{},"body":{"index.html":{}}}],["please",{"_index":156,"title":{},"body":{"index.html":{},"properties.html":{}}}],["pnpm",{"_index":141,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":184,"title":{},"body":{"index.html":{}}}],["printer",{"_index":203,"title":{},"body":{"properties.html":{}}}],["product",{"_index":118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["project",{"_index":149,"title":{},"body":{"index.html":{},"properties.html":{}}}],["projects",{"_index":138,"title":{},"body":{"index.html":{}}}],["properties",{"_index":77,"title":{"properties.html":{}},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["property",{"_index":50,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["propertydecorator",{"_index":21,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertydecorator(decoratorname",{"_index":93,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertydecoratoroptions",{"_index":18,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertydecoratoroptions(options",{"_index":71,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertydefinition",{"_index":23,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertydefinition(options",{"_index":102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertyoptions",{"_index":64,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertytype",{"_index":25,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertytype(options",{"_index":105,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provided",{"_index":120,"title":{},"body":{"miscellaneous/functions.html":{}}}],["puq",{"_index":202,"title":{},"body":{"properties.html":{}}}],["puq/is",{"_index":38,"title":{},"body":{"dependencies.html":{}}}],["puq/printer",{"_index":123,"title":{},"body":{"index.html":{},"properties.html":{}}}],["puq/printerfunding",{"_index":143,"title":{},"body":{"index.html":{}}}],["puq/type",{"_index":40,"title":{},"body":{"dependencies.html":{}}}],["relation",{"_index":89,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationdecorator",{"_index":28,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["relationdecorator(decoratorname",{"_index":110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationdecoratoroptions",{"_index":27,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["relationdecoratoroptions(options",{"_index":87,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationdefinition",{"_index":29,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["relationdefinition(options",{"_index":117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationoptions",{"_index":86,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationtype",{"_index":30,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["relationtype(options",{"_index":119,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replace",{"_index":84,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replaces",{"_index":82,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replacetargetwithfunction",{"_index":19,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["replacetargetwithfunction(json",{"_index":81,"title":{},"body":{"miscellaneous/functions.html":{}}}],["repository",{"_index":210,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":92,"title":{},"body":{"miscellaneous/functions.html":{}}}],["required",{"_index":52,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":34,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["returns",{"_index":61,"title":{},"body":{"miscellaneous/functions.html":{}}}],["robert",{"_index":213,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":196,"title":{},"body":{"index.html":{}}}],["running",{"_index":191,"title":{},"body":{"index.html":{}}}],["secure",{"_index":167,"title":{},"body":{"index.html":{},"properties.html":{}}}],["securely",{"_index":193,"title":{},"body":{"index.html":{}}}],["serializes",{"_index":72,"title":{},"body":{"miscellaneous/functions.html":{}}}],["smoothly",{"_index":192,"title":{},"body":{"index.html":{}}}],["someobject",{"_index":109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["source",{"_index":148,"title":{},"body":{"index.html":{},"properties.html":{}}}],["special",{"_index":75,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":44,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../property",{"_index":45,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../relation",{"_index":46,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/get",{"_index":6,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/property",{"_index":14,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/relation",{"_index":26,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":122,"title":{"index.html":{}},"body":{}}],["statements",{"_index":5,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":53,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stays",{"_index":164,"title":{},"body":{"index.html":{},"properties.html":{}}}],["string",{"_index":62,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["such",{"_index":128,"title":{},"body":{"index.html":{}}}],["summary",{"_index":124,"title":{},"body":{"index.html":{}}}],["support",{"_index":197,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":158,"title":{},"body":{"index.html":{},"properties.html":{}}}],["t",{"_index":48,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":33,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":32,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":151,"title":{},"body":{"index.html":{},"properties.html":{}}}],["target",{"_index":66,"title":{},"body":{"miscellaneous/functions.html":{}}}],["target:()=>product",{"_index":114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["targets",{"_index":80,"title":{},"body":{"miscellaneous/functions.html":{}}}],["thank",{"_index":144,"title":{},"body":{"index.html":{},"properties.html":{}}}],["time",{"_index":152,"title":{},"body":{"index.html":{},"properties.html":{}}}],["toward",{"_index":173,"title":{},"body":{"index.html":{}}}],["transforms",{"_index":127,"title":{},"body":{"index.html":{}}}],["true",{"_index":116,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":3,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["type.ts",{"_index":24,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["type:\"many",{"_index":112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type:'string",{"_index":129,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":95,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typescript/javascript",{"_index":137,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":68,"title":{},"body":{"miscellaneous/functions.html":{}}}],["up",{"_index":165,"title":{},"body":{"index.html":{},"properties.html":{}}}],["updates",{"_index":176,"title":{},"body":{"index.html":{}}}],["use",{"_index":90,"title":{},"body":{"miscellaneous/functions.html":{}}}],["used",{"_index":101,"title":{},"body":{"miscellaneous/functions.html":{}}}],["useful",{"_index":155,"title":{},"body":{"index.html":{},"properties.html":{}}}],["users",{"_index":186,"title":{},"body":{"index.html":{}}}],["using",{"_index":145,"title":{},"body":{"index.html":{},"properties.html":{}}}],["utility",{"_index":125,"title":{},"body":{"index.html":{}}}],["various",{"_index":130,"title":{},"body":{"index.html":{}}}],["version",{"_index":200,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":179,"title":{},"body":{"index.html":{}}}],["view",{"_index":136,"title":{},"body":{"index.html":{}}}],["viewcolumn",{"_index":99,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["well",{"_index":168,"title":{},"body":{"index.html":{},"properties.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/lib/get-optional-marker.ts\n            \n            function\n            getOptionalMarker\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-decorator-options.ts\n            \n            function\n            getTargetString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-decorator-options.ts\n            \n            function\n            propertyDecoratorOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-decorator-options.ts\n            \n            function\n            replaceTargetWithFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-decorator.ts\n            \n            function\n            propertyDecorator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-definition.ts\n            \n            function\n            propertyDefinition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-type.ts\n            \n            function\n            propertyType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-decorator-options.ts\n            \n            function\n            getTargetString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-decorator-options.ts\n            \n            function\n            relationDecoratorOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-decorator-options.ts\n            \n            function\n            replaceTargetWithFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-decorator.ts\n            \n            function\n            relationDecorator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-definition.ts\n            \n            function\n            relationDefinition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-type.ts\n            \n            function\n            relationType\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @puq/is : ^0.1.0\n        \n            @puq/type : 0.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getOptionalMarker   (src/.../get-optional-marker.ts)\n                        \n                        \n                            getTargetString   (src/.../property-decorator-options.ts)\n                        \n                        \n                            getTargetString   (src/.../relation-decorator-options.ts)\n                        \n                        \n                            propertyDecorator   (src/.../property-decorator.ts)\n                        \n                        \n                            propertyDecoratorOptions   (src/.../property-decorator-options.ts)\n                        \n                        \n                            propertyDefinition   (src/.../property-definition.ts)\n                        \n                        \n                            propertyType   (src/.../property-type.ts)\n                        \n                        \n                            relationDecorator   (src/.../relation-decorator.ts)\n                        \n                        \n                            relationDecoratorOptions   (src/.../relation-decorator-options.ts)\n                        \n                        \n                            relationDefinition   (src/.../relation-definition.ts)\n                        \n                        \n                            relationType   (src/.../relation-type.ts)\n                        \n                        \n                            replaceTargetWithFunction   (src/.../property-decorator-options.ts)\n                        \n                        \n                            replaceTargetWithFunction   (src/.../relation-decorator-options.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/get-optional-marker.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getOptionalMarker\n                        \n                    \n                \n            \n            \n                \ngetOptionalMarker(options: T)\n                \n            \n\n\n\n\n            \n                \n                        Determines if a property is optional based on its required status\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Configuration object containing required property\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | \"?\"\n\n                        \n                            \n                                '' if required, '?' if optional\n\n                            \n                \n            \n        \n    \n    src/lib/property-decorator-options.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getTargetString\n                        \n                    \n                \n            \n            \n                \ngetTargetString(options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Extracts target string from options based on type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Property options to inspect\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                Target string if applicable, undefined otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        propertyDecoratorOptions\n                        \n                    \n                \n            \n            \n                \npropertyDecoratorOptions(options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Serializes property decorator options to a JSON-CODE string with special handling for target properties\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Property decorator configuration\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Formatted JSON string with function notation for targets\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replaceTargetWithFunction\n                        \n                    \n                \n            \n            \n                \nreplaceTargetWithFunction(json: string, target: string)\n                \n            \n\n\n\n\n            \n                \n                        Replaces target string with function notation in JSON\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Original JSON string\n\n                                            \n                                        \n                                        \n                                                target\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Target string to replace\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Modified JSON string\n\n                            \n                \n            \n        \n    \n    src/lib/relation-decorator-options.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getTargetString\n                        \n                    \n                \n            \n            \n                \ngetTargetString(options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Extracts target string from options based on type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Property options to inspect\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Target string if applicable, undefined otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        relationDecoratorOptions\n                        \n                    \n                \n            \n            \n                \nrelationDecoratorOptions(options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Converts relation options into a JSON-Code string for use in a decorator.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe relation options, including name, type, and target.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A JSON string representation of the relation options, with target formatted as a function.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replaceTargetWithFunction\n                        \n                    \n                \n            \n            \n                \nreplaceTargetWithFunction(json: string, target: string)\n                \n            \n\n\n\n\n            \n                \n                        Replaces target string with function notation in JSON\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Original JSON string\n\n                                            \n                                        \n                                        \n                                                target\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Target string to replace\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Modified JSON string\n\n                            \n                \n            \n        \n    \n    src/lib/property-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        propertyDecorator\n                        \n                    \n                \n            \n            \n                \npropertyDecorator(decoratorName: string, options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Generates a TypeScript-like property decorator (e.g., @Property({ type: 'string' })).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                decoratorName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the decorator (e.g.,'Property', 'ViewColumn', 'Column').\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe property options used in the decorator.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted decorator string.\n\n                            \n                \n            \n        \n    \n    src/lib/property-definition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        propertyDefinition\n                        \n                    \n                \n            \n            \n                \npropertyDefinition(options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Generates a TypeScript-like property definition (e.g., name: string;).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe property options including name, type, and optionality.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted property definition string.\n\n                            \n                \n            \n        \n    \n    src/lib/property-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        propertyType\n                        \n                    \n                \n            \n            \n                \npropertyType(options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Determines the TypeScript-compatible property type based on the given options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe property options including type and target.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A TypeScript-like type definition (e.g., 'string', 'number', 'SomeObject[]').\n\n                            \n                \n            \n        \n    \n    src/lib/relation-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relationDecorator\n                        \n                    \n                \n            \n            \n                \nrelationDecorator(decoratorName: string, options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Generates a relation decorator string (e.g., @OneToMany({ type:\"many-to-many\", target:()=>Product , eager: true})).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                decoratorName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the decorator (e.g., OneToMany).\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe relation options.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/relation-definition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relationDefinition\n                        \n                    \n                \n            \n            \n                \nrelationDefinition(options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Generates a TypeScript-like relation definition (e.g., product: Product;).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe relation options including name, type, and target.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted relation definition.\n\n                            \n                \n            \n        \n    \n    src/lib/relation-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relationType\n                        \n                    \n                \n            \n            \n                \nrelationType(options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Determines the relation type string based on the provided options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe relation options containing type and target.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the relation type.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/printer\nSummary\nA utility library that transforms property options such as { type:'string'} into various property definitions like plain (name: string), entity (@Column() name:string), dto (@Property() name: string), or view (@ViewColumn() name: string) property definitions for TypeScript/JavaScript projects.\nInstall\nExample :  pnpm add @puq/printerFunding\nThank you for using @puq/printer It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            Description : Thank you for using `@puq/printer` It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\n        \n            Keywords : puq, printer\n        \n            Homepage : https://rbrightline.github.io/puq/printer\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
