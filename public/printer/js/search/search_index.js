var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/coverage.html",[0,1.706]],["body/coverage.html",[0,1.178,1,1.178,2,1.695,3,1.178,4,1.695,5,1.695,6,1.178,7,1.178,8,1.178,9,2.347,10,1.178,11,3.378,12,0.132,13,3.378,14,2.141,15,2.141,16,2.141,17,1.613,18,1.178,19,1.613,20,1.613,21,1.178,22,1.613,23,1.178,24,1.613,25,1.178,26,2.141,27,1.178,28,1.178,29,1.178,30,1.178,31,1.178,32,1.695,33,1.695,34,0.09,35,0.09]],["title/dependencies.html",[36,1.089,37,1.086]],["body/dependencies.html",[12,0.131,34,0.117,35,0.117,37,1.278,38,2.587,39,2.112,40,2.587,41,2.587,42,2.587]],["title/miscellaneous/functions.html",[43,1.089,44,1.528]],["body/miscellaneous/functions.html",[3,2.193,6,0.495,7,2.055,8,0.83,9,1.253,10,0.83,12,0.127,14,1.253,15,2.055,16,1.682,17,1.253,18,0.83,19,1.253,20,1.253,21,0.83,22,1.253,23,0.83,24,1.253,25,0.83,26,1.253,27,0.83,28,0.83,29,0.83,30,0.83,34,0.046,35,0.046,43,0.495,44,0.495,45,0.495,46,0.713,47,2.173,48,2.173,49,0.713,50,1.194,51,1.541,52,1.401,53,2.008,54,1.541,55,0.713,56,2.789,57,1.492,58,1.938,59,1.59,60,1.194,61,0.713,62,1.194,63,2.789,64,1.676,65,1.194,66,2.599,67,1.194,68,2.99,69,1.194,70,1.541,71,1.194,72,1.194,73,0.713,74,0.713,75,2.733,76,1.194,77,0.713,78,0.713,79,0.352,80,2.008,81,1.541,82,0.713,83,1.194,84,1.194,85,1.194,86,1.194,87,1.194,88,2.599,89,0.713,90,0.713,91,2.671,92,0.713,93,1.803,94,1.194,95,0.713,96,1.803,97,2.008,98,2.173,99,1.194,100,0.713,101,0.352,102,0.352,103,0.713,104,0.713,105,2.008,106,0.713,107,0.713,108,0.713,109,0.713,110,0.713,111,0.713,112,0.713,113,1.194,114,0.713,115,0.713,116,0.713,117,0.713,118,0.713,119,0.713,120,1.194,121,0.713,122,0.713]],["title/index.html",[45,1.089,123,1.567,124,1.567]],["body/index.html",[1,1.186,12,0.11,31,1.186,34,0.09,35,0.09,37,0.843,52,1.411,57,1.411,59,0.843,64,1.313,101,0.843,102,0.843,125,2.333,126,1.707,127,1.186,128,2.078,129,1.186,130,1.186,131,1.186,132,1.186,133,1.621,134,1.186,135,1.186,136,1.186,137,1.186,138,1.186,139,1.186,140,1.186,141,1.707,142,1.707,143,1.707,144,1.707,145,1.707,146,1.707,147,1.707,148,1.707,149,1.707,150,1.707,151,2.333,152,1.707,153,1.707,154,1.707,155,1.707,156,1.707,157,1.707,158,1.707,159,1.707,160,1.707,161,1.707,162,1.707,163,1.707,164,2.333,165,2.333,166,1.707,167,1.707,168,1.707,169,1.707,170,1.707,171,1.707,172,1.707,173,2.333,174,1.707,175,1.707,176,1.707,177,1.707,178,1.707,179,1.707,180,1.707,181,1.707,182,1.707,183,1.707,184,1.707,185,1.707,186,1.707,187,1.707,188,1.707,189,1.707,190,1.707,191,1.707,192,1.707,193,1.707,194,1.707,195,1.707,196,1.707,197,2.333,198,1.707,199,1.707]],["title/modules.html",[200,1.706]],["body/modules.html",[12,0.121,34,0.121,35,0.121,200,1.89]],["title/overview.html",[201,1.706]],["body/overview.html",[12,0.121,34,0.121,35,0.121,201,1.89]],["title/properties.html",[36,1.089,79,1.086]],["body/properties.html",[12,0.133,34,0.102,35,0.102,39,1.445,52,1.525,57,1.447,58,1.445,59,1.027,64,1.447,79,1.027,101,1.027,102,1.027,127,1.445,128,1.445,129,1.445,130,1.445,131,1.445,132,1.445,133,1.847,134,1.445,135,1.445,136,1.445,137,1.445,138,1.445,139,1.445,140,1.445,202,2.08,203,2.08,204,2.08,205,2.08,206,2.08,207,2.08,208,2.08,209,2.08,210,2.08,211,2.08,212,2.08,213,2.08,214,2.08,215,2.08,216,2.08]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0.4.3",{"_index":39,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0.5.15",{"_index":42,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":13,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":11,"title":{},"body":{"coverage.html":{}}}],["add",{"_index":144,"title":{},"body":{"index.html":{}}}],["applicable",{"_index":71,"title":{},"body":{"miscellaneous/functions.html":{}}}],["author",{"_index":214,"title":{},"body":{"properties.html":{}}}],["based",{"_index":53,"title":{},"body":{"miscellaneous/functions.html":{}}}],["brightline",{"_index":216,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":176,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":208,"title":{},"body":{"properties.html":{}}}],["code",{"_index":76,"title":{},"body":{"miscellaneous/functions.html":{}}}],["column",{"_index":102,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["compatibility",{"_index":179,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configuration",{"_index":60,"title":{},"body":{"miscellaneous/functions.html":{}}}],["consider",{"_index":159,"title":{},"body":{"index.html":{}}}],["contact",{"_index":196,"title":{},"body":{"index.html":{}}}],["containing",{"_index":62,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contributions",{"_index":163,"title":{},"body":{"index.html":{}}}],["converts",{"_index":90,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coverage",{"_index":0,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["date",{"_index":168,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":15,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decorator.ts",{"_index":20,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decoratorname",{"_index":99,"title":{},"body":{"miscellaneous/functions.html":{}}}],["definition",{"_index":105,"title":{},"body":{"miscellaneous/functions.html":{}}}],["definition.ts",{"_index":22,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["definitions",{"_index":133,"title":{},"body":{"index.html":{},"properties.html":{}}}],["dependencies",{"_index":37,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":58,"title":{},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["determines",{"_index":51,"title":{},"body":{"miscellaneous/functions.html":{}}}],["developer",{"_index":197,"title":{},"body":{"index.html":{}}}],["development",{"_index":162,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":137,"title":{},"body":{"index.html":{},"properties.html":{}}}],["e.g",{"_index":98,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e.g.,'property",{"_index":100,"title":{},"body":{"miscellaneous/functions.html":{}}}],["eager",{"_index":117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["effort",{"_index":155,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":165,"title":{},"body":{"index.html":{}}}],["entity",{"_index":135,"title":{},"body":{"index.html":{},"properties.html":{}}}],["even",{"_index":184,"title":{},"body":{"index.html":{}}}],["example",{"_index":142,"title":{},"body":{"index.html":{}}}],["extracts",{"_index":67,"title":{},"body":{"miscellaneous/functions.html":{}}}],["features",{"_index":182,"title":{},"body":{"index.html":{}}}],["file",{"_index":2,"title":{},"body":{"coverage.html":{}}}],["find",{"_index":156,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":177,"title":{},"body":{"index.html":{}}}],["formatted",{"_index":80,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":9,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":44,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funding",{"_index":173,"title":{},"body":{"index.html":{}}}],["general",{"_index":190,"title":{},"body":{"index.html":{}}}],["generates",{"_index":96,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getoptionalmarker",{"_index":10,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getoptionalmarker(options",{"_index":49,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gettargetstring",{"_index":17,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gettargetstring(options",{"_index":65,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":123,"title":{"index.html":{}},"body":{}}],["given",{"_index":109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":174,"title":{},"body":{"index.html":{}}}],["handling",{"_index":78,"title":{},"body":{"miscellaneous/functions.html":{}}}],["help",{"_index":164,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":206,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":213,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":209,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/printer",{"_index":207,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":4,"title":{},"body":{"coverage.html":{}}}],["improvements",{"_index":187,"title":{},"body":{"index.html":{}}}],["including",{"_index":93,"title":{},"body":{"miscellaneous/functions.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{}}}],["inspect",{"_index":69,"title":{},"body":{"miscellaneous/functions.html":{}}}],["install",{"_index":141,"title":{},"body":{"index.html":{}}}],["instant",{"_index":172,"title":{},"body":{"index.html":{}}}],["it's",{"_index":148,"title":{},"body":{"index.html":{}}}],["json",{"_index":75,"title":{},"body":{"miscellaneous/functions.html":{}}}],["keep",{"_index":192,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":203,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":180,"title":{},"body":{"index.html":{}}}],["library",{"_index":128,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":210,"title":{},"body":{"properties.html":{}}}],["maintained",{"_index":171,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":152,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":191,"title":{},"body":{"index.html":{}}}],["make",{"_index":183,"title":{},"body":{"index.html":{}}}],["many",{"_index":115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["marker.ts",{"_index":8,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":35,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["miscellaneous",{"_index":43,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":211,"title":{},"body":{"properties.html":{}}}],["modified",{"_index":87,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modules",{"_index":200,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":185,"title":{},"body":{"index.html":{}}}],["name",{"_index":57,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["name:string",{"_index":136,"title":{},"body":{"index.html":{},"properties.html":{}}}],["new",{"_index":31,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["notation",{"_index":81,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":61,"title":{},"body":{"miscellaneous/functions.html":{}}}],["onetomany",{"_index":113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ongoing",{"_index":161,"title":{},"body":{"index.html":{}}}],["open",{"_index":149,"title":{},"body":{"index.html":{}}}],["optional",{"_index":7,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["optionality",{"_index":106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["options",{"_index":59,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["options.ts",{"_index":16,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["original",{"_index":85,"title":{},"body":{"miscellaneous/functions.html":{}}}],["otherwise",{"_index":72,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":189,"title":{},"body":{"index.html":{}}}],["overview",{"_index":201,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":36,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":56,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plain",{"_index":134,"title":{},"body":{"index.html":{},"properties.html":{}}}],["please",{"_index":158,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":143,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":186,"title":{},"body":{"index.html":{}}}],["printer",{"_index":205,"title":{},"body":{"properties.html":{}}}],["product",{"_index":120,"title":{},"body":{"miscellaneous/functions.html":{}}}],["project",{"_index":151,"title":{},"body":{"index.html":{}}}],["projects",{"_index":140,"title":{},"body":{"index.html":{},"properties.html":{}}}],["properties",{"_index":79,"title":{"properties.html":{}},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["property",{"_index":52,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["propertydecorator",{"_index":21,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertydecorator(decoratorname",{"_index":95,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertydecoratoroptions",{"_index":18,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertydecoratoroptions(options",{"_index":73,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertydefinition",{"_index":23,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertydefinition(options",{"_index":104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertyoptions",{"_index":66,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertytype",{"_index":25,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertytype(options",{"_index":107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provided",{"_index":122,"title":{},"body":{"miscellaneous/functions.html":{}}}],["puq",{"_index":204,"title":{},"body":{"properties.html":{}}}],["puq/error",{"_index":38,"title":{},"body":{"dependencies.html":{}}}],["puq/is",{"_index":40,"title":{},"body":{"dependencies.html":{}}}],["puq/printer",{"_index":125,"title":{},"body":{"index.html":{}}}],["puq/printerfunding",{"_index":145,"title":{},"body":{"index.html":{}}}],["relation",{"_index":91,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationdecorator",{"_index":28,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["relationdecorator(decoratorname",{"_index":112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationdecoratoroptions",{"_index":27,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["relationdecoratoroptions(options",{"_index":89,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationdefinition",{"_index":29,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["relationdefinition(options",{"_index":119,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationoptions",{"_index":88,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationtype",{"_index":30,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["relationtype(options",{"_index":121,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replace",{"_index":86,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replaces",{"_index":84,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replacetargetwithfunction",{"_index":19,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["replacetargetwithfunction(json",{"_index":83,"title":{},"body":{"miscellaneous/functions.html":{}}}],["repository",{"_index":212,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":94,"title":{},"body":{"miscellaneous/functions.html":{}}}],["required",{"_index":54,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":34,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["returns",{"_index":63,"title":{},"body":{"miscellaneous/functions.html":{}}}],["robert",{"_index":215,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":198,"title":{},"body":{"index.html":{}}}],["running",{"_index":193,"title":{},"body":{"index.html":{}}}],["secure",{"_index":169,"title":{},"body":{"index.html":{}}}],["securely",{"_index":195,"title":{},"body":{"index.html":{}}}],["serializes",{"_index":74,"title":{},"body":{"miscellaneous/functions.html":{}}}],["smoothly",{"_index":194,"title":{},"body":{"index.html":{}}}],["someobject",{"_index":111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["source",{"_index":150,"title":{},"body":{"index.html":{}}}],["special",{"_index":77,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":46,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../property",{"_index":47,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../relation",{"_index":48,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/get",{"_index":6,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/property",{"_index":14,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/relation",{"_index":26,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":124,"title":{"index.html":{}},"body":{}}],["statements",{"_index":5,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":55,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stays",{"_index":166,"title":{},"body":{"index.html":{}}}],["string",{"_index":64,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["such",{"_index":130,"title":{},"body":{"index.html":{},"properties.html":{}}}],["summary",{"_index":126,"title":{},"body":{"index.html":{}}}],["support",{"_index":199,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":160,"title":{},"body":{"index.html":{}}}],["swc/helpers",{"_index":41,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":50,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":33,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":32,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":153,"title":{},"body":{"index.html":{}}}],["target",{"_index":68,"title":{},"body":{"miscellaneous/functions.html":{}}}],["target:()=>product",{"_index":116,"title":{},"body":{"miscellaneous/functions.html":{}}}],["targets",{"_index":82,"title":{},"body":{"miscellaneous/functions.html":{}}}],["thank",{"_index":146,"title":{},"body":{"index.html":{}}}],["time",{"_index":154,"title":{},"body":{"index.html":{}}}],["toward",{"_index":175,"title":{},"body":{"index.html":{}}}],["transforms",{"_index":129,"title":{},"body":{"index.html":{},"properties.html":{}}}],["true",{"_index":118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":3,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["type.ts",{"_index":24,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["type:\"many",{"_index":114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type:'string",{"_index":131,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typescript",{"_index":97,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typescript/javascript",{"_index":139,"title":{},"body":{"index.html":{},"properties.html":{}}}],["undefined",{"_index":70,"title":{},"body":{"miscellaneous/functions.html":{}}}],["up",{"_index":167,"title":{},"body":{"index.html":{}}}],["updates",{"_index":178,"title":{},"body":{"index.html":{}}}],["use",{"_index":92,"title":{},"body":{"miscellaneous/functions.html":{}}}],["used",{"_index":103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["useful",{"_index":157,"title":{},"body":{"index.html":{}}}],["users",{"_index":188,"title":{},"body":{"index.html":{}}}],["using",{"_index":147,"title":{},"body":{"index.html":{}}}],["utility",{"_index":127,"title":{},"body":{"index.html":{},"properties.html":{}}}],["various",{"_index":132,"title":{},"body":{"index.html":{},"properties.html":{}}}],["version",{"_index":202,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":181,"title":{},"body":{"index.html":{}}}],["view",{"_index":138,"title":{},"body":{"index.html":{},"properties.html":{}}}],["viewcolumn",{"_index":101,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["well",{"_index":170,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/lib/get-optional-marker.ts\n            \n            function\n            getOptionalMarker\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-decorator-options.ts\n            \n            function\n            getTargetString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-decorator-options.ts\n            \n            function\n            propertyDecoratorOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-decorator-options.ts\n            \n            function\n            replaceTargetWithFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-decorator.ts\n            \n            function\n            propertyDecorator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-definition.ts\n            \n            function\n            propertyDefinition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/property-type.ts\n            \n            function\n            propertyType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-decorator-options.ts\n            \n            function\n            getTargetString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-decorator-options.ts\n            \n            function\n            relationDecoratorOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-decorator-options.ts\n            \n            function\n            replaceTargetWithFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-decorator.ts\n            \n            function\n            relationDecorator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-definition.ts\n            \n            function\n            relationDefinition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/relation-type.ts\n            \n            function\n            relationType\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @puq/error : ^0.4.3\n        \n            @puq/is : ^0.4.3\n        \n            @swc/helpers : ^0.5.15\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getOptionalMarker   (src/.../get-optional-marker.ts)\n                        \n                        \n                            getTargetString   (src/.../property-decorator-options.ts)\n                        \n                        \n                            getTargetString   (src/.../relation-decorator-options.ts)\n                        \n                        \n                            propertyDecorator   (src/.../property-decorator.ts)\n                        \n                        \n                            propertyDecoratorOptions   (src/.../property-decorator-options.ts)\n                        \n                        \n                            propertyDefinition   (src/.../property-definition.ts)\n                        \n                        \n                            propertyType   (src/.../property-type.ts)\n                        \n                        \n                            relationDecorator   (src/.../relation-decorator.ts)\n                        \n                        \n                            relationDecoratorOptions   (src/.../relation-decorator-options.ts)\n                        \n                        \n                            relationDefinition   (src/.../relation-definition.ts)\n                        \n                        \n                            relationType   (src/.../relation-type.ts)\n                        \n                        \n                            replaceTargetWithFunction   (src/.../property-decorator-options.ts)\n                        \n                        \n                            replaceTargetWithFunction   (src/.../relation-decorator-options.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/get-optional-marker.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getOptionalMarker\n                        \n                    \n                \n            \n            \n                \ngetOptionalMarker(options: T)\n                \n            \n\n\n\n\n            \n                \n                        Determines if a property is optional based on its required status\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Configuration object containing required property\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | \"?\"\n\n                        \n                            \n                                '' if required, '?' if optional\n\n                            \n                \n            \n        \n    \n    src/lib/property-decorator-options.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getTargetString\n                        \n                    \n                \n            \n            \n                \ngetTargetString(options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Extracts target string from options based on type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Property options to inspect\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                Target string if applicable, undefined otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        propertyDecoratorOptions\n                        \n                    \n                \n            \n            \n                \npropertyDecoratorOptions(options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Serializes property decorator options to a JSON-CODE string with special handling for target properties\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Property decorator configuration\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Formatted JSON string with function notation for targets\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replaceTargetWithFunction\n                        \n                    \n                \n            \n            \n                \nreplaceTargetWithFunction(json: string, target: string)\n                \n            \n\n\n\n\n            \n                \n                        Replaces target string with function notation in JSON\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Original JSON string\n\n                                            \n                                        \n                                        \n                                                target\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Target string to replace\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Modified JSON string\n\n                            \n                \n            \n        \n    \n    src/lib/relation-decorator-options.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getTargetString\n                        \n                    \n                \n            \n            \n                \ngetTargetString(options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Extracts target string from options based on type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Property options to inspect\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Target string if applicable, undefined otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        relationDecoratorOptions\n                        \n                    \n                \n            \n            \n                \nrelationDecoratorOptions(options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Converts relation options into a JSON-Code string for use in a decorator.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe relation options, including name, type, and target.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A JSON string representation of the relation options, with target formatted as a function.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replaceTargetWithFunction\n                        \n                    \n                \n            \n            \n                \nreplaceTargetWithFunction(json: string, target: string)\n                \n            \n\n\n\n\n            \n                \n                        Replaces target string with function notation in JSON\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Original JSON string\n\n                                            \n                                        \n                                        \n                                                target\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Target string to replace\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Modified JSON string\n\n                            \n                \n            \n        \n    \n    src/lib/property-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        propertyDecorator\n                        \n                    \n                \n            \n            \n                \npropertyDecorator(decoratorName: string, options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Generates a TypeScript-like property decorator (e.g., @Property({ type: 'string' })).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                decoratorName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the decorator (e.g.,'Property', 'ViewColumn', 'Column').\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe property options used in the decorator.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted decorator string.\n\n                            \n                \n            \n        \n    \n    src/lib/property-definition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        propertyDefinition\n                        \n                    \n                \n            \n            \n                \npropertyDefinition(options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Generates a TypeScript-like property definition (e.g., name: string;).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe property options including name, type, and optionality.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted property definition string.\n\n                            \n                \n            \n        \n    \n    src/lib/property-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        propertyType\n                        \n                    \n                \n            \n            \n                \npropertyType(options: PropertyOptions)\n                \n            \n\n\n\n\n            \n                \n                        Determines the TypeScript-compatible property type based on the given options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        PropertyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe property options including type and target.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A TypeScript-like type definition (e.g., 'string', 'number', 'SomeObject[]').\n\n                            \n                \n            \n        \n    \n    src/lib/relation-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relationDecorator\n                        \n                    \n                \n            \n            \n                \nrelationDecorator(decoratorName: string, options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Generates a relation decorator string (e.g., @OneToMany({ type:\"many-to-many\", target:()=>Product , eager: true})).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                decoratorName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the decorator (e.g., OneToMany).\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe relation options.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/relation-definition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relationDefinition\n                        \n                    \n                \n            \n            \n                \nrelationDefinition(options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Generates a TypeScript-like relation definition (e.g., product: Product;).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe relation options including name, type, and target.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted relation definition.\n\n                            \n                \n            \n        \n    \n    src/lib/relation-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relationType\n                        \n                    \n                \n            \n            \n                \nrelationType(options: RelationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Determines the relation type string based on the provided options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        RelationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe relation options containing type and target.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the relation type.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/printer\nSummary\nA utility library that transforms property options such as { type:'string'} into various property definitions like plain (name: string), entity (@Column() name:string), dto (@Property() name: string), or view (@ViewColumn() name: string) property definitions for TypeScript/JavaScript projects.\nInstall\nExample :  pnpm add @puq/printerFunding\nThank you for using @puq/printer It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.4.3\n        \n            Description : A utility library that transforms property options such as `{ type:'string'}` into various property definitions like plain (`name: string`), entity (`@Column() name:string`), dto (`@Property() name: string`), or view (`@ViewColumn() name: string`) property definitions for TypeScript/JavaScript projects.\n        \n            Keywords : puq, printer\n        \n            Homepage : https://rbrightline.github.io/puq/printer\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
