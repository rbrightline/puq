var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/coverage.html",[0,1.888]],["body/coverage.html",[0,1.349,1,0.995,2,0.702,3,1.525,4,1.887,5,1.887,6,1.349,7,1.349,8,2.552,9,0.995,10,3.637,11,0.117,12,3.637,13,1.349,14,1.891,15,1.349,16,1.349,17,0.519,18,1.825,19,1.633,20,1.349,21,0.995,22,1.349,23,1.825,24,0.995,25,1.349,26,1.349,27,1.825,28,0.73,29,1.349,30,0.519,31,1.349,32,1.349,33,1.349,34,0.995,35,1.349,36,0.73,37,1.349,38,0.73,39,1.349,40,0.995,41,1.349,42,1.349,43,1.349,44,1.887,45,1.887,46,0.081,47,0.081]],["title/dependencies.html",[48,1.21,49,1.248]],["body/dependencies.html",[11,0.118,30,0.738,46,0.102,47,0.102,49,1.415,50,2.685,51,2.685,52,2.685,53,3.41,54,2.685,55,2.685,56,2.685,57,2.685]],["title/miscellaneous/functions.html",[58,0.655,59,0.916]],["body/miscellaneous/functions.html",[2,0.869,3,1.464,9,1.464,11,0.106,13,0.543,14,0.4,15,0.91,16,0.543,17,0.452,18,0.91,19,1.363,20,0.91,21,0.671,22,0.91,23,0.91,24,0.671,25,0.91,26,0.91,27,0.91,28,0.829,29,0.91,30,0.589,31,0.91,34,0.671,35,0.543,36,0.745,37,0.543,38,0.829,39,0.543,40,1.646,41,0.91,42,0.91,46,0.041,47,0.074,58,0.294,59,0.294,60,0.4,61,0.759,62,0.759,63,1.273,64,1.273,65,1.273,66,0.759,67,0.759,68,0.759,69,0.759,70,2.367,71,1.923,72,2.587,73,1.273,74,2.689,75,1.599,76,1.763,77,1.273,78,2.921,79,0.759,80,0.759,81,1.273,82,2.981,83,0.91,84,2.854,85,2.04,86,3.081,87,2.04,88,1.807,89,1.273,90,1.925,91,1.925,92,1.925,93,1.273,94,2.04,95,3.123,96,2.587,97,0.759,98,0.759,99,0.543,100,1.175,101,0.759,102,1.273,103,1.273,104,1.273,105,2.854,106,1.925,107,1.273,108,1.273,109,1.273,110,1.273,111,1.273,112,1.273,113,1.273,114,1.273,115,1.273,116,0.759,117,0.759,118,1.273,119,1.273,120,1.273,121,0.91,122,1.273,123,1.273,124,1.273,125,0.759,126,0.759,127,1.273,128,1.273,129,1.273,130,1.273,131,1.925,132,1.273,133,1.273,134,1.273,135,1.273,136,0.759,137,0.759,138,0.759,139,1.273,140,1.273,141,0.759,142,1.644,143,0.91,144,0.759,145,0.759,146,0.759,147,0.759,148,0.4,149,0.759,150,0.759,151,0.759,152,0.759,153,0.759,154,0.759,155,0.759,156,0.759,157,0.759,158,0.543,159,0.759,160,1.273,161,0.759,162,0.759,163,0.759,164,0.759,165,0.759,166,0.543,167,0.759,168,0.759,169,0.759,170,0.759,171,0.759,172,1.273,173,0.759,174,1.273,175,0.759,176,0.759,177,0.759,178,0.543,179,0.759,180,0.759]],["title/index.html",[60,0.892,181,1.693,182,1.693]],["body/index.html",[1,0.818,2,0.888,11,0.096,17,0.828,19,1.5,21,1.173,24,0.818,28,1.007,30,0.716,36,0.6,38,0.6,43,1.109,46,0.071,47,0.091,49,0.818,59,0.6,75,1.173,83,1.109,85,1.109,88,1.5,121,1.592,148,1.173,158,1.109,166,1.592,183,2.604,184,1.551,185,1.109,186,1.109,187,1.109,188,0.818,189,2.154,190,1.551,191,1.551,192,1.173,193,1.373,194,1.551,195,1.551,196,1.551,197,1.551,198,1.109,199,1.109,200,1.109,201,1.551,202,1.551,203,1.551,204,1.551,205,1.551,206,1.551,207,1.551,208,1.551,209,1.551,210,1.551,211,2.226,212,1.551,213,3.013,214,1.551,215,1.551,216,2.845,217,1.551,218,1.551,219,1.551,220,1.109,221,1.551,222,2.604,223,1.551,224,1.551,225,1.551,226,1.551,227,1.551,228,2.226,229,1.551,230,1.109,231,1.551,232,1.551,233,1.551,234,1.551,235,1.551,236,1.551,237,1.551,238,1.551,239,1.551,240,2.226,241,1.551,242,1.551,243,1.551,244,1.551,245,1.551,246,1.551,247,1.551,248,1.551,249,1.551,250,1.551,251,1.551,252,1.551,253,1.551,254,1.551,255,1.551,256,1.551,257,1.551,258,1.551,259,1.109,260,1.551,261,1.551,262,1.551,263,1.551,264,1.551,265,1.551,266,1.551,267,1.551,268,1.551,269,1.551,270,1.551,271,2.226,272,1.551,273,1.551]],["title/modules.html",[274,1.888]],["body/modules.html",[11,0.107,46,0.107,47,0.107,274,2.086]],["title/overview.html",[275,1.888]],["body/overview.html",[11,0.107,46,0.107,47,0.107,275,2.086]],["title/properties.html",[48,1.21,276,1.693]],["body/properties.html",[2,0.645,11,0.118,17,0.645,28,0.908,30,0.645,46,0.094,47,0.094,59,0.908,87,1.678,148,1.237,185,1.678,186,1.678,187,1.678,188,1.237,189,2.103,192,1.237,193,1.237,198,1.678,199,1.678,200,1.678,220,1.678,276,1.678,277,2.347,278,2.347,279,2.347,280,2.347,281,2.347,282,2.347,283,2.347,284,2.347,285,2.347,286,2.347,287,2.347,288,2.347,289,2.347,290,2.347,291,2.347,292,2.347,293,2.347,294,2.347]],["title/miscellaneous/typealiases.html",[58,0.655,295,2.369]],["body/miscellaneous/typealiases.html",[1,1.078,2,0.914,3,1.687,6,1.462,7,1.925,9,1.419,11,0.086,14,1.587,17,0.562,32,1.462,33,1.925,34,1.419,36,1.042,38,0.791,40,1.078,46,0.086,47,0.086,58,0.791,60,1.078,70,1.462,71,1.925,75,1.078,76,1.925,88,1.419,94,1.462,99,1.462,100,1.462,143,1.462,178,1.462,188,1.078,192,1.078,193,1.078,230,1.462,259,1.462,296,2.045,297,2.045,298,2.045,299,2.693,300,2.045,301,2.045,302,2.045,303,2.045,304,2.045,305,2.045,306,2.045,307,2.045,308,2.045,309,2.045,310,2.045,311,2.045,312,2.045,313,2.045,314,2.045,315,2.045,316,2.045,317,2.045,318,2.045,319,2.045,320,2.045,321,2.045,322,2.045,323,2.045,324,2.045,325,2.045,326,2.045]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0.4.20",{"_index":278,"title":{},"body":{"properties.html":{}}}],["0.5.15",{"_index":51,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":12,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":10,"title":{},"body":{"coverage.html":{}}}],["4.1.0",{"_index":57,"title":{},"body":{"dependencies.html":{}}}],["absolute",{"_index":82,"title":{},"body":{"miscellaneous/functions.html":{}}}],["absolutepath",{"_index":304,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["access",{"_index":146,"title":{},"body":{"miscellaneous/functions.html":{}}}],["add",{"_index":209,"title":{},"body":{"index.html":{}}}],["alias",{"_index":8,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":296,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["array",{"_index":74,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asynchronously",{"_index":72,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":151,"title":{},"body":{"miscellaneous/functions.html":{}}}],["author",{"_index":292,"title":{},"body":{"properties.html":{}}}],["base",{"_index":178,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["based",{"_index":83,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["before",{"_index":164,"title":{},"body":{"miscellaneous/functions.html":{}}}],["behaviors",{"_index":306,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["below",{"_index":314,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["brightline",{"_index":294,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":250,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":286,"title":{},"body":{"properties.html":{}}}],["check",{"_index":121,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["checks",{"_index":118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["child",{"_index":174,"title":{},"body":{"miscellaneous/functions.html":{}}}],["childpath",{"_index":172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["commonfileoptions",{"_index":9,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["compatibility",{"_index":253,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":92,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configure",{"_index":305,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["conforming",{"_index":159,"title":{},"body":{"miscellaneous/functions.html":{}}}],["consider",{"_index":235,"title":{},"body":{"index.html":{}}}],["consistent",{"_index":167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contact",{"_index":270,"title":{},"body":{"index.html":{}}}],["content",{"_index":134,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contents",{"_index":130,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contextualize",{"_index":326,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["contributions",{"_index":239,"title":{},"body":{"index.html":{}}}],["convert",{"_index":179,"title":{},"body":{"miscellaneous/functions.html":{}}}],["converts",{"_index":173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coverage",{"_index":0,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creates",{"_index":138,"title":{},"body":{"miscellaneous/functions.html":{}}}],["current",{"_index":157,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cwd",{"_index":155,"title":{},"body":{"miscellaneous/functions.html":{}}}],["data",{"_index":199,"title":{},"body":{"index.html":{},"properties.html":{}}}],["date",{"_index":243,"title":{},"body":{"index.html":{}}}],["default",{"_index":153,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defaults",{"_index":156,"title":{},"body":{"miscellaneous/functions.html":{}}}],["define",{"_index":300,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["defines",{"_index":316,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dependencies",{"_index":49,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":87,"title":{},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["designed",{"_index":190,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":309,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["developer",{"_index":271,"title":{},"body":{"index.html":{}}}],["developers",{"_index":204,"title":{},"body":{"index.html":{}}}],["development",{"_index":238,"title":{},"body":{"index.html":{}}}],["dir.ts",{"_index":24,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["directories",{"_index":148,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["directory",{"_index":75,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["dirs",{"_index":15,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dirs(root",{"_index":69,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dirs.ts",{"_index":212,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["e.g",{"_index":113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["efficient",{"_index":186,"title":{},"body":{"index.html":{},"properties.html":{}}}],["effort",{"_index":232,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":166,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["ensures",{"_index":175,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":150,"title":{},"body":{"miscellaneous/functions.html":{}}}],["escape",{"_index":152,"title":{},"body":{"miscellaneous/functions.html":{}}}],["essential",{"_index":202,"title":{},"body":{"index.html":{}}}],["even",{"_index":258,"title":{},"body":{"index.html":{}}}],["example",{"_index":207,"title":{},"body":{"index.html":{}}}],["extends",{"_index":115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":123,"title":{},"body":{"miscellaneous/functions.html":{}}}],["features",{"_index":256,"title":{},"body":{"index.html":{}}}],["file",{"_index":2,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["file.ts",{"_index":19,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["filename",{"_index":107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filepath",{"_index":105,"title":{},"body":{"miscellaneous/functions.html":{}}}],["files",{"_index":17,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["files(root",{"_index":97,"title":{},"body":{"miscellaneous/functions.html":{}}}],["files.ts",{"_index":21,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["find",{"_index":213,"title":{},"body":{"index.html":{}}}],["findfile",{"_index":20,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["findfile(filepath",{"_index":101,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findfiles",{"_index":22,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["findfiles(filepath",{"_index":116,"title":{},"body":{"miscellaneous/functions.html":{}}}],["finds",{"_index":102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["first",{"_index":103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fixes",{"_index":251,"title":{},"body":{"index.html":{}}}],["form",{"_index":180,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formats",{"_index":200,"title":{},"body":{"index.html":{},"properties.html":{}}}],["formatting",{"_index":169,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fs",{"_index":283,"title":{},"body":{"properties.html":{}}}],["function",{"_index":14,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":59,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["funding",{"_index":222,"title":{},"body":{"index.html":{}}}],["general",{"_index":264,"title":{},"body":{"index.html":{}}}],["getting",{"_index":181,"title":{"index.html":{}},"body":{}}],["given",{"_index":104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":248,"title":{},"body":{"index.html":{}}}],["handle",{"_index":218,"title":{},"body":{"index.html":{}}}],["handling",{"_index":279,"title":{},"body":{"properties.html":{}}}],["help",{"_index":240,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":284,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":291,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":287,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/fs",{"_index":285,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":4,"title":{},"body":{"coverage.html":{}}}],["improvements",{"_index":261,"title":{},"body":{"index.html":{}}}],["include",{"_index":109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["index",{"_index":60,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["individual",{"_index":312,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["information",{"_index":310,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["install",{"_index":206,"title":{},"body":{"index.html":{}}}],["instant",{"_index":247,"title":{},"body":{"index.html":{}}}],["isdir",{"_index":25,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdir(filepath",{"_index":117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isfile",{"_index":26,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isfile(filepath",{"_index":125,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":225,"title":{},"body":{"index.html":{}}}],["js",{"_index":56,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":28,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["keep",{"_index":266,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":281,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":254,"title":{},"body":{"index.html":{}}}],["library",{"_index":189,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":288,"title":{},"body":{"properties.html":{}}}],["lightweight",{"_index":185,"title":{},"body":{"index.html":{},"properties.html":{}}}],["link",{"_index":160,"title":{},"body":{"miscellaneous/functions.html":{}}}],["list",{"_index":211,"title":{},"body":{"index.html":{}}}],["listing",{"_index":307,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["literal",{"_index":315,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintained",{"_index":246,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":229,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":265,"title":{},"body":{"index.html":{}}}],["make",{"_index":257,"title":{},"body":{"index.html":{}}}],["making",{"_index":201,"title":{},"body":{"index.html":{}}}],["manage",{"_index":197,"title":{},"body":{"index.html":{}}}],["matching",{"_index":47,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":58,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":289,"title":{},"body":{"properties.html":{}}}],["modules",{"_index":274,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":259,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["multiple",{"_index":214,"title":{},"body":{"index.html":{}}}],["name",{"_index":85,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["new",{"_index":43,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["normalize",{"_index":325,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["normalized",{"_index":176,"title":{},"body":{"miscellaneous/functions.html":{}}}],["normalizes",{"_index":163,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":132,"title":{},"body":{"miscellaneous/functions.html":{}}}],["offers",{"_index":194,"title":{},"body":{"index.html":{}}}],["one",{"_index":320,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ongoing",{"_index":237,"title":{},"body":{"index.html":{}}}],["open",{"_index":226,"title":{},"body":{"index.html":{}}}],["operate",{"_index":79,"title":{},"body":{"miscellaneous/functions.html":{}}}],["operation",{"_index":299,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["operations",{"_index":193,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["optional",{"_index":86,"title":{},"body":{"miscellaneous/functions.html":{}}}],["options",{"_index":71,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["options.ts",{"_index":7,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["otherwise",{"_index":124,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":263,"title":{},"body":{"index.html":{}}}],["outer",{"_index":147,"title":{},"body":{"miscellaneous/functions.html":{}}}],["output",{"_index":301,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["overview",{"_index":275,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":48,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":84,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsed",{"_index":133,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parses",{"_index":128,"title":{},"body":{"miscellaneous/functions.html":{}}}],["path",{"_index":88,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["path.ts",{"_index":41,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["paths",{"_index":76,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pattern",{"_index":106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["patterns",{"_index":112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["please",{"_index":234,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":208,"title":{},"body":{"index.html":{}}}],["points",{"_index":120,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portion",{"_index":108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["powerful",{"_index":260,"title":{},"body":{"index.html":{}}}],["prevents",{"_index":145,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processing",{"_index":308,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["project",{"_index":228,"title":{},"body":{"index.html":{}}}],["promise",{"_index":95,"title":{},"body":{"miscellaneous/functions.html":{}}}],["properties",{"_index":276,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["property",{"_index":313,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["provided",{"_index":119,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":280,"title":{},"body":{"properties.html":{}}}],["puq",{"_index":282,"title":{},"body":{"properties.html":{}}}],["puq/debug",{"_index":52,"title":{},"body":{"dependencies.html":{}}}],["puq/error",{"_index":54,"title":{},"body":{"dependencies.html":{}}}],["puq/fs",{"_index":183,"title":{},"body":{"index.html":{}}}],["puq/fsfeatures",{"_index":210,"title":{},"body":{"index.html":{}}}],["puq/is",{"_index":55,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":216,"title":{},"body":{"index.html":{}}}],["reading",{"_index":215,"title":{},"body":{"index.html":{}}}],["readjsonfile",{"_index":29,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["readjsonfile(filepath",{"_index":126,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reads",{"_index":127,"title":{},"body":{"miscellaneous/functions.html":{}}}],["readyamlfile",{"_index":31,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["readyamlfile(filepath",{"_index":136,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recursive",{"_index":99,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["recursively",{"_index":80,"title":{},"body":{"miscellaneous/functions.html":{}}}],["refer",{"_index":311,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["regexp",{"_index":110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relative",{"_index":40,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["repository",{"_index":290,"title":{},"body":{"properties.html":{}}}],["represents",{"_index":319,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolution",{"_index":142,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolved",{"_index":322,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolver",{"_index":140,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolver.ts",{"_index":33,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resolves",{"_index":96,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolving",{"_index":317,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["restricts",{"_index":141,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":46,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieves",{"_index":73,"title":{},"body":{"miscellaneous/functions.html":{}}}],["return",{"_index":81,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returning",{"_index":129,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returns",{"_index":94,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["robert",{"_index":293,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":272,"title":{},"body":{"index.html":{}}}],["robust",{"_index":195,"title":{},"body":{"index.html":{}}}],["root",{"_index":78,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rootpath",{"_index":177,"title":{},"body":{"miscellaneous/functions.html":{}}}],["running",{"_index":267,"title":{},"body":{"index.html":{}}}],["scope",{"_index":36,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["scope(root",{"_index":137,"title":{},"body":{"miscellaneous/functions.html":{}}}],["scope.ts",{"_index":219,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":139,"title":{},"body":{"miscellaneous/functions.html":{}}}],["scoperesolver",{"_index":34,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["seamless",{"_index":191,"title":{},"body":{"index.html":{}}}],["search",{"_index":90,"title":{},"body":{"miscellaneous/functions.html":{}}}],["searching",{"_index":100,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["secure",{"_index":244,"title":{},"body":{"index.html":{}}}],["securely",{"_index":269,"title":{},"body":{"index.html":{}}}],["segments",{"_index":38,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["segments(filepath",{"_index":161,"title":{},"body":{"miscellaneous/functions.html":{}}}],["segments.ts",{"_index":221,"title":{},"body":{"index.html":{}}}],["separators",{"_index":168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["set",{"_index":196,"title":{},"body":{"index.html":{}}}],["single",{"_index":321,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["smoothly",{"_index":268,"title":{},"body":{"index.html":{}}}],["source",{"_index":227,"title":{},"body":{"index.html":{}}}],["specific",{"_index":318,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["specified",{"_index":144,"title":{},"body":{"miscellaneous/functions.html":{}}}],["split",{"_index":170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splits",{"_index":162,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splitting",{"_index":165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../common",{"_index":297,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../dirs.ts",{"_index":61,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../files.ts",{"_index":62,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../find",{"_index":63,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":64,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../read",{"_index":65,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../scope",{"_index":298,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../scope.ts",{"_index":66,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../segments.ts",{"_index":67,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../to",{"_index":68,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/common",{"_index":6,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/dirs.ts",{"_index":13,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/files.ts",{"_index":16,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/find",{"_index":18,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/is",{"_index":23,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/read",{"_index":27,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/scope",{"_index":32,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/scope.ts",{"_index":35,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/segments.ts",{"_index":37,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/to",{"_index":39,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":89,"title":{},"body":{"miscellaneous/functions.html":{}}}],["started",{"_index":182,"title":{"index.html":{}},"body":{}}],["starting",{"_index":77,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":5,"title":{},"body":{"coverage.html":{}}}],["stays",{"_index":241,"title":{},"body":{"index.html":{}}}],["string",{"_index":70,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["structured",{"_index":198,"title":{},"body":{"index.html":{},"properties.html":{}}}],["style",{"_index":111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["such",{"_index":303,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["summary",{"_index":184,"title":{},"body":{"index.html":{}}}],["support",{"_index":273,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":236,"title":{},"body":{"index.html":{}}}],["supports",{"_index":98,"title":{},"body":{"miscellaneous/functions.html":{}}}],["swc/helpers",{"_index":50,"title":{},"body":{"dependencies.html":{}}}],["system",{"_index":192,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["t",{"_index":135,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":45,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":44,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":230,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["tasks",{"_index":205,"title":{},"body":{"index.html":{}}}],["thank",{"_index":223,"title":{},"body":{"index.html":{}}}],["throwing",{"_index":149,"title":{},"body":{"miscellaneous/functions.html":{}}}],["time",{"_index":231,"title":{},"body":{"index.html":{}}}],["tool",{"_index":203,"title":{},"body":{"index.html":{}}}],["torelativepath",{"_index":42,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["torelativepath(rootpath",{"_index":171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toward",{"_index":249,"title":{},"body":{"index.html":{}}}],["traversal",{"_index":93,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":122,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ts",{"_index":114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":3,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":295,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":131,"title":{},"body":{"miscellaneous/functions.html":{}}}],["types",{"_index":302,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":187,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typically",{"_index":323,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["up",{"_index":242,"title":{},"body":{"index.html":{}}}],["updates",{"_index":252,"title":{},"body":{"index.html":{}}}],["used",{"_index":324,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["useful",{"_index":233,"title":{},"body":{"index.html":{}}}],["users",{"_index":262,"title":{},"body":{"index.html":{}}}],["using",{"_index":224,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":217,"title":{},"body":{"index.html":{}}}],["utility",{"_index":188,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["value",{"_index":154,"title":{},"body":{"miscellaneous/functions.html":{}}}],["version",{"_index":277,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":255,"title":{},"body":{"index.html":{}}}],["well",{"_index":245,"title":{},"body":{"index.html":{}}}],["within",{"_index":143,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["work",{"_index":220,"title":{},"body":{"index.html":{},"properties.html":{}}}],["working",{"_index":158,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["workspace",{"_index":53,"title":{},"body":{"dependencies.html":{}}}],["yaml",{"_index":30,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["yes",{"_index":91,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/lib/common-file-options.ts\n            \n            type alias\n            CommonFileOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/dirs.ts\n            \n            function\n            dirs\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/files.ts\n            \n            function\n            files\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/find-file.ts\n            \n            function\n            findFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/find-files.ts\n            \n            function\n            findFiles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/is-dir.ts\n            \n            function\n            isDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/is-file.ts\n            \n            function\n            isFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/read-json-file.ts\n            \n            function\n            readJSONFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/read-yaml-file.ts\n            \n            function\n            readYAMLFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/scope-resolver.ts\n            \n            type alias\n            ScopeResolver\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/scope.ts\n            \n            function\n            scope\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/segments.ts\n            \n            function\n            segments\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/to-relative-path.ts\n            \n            function\n            toRelativePath\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n        \n            @puq/debug : workspace:^\n        \n            @puq/error : workspace:^\n        \n            @puq/is : workspace:^\n        \n            js-yaml : ^4.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dirs   (src/.../dirs.ts)\n                        \n                        \n                            files   (src/.../files.ts)\n                        \n                        \n                            findFile   (src/.../find-file.ts)\n                        \n                        \n                            findFiles   (src/.../find-files.ts)\n                        \n                        \n                            isDir   (src/.../is-dir.ts)\n                        \n                        \n                            isFile   (src/.../is-file.ts)\n                        \n                        \n                            readJSONFile   (src/.../read-json-file.ts)\n                        \n                        \n                            readYAMLFile   (src/.../read-yaml-file.ts)\n                        \n                        \n                            scope   (src/.../scope.ts)\n                        \n                        \n                            segments   (src/.../segments.ts)\n                        \n                        \n                            toRelativePath   (src/.../to-relative-path.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/dirs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dirs\n                        \n                    \n                \n            \n            \n                \ndirs(root: string, options?: CommonFileOptions)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously retrieves an array of directory paths starting from a root directory.\nCan operate recursively and return either absolute or relative paths based on options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe root directory path to start the search from\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            CommonFileOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional configuration for directory traversal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an array of directory paths\n\n                            \n                \n            \n        \n    \n    src/lib/files.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n            \n                \nfiles(root: string, options?: CommonFileOptions)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously retrieves an array of file paths starting from a root directory.\nSupports recursive searching and can return either absolute or relative paths.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe root directory path to start the search from. Can be relative or absolute.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            CommonFileOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional configuration for file traversal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an array of file paths\n\n                            \n                \n            \n        \n    \n    src/lib/find-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findFile\n                        \n                    \n                \n            \n            \n                \nfindFile(filepath: string, options?: CommonFileOptions)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously finds the first file matching a given filepath pattern.\nThe filename portion can include RegExp-style patterns (e.g., '.ts$').\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file path or pattern to search for. Can be absolute or relative.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            CommonFileOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional configuration for file searching, extends CommonFileOptions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the absolute path of the first matching file\n\n                            \n                \n            \n        \n    \n    src/lib/find-files.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findFiles\n                        \n                    \n                \n            \n            \n                \nfindFiles(filepath: string, options?: CommonFileOptions)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously finds all files matching a given filepath pattern.\nThe filename portion can include RegExp-style patterns (e.g., '.ts$').\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file path or pattern to search for. Can be absolute or relative.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            CommonFileOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional configuration for file searching, extends CommonFileOptions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an array of matching file paths\n\n                            \n                \n            \n        \n    \n    src/lib/is-dir.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDir\n                        \n                    \n                \n            \n            \n                \nisDir(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously checks if the provided filepath points to a directory.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe path to check. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to true if the path is a directory, false otherwise\n\n                            \n                \n            \n        \n    \n    src/lib/is-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isFile\n                        \n                    \n                \n            \n            \n                \nisFile(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously checks if the provided filepath points to a file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe path to check. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to true if the path is a directory, false otherwise\n\n                            \n                \n            \n        \n    \n    src/lib/read-json-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        readJSONFile\n                        \n                    \n                \n            \n            \n                \nreadJSONFile(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously reads and parses a JSON file, returning its contents as a typed object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe path to the JSON file. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the parsed JSON content typed as T\n\n                            \n                \n            \n        \n    \n    src/lib/read-yaml-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        readYAMLFile\n                        \n                    \n                \n            \n            \n                \nreadYAMLFile(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously reads and parses a YAML file, returning its contents as a typed object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe path to the YAML file. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the parsed YAML content typed as T\n\n                            \n                \n            \n        \n    \n    src/lib/scope.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(root)\n                \n            \n\n\n\n\n            \n                \n                        Creates a scoped path resolver that restricts path resolution to within a specified root directory.\nPrevents access to outer directories by throwing an error if resolution attempts to escape the scope.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                root\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    cwd()\n                                            \n\n                                            \n                                                    \nThe root directory to scope path resolution to. Defaults to the current working directory.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ScopeResolver\n\n                        \n                            \n                                A scoped resolver function conforming to {@link ScopeResolver}\n\n                            \n                \n            \n        \n    \n    src/lib/segments.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Splits a file path into an array of path segments.\nNormalizes the path before splitting to ensure consistent separators and formatting.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file path to split into segments. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Array\n\n                        \n                            \n                                \n{@link Array} An array of path segments\n\n\n                            \n                \n            \n        \n    \n    src/lib/to-relative-path.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toRelativePath\n                        \n                    \n                \n            \n            \n                \ntoRelativePath(rootPath: string, childPath: string)\n                \n            \n\n\n\n\n            \n                \n                        Converts an absolute child path to a relative path based on a root path.\nEnsures the child path is within the root path and returns a normalized relative path.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rootPath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe root directory path to base the relative path on\n\n\n                                            \n                                        \n                                        \n                                                childPath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe absolute path to convert to relative form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/fs\nSummary\n@puq/fs is a lightweight, efficient TypeScript utility library designed for seamless file system operations. It offers a robust set of functions to manage directories, files, and structured data formats like JSON and YAML, making it an essential tool for developers working with file-based tasks.\nInstall\nExample :  pnpm add @puq/fsFeatures\n\nDirectory Operations\n\nList directories (dirs.ts)\nCheck if a path is a directory (is-dir.ts)\n\n\nFile Operations\n\nList files (files.ts)\nCheck if a path is a file (is-file.ts)\nFind a matching file (find-file.ts)\nFind multiple matching files (find-files.ts)\n\n\nFile Reading\n\nRead JSON files (read-json-file.ts)\nRead YAML files (read-yaml-file.ts)\n\n\nPath Utilities\n\nHandle file system scope (scope.ts)\nWork with path segments (segments.ts)\n\n\n\nFunding\nThank you for using @puq/fs It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\n💲💲 Instant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\n💰 Support the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.4.20\n        \n            Description : A lightweight and efficient TypeScript utility library for handling file system operations. This library provides functions to work with directories, files, and structured data formats like JSON and YAML.\n        \n            Keywords : puq, fs\n        \n            Homepage : https://rbrightline.github.io/puq/fs\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommonFileOptions   (src/.../common-file-options.ts)\n                        \n                        \n                            ScopeResolver   (src/.../scope-resolver.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/common-file-options.ts\n    \n    \n        \n            \n                \n                    \n                    CommonFileOptions\n                \n            \n            \n                \n                    File operation options to define output and operation types such as recursive and absolutePath.\nThese options configure behaviors for file system operations like searching, listing, or processing files.\nFor detailed information, refer to the individual property documentation below.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/scope-resolver.ts\n    \n    \n        \n            \n                \n                    \n                    ScopeResolver\n                \n            \n            \n                \n                    Defines a function type for resolving file paths within a specific scope.\nThis type represents a utility function that takes one or more path segments\nand returns a single resolved path string, typically used to normalize or\ncontextualize paths relative to a base directory or scope.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
