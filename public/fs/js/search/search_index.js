var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/coverage.html",[0,1.888]],["body/coverage.html",[0,1.35,1,0.996,2,0.702,3,1.525,4,1.889,5,1.889,6,1.35,7,1.35,8,2.554,9,0.996,10,3.638,11,0.117,12,3.638,13,1.35,14,1.891,15,1.35,16,1.35,17,0.519,18,1.826,19,1.634,20,1.35,21,0.996,22,1.35,23,1.826,24,0.996,25,1.35,26,1.35,27,1.826,28,0.731,29,1.35,30,0.519,31,1.35,32,1.35,33,1.35,34,0.996,35,1.35,36,0.731,37,1.35,38,0.731,39,1.35,40,0.996,41,1.35,42,1.35,43,1.35,44,1.889,45,1.889,46,0.081,47,0.081]],["title/dependencies.html",[48,1.21,49,1.248]],["body/dependencies.html",[11,0.118,30,0.731,46,0.101,47,0.101,49,1.674,50,2.659,51,2.659,52,2.659,53,2.659,54,2.659,55,2.659,56,2.428,57,2.659,58,2.659]],["title/miscellaneous/functions.html",[59,0.655,60,0.916]],["body/miscellaneous/functions.html",[2,0.869,3,1.465,9,1.465,11,0.106,13,0.544,14,0.401,15,0.911,16,0.544,17,0.452,18,0.911,19,1.364,20,0.911,21,0.672,22,0.911,23,0.911,24,0.672,25,0.911,26,0.911,27,0.911,28,0.83,29,0.911,30,0.59,31,0.911,34,0.672,35,0.544,36,0.745,37,0.544,38,0.83,39,0.544,40,1.647,41,0.911,42,0.911,46,0.041,47,0.074,59,0.294,60,0.294,61,0.401,62,0.76,63,0.76,64,1.275,65,1.275,66,1.275,67,0.76,68,0.76,69,0.76,70,0.76,71,2.368,72,1.924,73,2.588,74,1.275,75,2.691,76,1.6,77,1.764,78,1.275,79,2.923,80,0.76,81,0.76,82,1.275,83,2.982,84,0.911,85,2.856,86,2.042,87,3.082,88,2.042,89,1.808,90,1.275,91,1.927,92,1.927,93,1.927,94,1.275,95,2.042,96,3.125,97,2.588,98,0.76,99,0.76,100,0.544,101,1.177,102,0.76,103,1.275,104,1.275,105,1.275,106,2.856,107,1.927,108,1.275,109,1.275,110,1.275,111,1.275,112,1.275,113,1.275,114,1.275,115,1.275,116,1.275,117,0.76,118,0.76,119,1.275,120,1.275,121,1.275,122,0.911,123,1.275,124,1.275,125,1.275,126,0.76,127,0.76,128,1.275,129,1.275,130,1.275,131,1.275,132,1.927,133,1.275,134,1.275,135,1.275,136,1.275,137,0.76,138,0.76,139,0.76,140,1.275,141,1.275,142,0.76,143,1.646,144,0.911,145,0.76,146,0.76,147,0.76,148,0.76,149,0.401,150,0.76,151,0.76,152,0.76,153,0.76,154,0.76,155,0.76,156,0.76,157,0.76,158,0.76,159,0.544,160,0.76,161,1.275,162,0.76,163,0.76,164,0.76,165,0.76,166,0.76,167,0.544,168,0.76,169,0.76,170,0.76,171,0.76,172,0.76,173,1.275,174,0.76,175,1.275,176,0.76,177,0.76,178,0.76,179,0.544,180,0.76,181,0.76]],["title/index.html",[61,0.892,182,1.693,183,1.693]],["body/index.html",[1,0.818,2,0.888,11,0.096,17,0.828,19,1.501,21,1.174,24,0.818,28,1.008,30,0.716,36,0.601,38,0.601,43,1.11,46,0.071,47,0.091,49,0.818,60,0.601,76,1.174,84,1.11,86,1.11,89,1.501,122,1.593,149,1.174,159,1.11,167,1.593,184,2.605,185,1.553,186,1.11,187,1.11,188,1.11,189,0.818,190,2.155,191,1.553,192,1.553,193,1.174,194,1.373,195,1.553,196,1.553,197,1.553,198,1.553,199,1.11,200,1.11,201,1.11,202,1.553,203,1.553,204,1.553,205,1.553,206,1.553,207,1.553,208,1.553,209,1.553,210,1.553,211,1.553,212,2.228,213,1.553,214,3.014,215,1.553,216,1.553,217,2.847,218,1.553,219,1.553,220,1.553,221,1.11,222,1.553,223,2.605,224,1.553,225,1.553,226,1.553,227,1.553,228,1.553,229,2.228,230,1.553,231,1.11,232,1.553,233,1.553,234,1.553,235,1.553,236,1.553,237,1.553,238,1.553,239,1.553,240,1.553,241,2.228,242,1.553,243,1.553,244,1.553,245,1.553,246,1.553,247,1.553,248,1.553,249,1.553,250,1.553,251,1.553,252,1.553,253,1.553,254,1.553,255,1.553,256,1.553,257,1.553,258,1.553,259,1.553,260,1.11,261,1.553,262,1.553,263,1.553,264,1.553,265,1.553,266,1.553,267,1.553,268,1.553,269,1.553,270,1.553,271,1.553,272,2.228,273,1.553,274,1.553]],["title/modules.html",[275,1.888]],["body/modules.html",[11,0.107,46,0.107,47,0.107,275,2.086]],["title/overview.html",[276,1.888]],["body/overview.html",[11,0.107,46,0.107,47,0.107,276,2.086]],["title/properties.html",[48,1.21,277,1.693]],["body/properties.html",[2,0.645,11,0.118,17,0.645,28,0.908,30,0.645,46,0.094,47,0.094,56,1.678,60,0.908,88,1.678,149,1.238,186,1.678,187,1.678,188,1.678,189,1.238,190,2.104,193,1.238,194,1.238,199,1.678,200,1.678,201,1.678,221,1.678,277,1.678,278,2.348,279,2.348,280,2.348,281,2.348,282,2.348,283,2.348,284,2.348,285,2.348,286,2.348,287,2.348,288,2.348,289,2.348,290,2.348,291,2.348,292,2.348,293,2.348,294,2.348]],["title/miscellaneous/typealiases.html",[59,0.655,295,2.369]],["body/miscellaneous/typealiases.html",[1,1.078,2,0.914,3,1.687,6,1.463,7,1.926,9,1.42,11,0.086,14,1.587,17,0.562,32,1.463,33,1.926,34,1.42,36,1.042,38,0.791,40,1.078,46,0.086,47,0.086,59,0.791,61,1.078,71,1.463,72,1.926,76,1.078,77,1.926,89,1.42,95,1.463,100,1.463,101,1.463,144,1.463,179,1.463,189,1.078,193,1.078,194,1.078,231,1.463,260,1.463,296,2.046,297,2.046,298,2.046,299,2.694,300,2.046,301,2.046,302,2.046,303,2.046,304,2.046,305,2.046,306,2.046,307,2.046,308,2.046,309,2.046,310,2.046,311,2.046,312,2.046,313,2.046,314,2.046,315,2.046,316,2.046,317,2.046,318,2.046,319,2.046,320,2.046,321,2.046,322,2.046,323,2.046,324,2.046,325,2.046,326,2.046]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0.5.0",{"_index":56,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0.5.15",{"_index":51,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":12,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":10,"title":{},"body":{"coverage.html":{}}}],["4.1.0",{"_index":53,"title":{},"body":{"dependencies.html":{}}}],["absolute",{"_index":83,"title":{},"body":{"miscellaneous/functions.html":{}}}],["absolutepath",{"_index":304,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["access",{"_index":147,"title":{},"body":{"miscellaneous/functions.html":{}}}],["add",{"_index":210,"title":{},"body":{"index.html":{}}}],["alias",{"_index":8,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":296,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["array",{"_index":75,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asynchronously",{"_index":73,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":152,"title":{},"body":{"miscellaneous/functions.html":{}}}],["author",{"_index":292,"title":{},"body":{"properties.html":{}}}],["base",{"_index":179,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["based",{"_index":84,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["before",{"_index":165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["behaviors",{"_index":306,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["below",{"_index":314,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["brightline",{"_index":294,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":251,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":286,"title":{},"body":{"properties.html":{}}}],["check",{"_index":122,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["checks",{"_index":119,"title":{},"body":{"miscellaneous/functions.html":{}}}],["child",{"_index":175,"title":{},"body":{"miscellaneous/functions.html":{}}}],["childpath",{"_index":173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["commonfileoptions",{"_index":9,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["compatibility",{"_index":254,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":93,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configure",{"_index":305,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["conforming",{"_index":160,"title":{},"body":{"miscellaneous/functions.html":{}}}],["consider",{"_index":236,"title":{},"body":{"index.html":{}}}],["consistent",{"_index":168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contact",{"_index":271,"title":{},"body":{"index.html":{}}}],["content",{"_index":135,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contents",{"_index":131,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contextualize",{"_index":326,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["contributions",{"_index":240,"title":{},"body":{"index.html":{}}}],["convert",{"_index":180,"title":{},"body":{"miscellaneous/functions.html":{}}}],["converts",{"_index":174,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coverage",{"_index":0,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creates",{"_index":139,"title":{},"body":{"miscellaneous/functions.html":{}}}],["current",{"_index":158,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cwd",{"_index":156,"title":{},"body":{"miscellaneous/functions.html":{}}}],["data",{"_index":200,"title":{},"body":{"index.html":{},"properties.html":{}}}],["date",{"_index":244,"title":{},"body":{"index.html":{}}}],["default",{"_index":154,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defaults",{"_index":157,"title":{},"body":{"miscellaneous/functions.html":{}}}],["define",{"_index":300,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["defines",{"_index":316,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dependencies",{"_index":49,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":88,"title":{},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["designed",{"_index":191,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":309,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["developer",{"_index":272,"title":{},"body":{"index.html":{}}}],["developers",{"_index":205,"title":{},"body":{"index.html":{}}}],["development",{"_index":239,"title":{},"body":{"index.html":{}}}],["dir.ts",{"_index":24,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["directories",{"_index":149,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["directory",{"_index":76,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["dirs",{"_index":15,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dirs(root",{"_index":70,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dirs.ts",{"_index":213,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["e.g",{"_index":114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["efficient",{"_index":187,"title":{},"body":{"index.html":{},"properties.html":{}}}],["effort",{"_index":233,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":167,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["ensures",{"_index":176,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":151,"title":{},"body":{"miscellaneous/functions.html":{}}}],["escape",{"_index":153,"title":{},"body":{"miscellaneous/functions.html":{}}}],["essential",{"_index":203,"title":{},"body":{"index.html":{}}}],["even",{"_index":259,"title":{},"body":{"index.html":{}}}],["example",{"_index":208,"title":{},"body":{"index.html":{}}}],["extends",{"_index":116,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":124,"title":{},"body":{"miscellaneous/functions.html":{}}}],["features",{"_index":257,"title":{},"body":{"index.html":{}}}],["file",{"_index":2,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["file.ts",{"_index":19,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["filename",{"_index":108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filepath",{"_index":106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["files",{"_index":17,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["files(root",{"_index":98,"title":{},"body":{"miscellaneous/functions.html":{}}}],["files.ts",{"_index":21,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["find",{"_index":214,"title":{},"body":{"index.html":{}}}],["findfile",{"_index":20,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["findfile(filepath",{"_index":102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findfiles",{"_index":22,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["findfiles(filepath",{"_index":117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["finds",{"_index":103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["first",{"_index":104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fixes",{"_index":252,"title":{},"body":{"index.html":{}}}],["form",{"_index":181,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formats",{"_index":201,"title":{},"body":{"index.html":{},"properties.html":{}}}],["formatting",{"_index":170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fs",{"_index":283,"title":{},"body":{"properties.html":{}}}],["function",{"_index":14,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":60,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["funding",{"_index":223,"title":{},"body":{"index.html":{}}}],["general",{"_index":265,"title":{},"body":{"index.html":{}}}],["getting",{"_index":182,"title":{"index.html":{}},"body":{}}],["given",{"_index":105,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":249,"title":{},"body":{"index.html":{}}}],["handle",{"_index":219,"title":{},"body":{"index.html":{}}}],["handling",{"_index":279,"title":{},"body":{"properties.html":{}}}],["help",{"_index":241,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":284,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":291,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":287,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/fs",{"_index":285,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":4,"title":{},"body":{"coverage.html":{}}}],["improvements",{"_index":262,"title":{},"body":{"index.html":{}}}],["include",{"_index":110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["index",{"_index":61,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["individual",{"_index":312,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["information",{"_index":310,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["install",{"_index":207,"title":{},"body":{"index.html":{}}}],["instant",{"_index":248,"title":{},"body":{"index.html":{}}}],["isdir",{"_index":25,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdir(filepath",{"_index":118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isfile",{"_index":26,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isfile(filepath",{"_index":126,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":226,"title":{},"body":{"index.html":{}}}],["js",{"_index":52,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":28,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["keep",{"_index":267,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":281,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":255,"title":{},"body":{"index.html":{}}}],["library",{"_index":190,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":288,"title":{},"body":{"properties.html":{}}}],["lightweight",{"_index":186,"title":{},"body":{"index.html":{},"properties.html":{}}}],["link",{"_index":161,"title":{},"body":{"miscellaneous/functions.html":{}}}],["list",{"_index":212,"title":{},"body":{"index.html":{}}}],["listing",{"_index":307,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["literal",{"_index":315,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintained",{"_index":247,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":230,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":266,"title":{},"body":{"index.html":{}}}],["make",{"_index":258,"title":{},"body":{"index.html":{}}}],["making",{"_index":202,"title":{},"body":{"index.html":{}}}],["manage",{"_index":198,"title":{},"body":{"index.html":{}}}],["matching",{"_index":47,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":59,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":289,"title":{},"body":{"properties.html":{}}}],["modules",{"_index":275,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":260,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["multiple",{"_index":215,"title":{},"body":{"index.html":{}}}],["name",{"_index":86,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["new",{"_index":43,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["normalize",{"_index":325,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["normalized",{"_index":177,"title":{},"body":{"miscellaneous/functions.html":{}}}],["normalizes",{"_index":164,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":133,"title":{},"body":{"miscellaneous/functions.html":{}}}],["offers",{"_index":195,"title":{},"body":{"index.html":{}}}],["one",{"_index":320,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ongoing",{"_index":238,"title":{},"body":{"index.html":{}}}],["open",{"_index":227,"title":{},"body":{"index.html":{}}}],["operate",{"_index":80,"title":{},"body":{"miscellaneous/functions.html":{}}}],["operation",{"_index":299,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["operations",{"_index":194,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["optional",{"_index":87,"title":{},"body":{"miscellaneous/functions.html":{}}}],["options",{"_index":72,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["options.ts",{"_index":7,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["otherwise",{"_index":125,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":264,"title":{},"body":{"index.html":{}}}],["outer",{"_index":148,"title":{},"body":{"miscellaneous/functions.html":{}}}],["output",{"_index":301,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["overview",{"_index":276,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":48,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":85,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsed",{"_index":134,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parses",{"_index":129,"title":{},"body":{"miscellaneous/functions.html":{}}}],["path",{"_index":89,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["path.ts",{"_index":41,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["paths",{"_index":77,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pattern",{"_index":107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["patterns",{"_index":113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["peer",{"_index":54,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":235,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":209,"title":{},"body":{"index.html":{}}}],["points",{"_index":121,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portion",{"_index":109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["powerful",{"_index":261,"title":{},"body":{"index.html":{}}}],["prevents",{"_index":146,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processing",{"_index":308,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["project",{"_index":229,"title":{},"body":{"index.html":{}}}],["promise",{"_index":96,"title":{},"body":{"miscellaneous/functions.html":{}}}],["properties",{"_index":277,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["property",{"_index":313,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["provided",{"_index":120,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":280,"title":{},"body":{"properties.html":{}}}],["puq",{"_index":282,"title":{},"body":{"properties.html":{}}}],["puq/debug",{"_index":55,"title":{},"body":{"dependencies.html":{}}}],["puq/error",{"_index":57,"title":{},"body":{"dependencies.html":{}}}],["puq/fs",{"_index":184,"title":{},"body":{"index.html":{}}}],["puq/fsfeatures",{"_index":211,"title":{},"body":{"index.html":{}}}],["puq/is",{"_index":58,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":217,"title":{},"body":{"index.html":{}}}],["reading",{"_index":216,"title":{},"body":{"index.html":{}}}],["readjsonfile",{"_index":29,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["readjsonfile(filepath",{"_index":127,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reads",{"_index":128,"title":{},"body":{"miscellaneous/functions.html":{}}}],["readyamlfile",{"_index":31,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["readyamlfile(filepath",{"_index":137,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recursive",{"_index":100,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["recursively",{"_index":81,"title":{},"body":{"miscellaneous/functions.html":{}}}],["refer",{"_index":311,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["regexp",{"_index":111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relative",{"_index":40,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["repository",{"_index":290,"title":{},"body":{"properties.html":{}}}],["represents",{"_index":319,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolution",{"_index":143,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolved",{"_index":322,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolver",{"_index":141,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolver.ts",{"_index":33,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resolves",{"_index":97,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolving",{"_index":317,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["restricts",{"_index":142,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":46,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieves",{"_index":74,"title":{},"body":{"miscellaneous/functions.html":{}}}],["return",{"_index":82,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returning",{"_index":130,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returns",{"_index":95,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["robert",{"_index":293,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":273,"title":{},"body":{"index.html":{}}}],["robust",{"_index":196,"title":{},"body":{"index.html":{}}}],["root",{"_index":79,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rootpath",{"_index":178,"title":{},"body":{"miscellaneous/functions.html":{}}}],["running",{"_index":268,"title":{},"body":{"index.html":{}}}],["scope",{"_index":36,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["scope(root",{"_index":138,"title":{},"body":{"miscellaneous/functions.html":{}}}],["scope.ts",{"_index":220,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":140,"title":{},"body":{"miscellaneous/functions.html":{}}}],["scoperesolver",{"_index":34,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["seamless",{"_index":192,"title":{},"body":{"index.html":{}}}],["search",{"_index":91,"title":{},"body":{"miscellaneous/functions.html":{}}}],["searching",{"_index":101,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["secure",{"_index":245,"title":{},"body":{"index.html":{}}}],["securely",{"_index":270,"title":{},"body":{"index.html":{}}}],["segments",{"_index":38,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["segments(filepath",{"_index":162,"title":{},"body":{"miscellaneous/functions.html":{}}}],["segments.ts",{"_index":222,"title":{},"body":{"index.html":{}}}],["separators",{"_index":169,"title":{},"body":{"miscellaneous/functions.html":{}}}],["set",{"_index":197,"title":{},"body":{"index.html":{}}}],["single",{"_index":321,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["smoothly",{"_index":269,"title":{},"body":{"index.html":{}}}],["source",{"_index":228,"title":{},"body":{"index.html":{}}}],["specific",{"_index":318,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["specified",{"_index":145,"title":{},"body":{"miscellaneous/functions.html":{}}}],["split",{"_index":171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splits",{"_index":163,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splitting",{"_index":166,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../common",{"_index":297,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../dirs.ts",{"_index":62,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../files.ts",{"_index":63,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../find",{"_index":64,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":65,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../read",{"_index":66,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../scope",{"_index":298,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../scope.ts",{"_index":67,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../segments.ts",{"_index":68,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../to",{"_index":69,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/common",{"_index":6,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/dirs.ts",{"_index":13,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/files.ts",{"_index":16,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/find",{"_index":18,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/is",{"_index":23,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/read",{"_index":27,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/scope",{"_index":32,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/scope.ts",{"_index":35,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/segments.ts",{"_index":37,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/to",{"_index":39,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":90,"title":{},"body":{"miscellaneous/functions.html":{}}}],["started",{"_index":183,"title":{"index.html":{}},"body":{}}],["starting",{"_index":78,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":5,"title":{},"body":{"coverage.html":{}}}],["stays",{"_index":242,"title":{},"body":{"index.html":{}}}],["string",{"_index":71,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["structured",{"_index":199,"title":{},"body":{"index.html":{},"properties.html":{}}}],["style",{"_index":112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["such",{"_index":303,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["summary",{"_index":185,"title":{},"body":{"index.html":{}}}],["support",{"_index":274,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":237,"title":{},"body":{"index.html":{}}}],["supports",{"_index":99,"title":{},"body":{"miscellaneous/functions.html":{}}}],["swc/helpers",{"_index":50,"title":{},"body":{"dependencies.html":{}}}],["system",{"_index":193,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["t",{"_index":136,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":45,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":44,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":231,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["tasks",{"_index":206,"title":{},"body":{"index.html":{}}}],["thank",{"_index":224,"title":{},"body":{"index.html":{}}}],["throwing",{"_index":150,"title":{},"body":{"miscellaneous/functions.html":{}}}],["time",{"_index":232,"title":{},"body":{"index.html":{}}}],["tool",{"_index":204,"title":{},"body":{"index.html":{}}}],["torelativepath",{"_index":42,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["torelativepath(rootpath",{"_index":172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toward",{"_index":250,"title":{},"body":{"index.html":{}}}],["traversal",{"_index":94,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":123,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ts",{"_index":115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":3,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":295,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":132,"title":{},"body":{"miscellaneous/functions.html":{}}}],["types",{"_index":302,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":188,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typically",{"_index":323,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["up",{"_index":243,"title":{},"body":{"index.html":{}}}],["updates",{"_index":253,"title":{},"body":{"index.html":{}}}],["used",{"_index":324,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["useful",{"_index":234,"title":{},"body":{"index.html":{}}}],["users",{"_index":263,"title":{},"body":{"index.html":{}}}],["using",{"_index":225,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":218,"title":{},"body":{"index.html":{}}}],["utility",{"_index":189,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["value",{"_index":155,"title":{},"body":{"miscellaneous/functions.html":{}}}],["version",{"_index":278,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":256,"title":{},"body":{"index.html":{}}}],["well",{"_index":246,"title":{},"body":{"index.html":{}}}],["within",{"_index":144,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["work",{"_index":221,"title":{},"body":{"index.html":{},"properties.html":{}}}],["working",{"_index":159,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["yaml",{"_index":30,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["yes",{"_index":92,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/lib/common-file-options.ts\n            \n            type alias\n            CommonFileOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/dirs.ts\n            \n            function\n            dirs\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/files.ts\n            \n            function\n            files\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/find-file.ts\n            \n            function\n            findFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/find-files.ts\n            \n            function\n            findFiles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/is-dir.ts\n            \n            function\n            isDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/is-file.ts\n            \n            function\n            isFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/read-json-file.ts\n            \n            function\n            readJSONFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/read-yaml-file.ts\n            \n            function\n            readYAMLFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/scope-resolver.ts\n            \n            type alias\n            ScopeResolver\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/scope.ts\n            \n            function\n            scope\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/segments.ts\n            \n            function\n            segments\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/to-relative-path.ts\n            \n            function\n            toRelativePath\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n        \n            js-yaml : ^4.1.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @puq/debug : ^0.5.0\n        \n            @puq/error : ^0.5.0\n        \n            @puq/is : ^0.5.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dirs   (src/.../dirs.ts)\n                        \n                        \n                            files   (src/.../files.ts)\n                        \n                        \n                            findFile   (src/.../find-file.ts)\n                        \n                        \n                            findFiles   (src/.../find-files.ts)\n                        \n                        \n                            isDir   (src/.../is-dir.ts)\n                        \n                        \n                            isFile   (src/.../is-file.ts)\n                        \n                        \n                            readJSONFile   (src/.../read-json-file.ts)\n                        \n                        \n                            readYAMLFile   (src/.../read-yaml-file.ts)\n                        \n                        \n                            scope   (src/.../scope.ts)\n                        \n                        \n                            segments   (src/.../segments.ts)\n                        \n                        \n                            toRelativePath   (src/.../to-relative-path.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/dirs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dirs\n                        \n                    \n                \n            \n            \n                \ndirs(root: string, options?: CommonFileOptions)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously retrieves an array of directory paths starting from a root directory.\nCan operate recursively and return either absolute or relative paths based on options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe root directory path to start the search from\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            CommonFileOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional configuration for directory traversal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an array of directory paths\n\n                            \n                \n            \n        \n    \n    src/lib/files.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n            \n                \nfiles(root: string, options?: CommonFileOptions)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously retrieves an array of file paths starting from a root directory.\nSupports recursive searching and can return either absolute or relative paths.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe root directory path to start the search from. Can be relative or absolute.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            CommonFileOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional configuration for file traversal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an array of file paths\n\n                            \n                \n            \n        \n    \n    src/lib/find-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findFile\n                        \n                    \n                \n            \n            \n                \nfindFile(filepath: string, options?: CommonFileOptions)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously finds the first file matching a given filepath pattern.\nThe filename portion can include RegExp-style patterns (e.g., '.ts$').\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file path or pattern to search for. Can be absolute or relative.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            CommonFileOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional configuration for file searching, extends CommonFileOptions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the absolute path of the first matching file\n\n                            \n                \n            \n        \n    \n    src/lib/find-files.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findFiles\n                        \n                    \n                \n            \n            \n                \nfindFiles(filepath: string, options?: CommonFileOptions)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously finds all files matching a given filepath pattern.\nThe filename portion can include RegExp-style patterns (e.g., '.ts$').\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file path or pattern to search for. Can be absolute or relative.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            CommonFileOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional configuration for file searching, extends CommonFileOptions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an array of matching file paths\n\n                            \n                \n            \n        \n    \n    src/lib/is-dir.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDir\n                        \n                    \n                \n            \n            \n                \nisDir(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously checks if the provided filepath points to a directory.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe path to check. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to true if the path is a directory, false otherwise\n\n                            \n                \n            \n        \n    \n    src/lib/is-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isFile\n                        \n                    \n                \n            \n            \n                \nisFile(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously checks if the provided filepath points to a file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe path to check. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to true if the path is a directory, false otherwise\n\n                            \n                \n            \n        \n    \n    src/lib/read-json-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        readJSONFile\n                        \n                    \n                \n            \n            \n                \nreadJSONFile(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously reads and parses a JSON file, returning its contents as a typed object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe path to the JSON file. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the parsed JSON content typed as T\n\n                            \n                \n            \n        \n    \n    src/lib/read-yaml-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        readYAMLFile\n                        \n                    \n                \n            \n            \n                \nreadYAMLFile(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Asynchronously reads and parses a YAML file, returning its contents as a typed object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe path to the YAML file. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the parsed YAML content typed as T\n\n                            \n                \n            \n        \n    \n    src/lib/scope.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(root)\n                \n            \n\n\n\n\n            \n                \n                        Creates a scoped path resolver that restricts path resolution to within a specified root directory.\nPrevents access to outer directories by throwing an error if resolution attempts to escape the scope.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                root\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    cwd()\n                                            \n\n                                            \n                                                    \nThe root directory to scope path resolution to. Defaults to the current working directory.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ScopeResolver\n\n                        \n                            \n                                A scoped resolver function conforming to {@link ScopeResolver}\n\n                            \n                \n            \n        \n    \n    src/lib/segments.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Splits a file path into an array of path segments.\nNormalizes the path before splitting to ensure consistent separators and formatting.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file path to split into segments. Can be absolute or relative.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Array\n\n                        \n                            \n                                \n{@link Array} An array of path segments\n\n\n                            \n                \n            \n        \n    \n    src/lib/to-relative-path.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toRelativePath\n                        \n                    \n                \n            \n            \n                \ntoRelativePath(rootPath: string, childPath: string)\n                \n            \n\n\n\n\n            \n                \n                        Converts an absolute child path to a relative path based on a root path.\nEnsures the child path is within the root path and returns a normalized relative path.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rootPath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe root directory path to base the relative path on\n\n\n                                            \n                                        \n                                        \n                                                childPath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe absolute path to convert to relative form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/fs\nSummary\n@puq/fs is a lightweight, efficient TypeScript utility library designed for seamless file system operations. It offers a robust set of functions to manage directories, files, and structured data formats like JSON and YAML, making it an essential tool for developers working with file-based tasks.\nInstall\nExample :  pnpm add @puq/fsFeatures\n\nDirectory Operations\n\nList directories (dirs.ts)\nCheck if a path is a directory (is-dir.ts)\n\n\nFile Operations\n\nList files (files.ts)\nCheck if a path is a file (is-file.ts)\nFind a matching file (find-file.ts)\nFind multiple matching files (find-files.ts)\n\n\nFile Reading\n\nRead JSON files (read-json-file.ts)\nRead YAML files (read-yaml-file.ts)\n\n\nPath Utilities\n\nHandle file system scope (scope.ts)\nWork with path segments (segments.ts)\n\n\n\nFunding\nThank you for using @puq/fs It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\n💲💲 Instant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\n💰 Support the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.5.0\n        \n            Description : A lightweight and efficient TypeScript utility library for handling file system operations. This library provides functions to work with directories, files, and structured data formats like JSON and YAML.\n        \n            Keywords : puq, fs\n        \n            Homepage : https://rbrightline.github.io/puq/fs\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommonFileOptions   (src/.../common-file-options.ts)\n                        \n                        \n                            ScopeResolver   (src/.../scope-resolver.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/common-file-options.ts\n    \n    \n        \n            \n                \n                    \n                    CommonFileOptions\n                \n            \n            \n                \n                    File operation options to define output and operation types such as recursive and absolutePath.\nThese options configure behaviors for file system operations like searching, listing, or processing files.\nFor detailed information, refer to the individual property documentation below.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/scope-resolver.ts\n    \n    \n        \n            \n                \n                    \n                    ScopeResolver\n                \n            \n            \n                \n                    Defines a function type for resolving file paths within a specific scope.\nThis type represents a utility function that takes one or more path segments\nand returns a single resolved path string, typically used to normalize or\ncontextualize paths relative to a base directory or scope.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
