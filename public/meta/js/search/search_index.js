var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ResourceMetadataManager.html",[0,0.656,1,0.876]],["body/classes/ResourceMetadataManager.html",[0,1.098,1,0.421,2,1.018,3,0.568,4,0.415,5,0.415,6,1.623,7,0.567,8,0.314,9,1.701,10,0.553,11,0.553,12,0.815,13,0.893,14,1,15,0.679,16,1.613,17,1,18,0.774,19,0.553,20,1,21,0.553,22,0.893,23,0.553,24,1.54,25,1.792,26,0.893,27,1.827,28,0.679,29,0.731,30,0.553,31,1,32,0.731,33,1,34,0.553,35,1.995,36,1,37,1,38,0.731,39,0.731,40,1,41,1,42,1,43,1,44,1,45,2.028,46,1.613,47,1.613,48,1,49,0.731,50,1,51,1.6,52,2.694,53,0.553,54,0.731,55,0.731,56,1,57,1.482,58,1,59,1,60,1,61,0.731,62,0.979,63,1,64,1.179,65,1.613,66,1,67,1,68,1.34,69,1.108,70,1,71,1,72,0.893,73,1,74,0.731,75,1.6,76,1.465,77,0.731,78,1,79,1,80,0.741,81,2.028,82,0.11,83,1,84,1,85,1,86,2.189,87,2.028,88,2.028,89,1,90,1,91,1,92,1,93,1,94,1,95,0.731,96,1,97,1,98,1,99,1,100,0.421,101,2.184,102,1,103,2.73,104,1,105,1,106,1,107,1.613,108,1.789,109,0.741,110,1,111,1.018,112,1.018,113,1,114,1,115,0.239,116,0.553,117,2.649,118,2.39,119,1.731,120,0.98,121,1.613,122,2.028,123,2.028,124,1,125,2.872,126,0.568,127,2.553,128,2.327,129,1,130,0.568,131,1,132,0.568,133,1,134,0.568,135,1,136,0.568,137,1,138,0.568,139,1,140,3.445,141,0.568,142,2.184,143,1.701,144,2.367,145,1.701,146,1,147,0.568,148,1,149,1,150,0.568,151,1.613,152,1,153,0.568,154,1,155,0.568,156,1,157,0.568,158,1,159,0.568,160,1.34,161,0.568,162,0.568,163,1,164,1.613,165,0.415,166,1.34,167,2.327,168,0.568,169,0.568,170,0.568,171,0.415,172,0.568,173,0.415,174,0.568,175,0.568,176,2.448,177,2.028,178,0.568,179,1,180,0.568,181,1,182,0.568,183,1,184,0.568,185,0.568,186,0.568,187,0.568,188,0.568,189,0.568,190,0.568,191,0.568,192,0.568,193,0.568,194,0.568,195,0.568,196,0.568,197,0.568,198,0.568,199,0.568,200,0.568,201,0.568,202,0.568,203,0.027,204,0.027]],["title/coverage.html",[205,2.03]],["body/coverage.html",[0,0.832,1,1.111,5,1.928,6,1.935,7,0.53,8,1.935,12,0.734,69,1.148,82,0.104,109,1.46,112,1.46,143,1.928,203,0.087,204,0.087,205,1.928,206,1.928,207,2.639,208,2.639,209,2.639,210,2.639,211,3.496,212,3.496,213,3.496,214,1.789,215,1.789,216,1.928,217,1.928,218,2.639,219,2.639,220,1.928,221,2.639,222,2.639]],["title/dependencies.html",[223,1.294,224,1.376]],["body/dependencies.html",[7,0.45,18,1.249,64,2.168,82,0.106,203,0.094,204,0.094,224,1.919,225,2.967,226,2.967,227,2.967,228,3.468,229,2.967,230,2.967]],["title/miscellaneous/functions.html",[231,0.745,232,1.817]],["body/miscellaneous/functions.html",[0,1.097,1,1.101,7,0.397,12,0.847,15,1.101,24,1.101,28,1.101,69,0.824,75,2.35,76,1.447,80,1.447,82,0.104,100,1.101,108,1.911,111,1.447,115,1.101,118,2.35,119,1.447,120,1.101,142,1.911,144,1.911,145,1.911,203,0.087,204,0.087,214,1.447,215,1.779,216,2.544,231,1.101,232,1.911,233,1.911,234,2.615,235,3.215,236,2.615,237,2.615,238,2.615,239,2.615,240,2.615,241,2.615,242,2.615,243,3.215]],["title/index.html",[115,0.745,244,1.771,245,1.771]],["body/index.html",[2,1.506,4,1.476,7,0.549,10,1.117,11,1.117,12,0.699,13,1.506,15,1.296,18,1.146,19,1.903,21,1.117,22,1.117,23,1.117,24,1.146,25,1.704,26,1.117,27,1.704,28,1.146,29,1.476,30,1.117,32,1.476,34,1.117,35,1.476,38,1.476,39,1.476,49,1.989,51,1.476,52,1.476,53,1.117,54,1.476,55,1.476,57,1.476,61,1.476,62,1.476,69,0.858,72,1.117,74,1.476,77,1.476,80,1.117,82,0.083,95,1.476,100,0.85,101,1.476,117,1.476,119,1.117,120,1.296,203,0.074,204,0.074,206,1.476,220,1.476,224,1.117,246,2.722,247,2.019,248,1.476,249,1.476,250,1.476,251,1.476,252,1.476,253,2.019,254,2.019,255,2.019,256,2.019,257,2.019,258,2.019,259,2.019,260,2.019,261,2.019,262,2.019,263,2.019,264,2.019,265,2.019,266,2.019,267,2.019,268,2.019,269,2.722,270,2.019,271,2.019,272,2.019,273,2.019,274,2.019,275,2.019,276,2.019,277,2.019,278,2.019,279,2.019,280,2.019,281,2.019,282,2.722,283,2.722,284,2.019,285,2.019,286,2.019,287,2.019,288,2.019,289,2.019,290,2.019,291,2.722,292,2.019,293,2.019,294,2.019,295,2.019,296,2.019,297,2.019,298,2.019,299,2.019,300,2.019,301,2.019,302,2.019,303,2.019,304,2.019,305,2.019,306,2.019,307,2.019,308,2.019,309,2.019,310,2.019,311,2.019,312,2.019,313,2.019,314,2.722,315,2.019]],["title/modules.html",[316,2.03]],["body/modules.html",[82,0.097,203,0.097,204,0.097,316,2.286]],["title/overview.html",[317,2.03]],["body/overview.html",[0,0.979,82,0.096,173,2.27,203,0.096,204,0.096,317,2.27]],["title/properties.html",[116,1.376,223,1.294]],["body/properties.html",[2,1.438,7,0.527,9,1.899,10,1.438,11,1.438,12,0.727,13,1.438,15,1.094,18,1.094,19,1.438,21,1.438,22,1.438,23,1.438,24,1.094,25,1.438,26,1.438,27,1.438,28,1.094,30,1.438,34,1.438,53,1.438,72,1.438,82,0.106,100,1.094,116,1.438,120,1.094,203,0.087,204,0.087,248,1.899,249,1.899,250,1.899,251,1.899,252,1.899,318,2.599,319,2.599,320,2.599,321,2.599,322,2.599,323,2.599,324,2.599,325,2.599,326,2.599,327,2.599,328,2.599,329,2.599,330,2.599,331,2.599,332,2.599,333,2.599]],["title/miscellaneous/typealiases.html",[231,0.745,334,2.487]],["body/miscellaneous/typealiases.html",[6,1.521,7,0.583,8,1.969,12,0.808,69,1.164,76,1.521,82,0.09,109,1.834,111,1.521,112,1.834,115,1.157,165,2.009,171,2.009,203,0.09,204,0.09,214,1.521,215,1.834,217,2.422,231,1.157,233,2.009,335,2.749,336,3.315,337,3.559]]],"invertedIndex":[["",{"_index":82,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":218,"title":{},"body":{"coverage.html":{}}}],["0.2.2",{"_index":230,"title":{},"body":{"dependencies.html":{}}}],["0.4.20",{"_index":319,"title":{},"body":{"properties.html":{}}}],["0.5.15",{"_index":226,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":219,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":173,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"overview.html":{}}}],["1/1",{"_index":213,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":212,"title":{},"body":{"coverage.html":{}}}],["14/15",{"_index":210,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":174,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["93",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["__entityfactory",{"_index":179,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__metadata__:any",{"_index":242,"title":{},"body":{"miscellaneous/functions.html":{}}}],["__names",{"_index":183,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__names.classname",{"_index":189,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__paths",{"_index":181,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["access",{"_index":28,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["accessor",{"_index":79,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["add",{"_index":264,"title":{},"body":{"index.html":{}}}],["alias",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":335,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["api",{"_index":39,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["apis",{"_index":251,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application",{"_index":14,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["attach",{"_index":20,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["authentication",{"_index":169,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["authentication/authorization",{"_index":61,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["author",{"_index":331,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":170,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["avoid",{"_index":105,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["before",{"_index":94,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["boolean",{"_index":151,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["brightline",{"_index":333,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":294,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":325,"title":{},"body":{"properties.html":{}}}],["bypass",{"_index":62,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["class",{"_index":0,"title":{"classes/ResourceMetadataManager.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["collisions",{"_index":106,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["columns",{"_index":172,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["compatibility",{"_index":297,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":110,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["configured",{"_index":44,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["consider",{"_index":277,"title":{},"body":{"index.html":{}}}],["console.log(metadata.ispublic",{"_index":91,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["console.log(metadata.resourcename",{"_index":90,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["const",{"_index":88,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["constructor",{"_index":177,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["contact",{"_index":313,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":281,"title":{},"body":{"index.html":{}}}],["control",{"_index":29,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["controller",{"_index":235,"title":{},"body":{"miscellaneous/functions.html":{}}}],["conventions",{"_index":67,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["coverage",{"_index":205,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":165,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/typealiases.html":{}}}],["created",{"_index":171,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/typealiases.html":{}}}],["custom",{"_index":257,"title":{},"body":{"index.html":{}}}],["database",{"_index":41,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["date",{"_index":286,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":75,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":46,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["default",{"_index":122,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["define",{"_index":250,"title":{},"body":{"index.html":{},"properties.html":{}}}],["defined",{"_index":125,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["definitions",{"_index":70,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["dependencies",{"_index":224,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"properties.html":{}}}],["designation",{"_index":60,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["designed",{"_index":31,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["developer",{"_index":314,"title":{},"body":{"index.html":{}}}],["development",{"_index":280,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":206,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["driven",{"_index":33,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["dynamically",{"_index":43,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["e.g",{"_index":35,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["easy",{"_index":261,"title":{},"body":{"index.html":{}}}],["effort",{"_index":273,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":40,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ensure",{"_index":283,"title":{},"body":{"index.html":{}}}],["entities",{"_index":22,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["entity",{"_index":24,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["entity(target",{"_index":139,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["entityclass",{"_index":240,"title":{},"body":{"miscellaneous/functions.html":{}}}],["even",{"_index":301,"title":{},"body":{"index.html":{}}}],["example",{"_index":80,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["expects",{"_index":97,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["export",{"_index":166,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["factory",{"_index":51,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["features",{"_index":49,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{}}}],["find",{"_index":274,"title":{},"body":{"index.html":{}}}],["first",{"_index":237,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fixes",{"_index":295,"title":{},"body":{"index.html":{}}}],["flags",{"_index":30,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["frameworks",{"_index":34,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["function",{"_index":143,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{}}}],["functions",{"_index":232,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funding",{"_index":291,"title":{},"body":{"index.html":{}}}],["general",{"_index":307,"title":{},"body":{"index.html":{}}}],["generic",{"_index":56,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["generics",{"_index":256,"title":{},"body":{"index.html":{}}}],["get(target",{"_index":146,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["getting",{"_index":244,"title":{"index.html":{}},"body":{}}],["go",{"_index":292,"title":{},"body":{"index.html":{}}}],["help",{"_index":282,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":323,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":330,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":326,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/meta",{"_index":324,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":207,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":83,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["import",{"_index":164,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["imported",{"_index":93,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["improvements",{"_index":304,"title":{},"body":{"index.html":{}}}],["index",{"_index":115,"title":{"index.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["individual",{"_index":78,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["install",{"_index":262,"title":{},"body":{"index.html":{}}}],["instant",{"_index":290,"title":{},"body":{"index.html":{}}}],["integrates",{"_index":63,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["involves",{"_index":73,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic",{"_index":86,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic(target",{"_index":149,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic:true",{"_index":241,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":267,"title":{},"body":{"index.html":{}}}],["keep",{"_index":309,"title":{},"body":{"index.html":{}}}],["key",{"_index":48,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["keys",{"_index":101,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["keys(target",{"_index":152,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["keywords",{"_index":320,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":298,"title":{},"body":{"index.html":{}}}],["leverages",{"_index":17,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["library",{"_index":19,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["license",{"_index":327,"title":{},"body":{"properties.html":{}}}],["link",{"_index":108,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["literal",{"_index":337,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintained",{"_index":289,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":270,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":308,"title":{},"body":{"index.html":{}}}],["make",{"_index":300,"title":{},"body":{"index.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager.ts:109",{"_index":126,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:114",{"_index":134,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:119",{"_index":130,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:124",{"_index":136,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:129",{"_index":132,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:134",{"_index":138,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:141",{"_index":162,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:161",{"_index":147,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:176",{"_index":150,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:184",{"_index":141,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:193",{"_index":157,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:202",{"_index":155,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:211",{"_index":153,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:220",{"_index":159,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["managing",{"_index":11,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["mark",{"_index":259,"title":{},"body":{"index.html":{}}}],["matching",{"_index":204,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["meta",{"_index":322,"title":{},"body":{"properties.html":{}}}],["metadata",{"_index":7,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["metadata.decorator.ts",{"_index":215,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["method",{"_index":236,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":57,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["miscellaneous",{"_index":231,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":328,"title":{},"body":{"properties.html":{}}}],["module",{"_index":248,"title":{},"body":{"index.html":{},"properties.html":{}}}],["modules",{"_index":316,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":302,"title":{},"body":{"index.html":{}}}],["myclass.prototype",{"_index":99,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["name",{"_index":119,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":25,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["names(__entityfactory().name",{"_index":184,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["names(target",{"_index":154,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["naming",{"_index":65,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["need",{"_index":42,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["nestjs",{"_index":36,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["new",{"_index":220,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ongoing",{"_index":279,"title":{},"body":{"index.html":{}}}],["open",{"_index":268,"title":{},"body":{"index.html":{}}}],["optional",{"_index":145,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":111,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["options.entity",{"_index":180,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["options.ispublic",{"_index":191,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["options.target.constructor",{"_index":178,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["orms",{"_index":252,"title":{},"body":{"index.html":{},"properties.html":{}}}],["out",{"_index":306,"title":{},"body":{"index.html":{}}}],["overview",{"_index":317,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":223,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":176,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["parameter",{"_index":96,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["parameters",{"_index":142,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":148,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["path",{"_index":66,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["paths",{"_index":27,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["paths(__entityfactory().name",{"_index":182,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["paths(target",{"_index":156,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["peer",{"_index":229,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":276,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":263,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":303,"title":{},"body":{"index.html":{}}}],["project",{"_index":269,"title":{},"body":{"index.html":{}}}],["properties",{"_index":116,"title":{"properties.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"properties.html":{}}}],["property",{"_index":238,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertydecorator",{"_index":243,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prototype",{"_index":98,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["provides",{"_index":53,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["public",{"_index":120,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["public/private",{"_index":59,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["puq",{"_index":321,"title":{},"body":{"properties.html":{}}}],["puq/is",{"_index":227,"title":{},"body":{"dependencies.html":{}}}],["puq/meta",{"_index":246,"title":{},"body":{"index.html":{}}}],["puq/metafunding",{"_index":265,"title":{},"body":{"index.html":{}}}],["puq/names",{"_index":64,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"dependencies.html":{}}}],["puq/type",{"_index":68,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["readonly",{"_index":118,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":18,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["reflect.definemetadata(this.entity",{"_index":185,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.name",{"_index":188,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.names",{"_index":187,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.paths",{"_index":186,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.public",{"_index":190,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.entity",{"_index":198,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.keys",{"_index":201,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.name",{"_index":202,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.names",{"_index":200,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.paths",{"_index":199,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.public",{"_index":197,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflection",{"_index":16,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflector",{"_index":128,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["remarks",{"_index":175,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["repository",{"_index":329,"title":{},"body":{"properties.html":{}}}],["requests",{"_index":168,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["requires",{"_index":92,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resource",{"_index":12,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["resourcecontroller",{"_index":239,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resourcemetadata",{"_index":112,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resourcemetadatamanager",{"_index":1,"title":{"classes/ResourceMetadataManager.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["resourcemetadatamanager.get(userresource.prototype",{"_index":89,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcemetadatamanager.set",{"_index":84,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcemetadataoptions",{"_index":109,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resourcename",{"_index":121,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcename(target",{"_index":158,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resources",{"_index":38,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["rest",{"_index":26,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["results",{"_index":203,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieve",{"_index":21,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["retrieved",{"_index":114,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["retrieving",{"_index":77,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["return",{"_index":167,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["returns",{"_index":144,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["robert",{"_index":332,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":315,"title":{},"body":{"index.html":{}}}],["running",{"_index":310,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":47,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["safety",{"_index":255,"title":{},"body":{"index.html":{}}}],["secure",{"_index":287,"title":{},"body":{"index.html":{}}}],["securely",{"_index":312,"title":{},"body":{"index.html":{}}}],["see",{"_index":107,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["set",{"_index":76,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["set(options",{"_index":161,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["setresourcemetadata",{"_index":216,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setresourcemetadata(options",{"_index":234,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setresourcemetadataoptions",{"_index":217,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["setting",{"_index":74,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["simple",{"_index":260,"title":{},"body":{"index.html":{}}}],["smoothly",{"_index":311,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["src/.../resource",{"_index":336,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../set",{"_index":233,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/resource",{"_index":6,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/set",{"_index":214,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":245,"title":{"index.html":{}},"body":{}}],["statements",{"_index":208,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":117,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["stays",{"_index":284,"title":{},"body":{"index.html":{}}}],["storage",{"_index":253,"title":{},"body":{"index.html":{}}}],["store",{"_index":254,"title":{},"body":{"index.html":{}}}],["stored",{"_index":102,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["stores",{"_index":50,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["string",{"_index":160,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["strongly",{"_index":54,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["structure",{"_index":113,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["such",{"_index":23,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["summary",{"_index":247,"title":{},"body":{"index.html":{}}}],["support",{"_index":32,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["supporting",{"_index":278,"title":{},"body":{"index.html":{}}}],["supports",{"_index":58,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["swc/helpers",{"_index":225,"title":{},"body":{"dependencies.html":{}}}],["symbol",{"_index":127,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:class",{"_index":124,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:keys",{"_index":129,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:names",{"_index":133,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('is:public",{"_index":137,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('resource:name",{"_index":131,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('rest:paths",{"_index":135,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbols",{"_index":104,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["t",{"_index":140,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["table",{"_index":222,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":221,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":271,"title":{},"body":{"index.html":{}}}],["target",{"_index":52,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["thank",{"_index":266,"title":{},"body":{"index.html":{}}}],["this.entity(target",{"_index":192,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.ispublic(target",{"_index":196,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.names(target",{"_index":193,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.paths(target",{"_index":194,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.resourcename(target",{"_index":195,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["time",{"_index":272,"title":{},"body":{"index.html":{}}}],["toward",{"_index":293,"title":{},"body":{"index.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["type",{"_index":69,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":334,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":55,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["typeorm",{"_index":37,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["types",{"_index":258,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":13,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["typically",{"_index":72,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["unique",{"_index":103,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["up",{"_index":285,"title":{},"body":{"index.html":{}}}],["updates",{"_index":296,"title":{},"body":{"index.html":{}}}],["usage",{"_index":71,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["use",{"_index":95,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["used",{"_index":100,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["useful",{"_index":275,"title":{},"body":{"index.html":{}}}],["userresource",{"_index":81,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["userresource.prototype",{"_index":85,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["users",{"_index":305,"title":{},"body":{"index.html":{}}}],["using",{"_index":15,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["utility",{"_index":10,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["value",{"_index":123,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["version",{"_index":318,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":299,"title":{},"body":{"index.html":{}}}],["via",{"_index":45,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["void",{"_index":163,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["way",{"_index":249,"title":{},"body":{"index.html":{},"properties.html":{}}}],["well",{"_index":288,"title":{},"body":{"index.html":{}}}],["workspace",{"_index":228,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ResourceMetadataManager.html":{"url":"classes/ResourceMetadataManager.html","title":"class - ResourceMetadataManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceMetadataManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/resource-metadata-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for managing resource metadata in a TypeScript application using reflection.\nThis class leverages the reflect-metadata library to attach and retrieve metadata for resource entities,\nsuch as entity classes, names, REST paths, and access control flags. It is designed to support metadata-driven\nframeworks (e.g., NestJS, TypeORM) where resources (e.g., API endpoints, database entities) need to be\ndynamically configured via decorators or runtime reflection.\nKey features:\n\nStores metadata (e.g., entity factory, resource names, paths) on target classes.\nProvides strongly-typed access to metadata via generic methods.\nSupports public/private resource designation for authentication/authorization bypass.\nIntegrates with @puq/names for naming and path conventions and @puq/type for type definitions.\n\nUsage typically involves:\n\nSetting metadata on a target class (e.g., via a decorator) using set.\nRetrieving metadata at runtime with get or individual accessor methods (e.g., entity, paths).\n\nExample :```typescript\nclass UserResource {\n  // Resource implementation\n}// Set metadata\nResourceMetadataManager.set({\n  target: UserResource.prototype,\n  entity: () => UserResource,\n  isPublic: true,\n});\n// Get metadata\nconst metadata = ResourceMetadataManager.get(UserResource.prototype);\nconsole.log(metadata.resourceName); // \"UserResource\"\nconsole.log(metadata.isPublic);     // true\nExample :\n- Requires `reflect-metadata` to be imported before use.\n- The `target` parameter typically expects a class prototype (e.g., `MyClass.prototype`) when used with decorators.\n- Metadata keys are stored as unique symbols to avoid naming collisions.\n\nSee {@link ResourceMetadataOptions} for metadata configuration options.\nSee {@link ResourceMetadata} for the structure of retrieved metadata.\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                ENTITY\n                            \n                            \n                                    Static\n                                    Readonly\n                                KEYS\n                            \n                            \n                                    Static\n                                    Readonly\n                                NAME\n                            \n                            \n                                    Static\n                                    Readonly\n                                NAMES\n                            \n                            \n                                    Static\n                                    Readonly\n                                PATHS\n                            \n                            \n                                    Static\n                                    Readonly\n                                PUBLIC\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                entity\n                            \n                            \n                                    Static\n                                get\n                            \n                            \n                                    Static\n                                isPublic\n                            \n                            \n                                    Static\n                                keys\n                            \n                            \n                                    Static\n                                names\n                            \n                            \n                                    Static\n                                paths\n                            \n                            \n                                    Static\n                                resourceName\n                            \n                            \n                                    Static\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        ENTITY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:109\n                        \n                    \n\n            \n                \n                    Unique symbol for entity class in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        KEYS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:keys')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:119\n                        \n                    \n\n            \n                \n                    Entity keys\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        NAME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('resource:name')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:129\n                        \n                    \n\n            \n                \n                    Unique symbol for entity class in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        NAMES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:names')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:114\n                        \n                    \n\n            \n                \n                    Unique symbol for entity names in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        PATHS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('rest:paths')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:124\n                        \n                    \n\n            \n                \n                    Unique symbol for rest-paths in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        PUBLIC\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('is:public')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:134\n                        \n                    \n\n            \n                \n                    Unique symbol for public metadata\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        entity\n                        \n                    \n                \n            \n            \n                \n                        \n                    entity(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:184\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get the factory function that returns resource entity ()=>Type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Type\n\n                        \n                            \n                                \nfunction that returns the resource entity ()=> Type\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:161\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    decorator target (just pass the decorator target)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ResourceMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isPublic\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPublic(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:176\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Is public resource or not\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nfunction that returns the resource entity ()=> Type\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        keys\n                        \n                    \n                \n            \n            \n                \n                        \n                    keys(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:211\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get entity keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Keys\n\n                        \n                            \n                                \nresource name\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        names\n                        \n                    \n                \n            \n            \n                \n                        \n                    names(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:202\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get Names for the resource entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Names\n\n                        \n                            \n                                \n{@link Names}\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        paths\n                        \n                    \n                \n            \n            \n                \n                        \n                    paths(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:193\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get paths for the resource entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Paths\n\n                        \n                            \n                                \n{@link Paths}\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        resourceName\n                        \n                    \n                \n            \n            \n                \n                        \n                    resourceName(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:220\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get resource name from the metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nresource name\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(options: Readonly>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:141\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Set resource metadata by resource entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Readonly>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'reflect-metadata';\nimport type { Names, Paths} from '@puq/names';\nimport { names, paths } from '@puq/names';\nimport type { Keys, Type } from '@puq/type';\n\n/**\n * Resource metadata options to create and set the metadata\n */\nexport type ResourceMetadataOptions = {\n  /**\n   * decorator target\n   */\n  target: T;\n\n  /**\n   * entity class factory function that return the resource entity class\n   */\n  entity: () => Type;\n  /**\n   * if set true, the requests bypass the authentication and authorization\n   */\n  isPublic?: boolean;\n};\n\n/**\n * Created metadata\n */\nexport type ResourceMetadata = {\n  /**\n   * Resource name which is the name of the entity\n   */\n  resourceName: string;\n\n  /**\n   * Factory function that returns the entity class\n   */\n  entity: () => Type;\n\n  /**\n   * Resource paths\n   */\n  paths: Readonly;\n\n  /**\n   * Resource names\n   */\n  names: Readonly;\n\n  /**\n   * Public resource\n   */\n  isPublic?: boolean;\n\n  /**\n   * Entity columns\n   */\n  keys?: Keys;\n};\n\n/**\n * A utility class for managing resource metadata in a TypeScript application using reflection.\n *\n * This class leverages the `reflect-metadata` library to attach and retrieve metadata for resource entities,\n * such as entity classes, names, REST paths, and access control flags. It is designed to support metadata-driven\n * frameworks (e.g., NestJS, TypeORM) where resources (e.g., API endpoints, database entities) need to be\n * dynamically configured via decorators or runtime reflection.\n *\n * Key features:\n * - Stores metadata (e.g., entity factory, resource names, paths) on target classes.\n * - Provides strongly-typed access to metadata via generic methods.\n * - Supports public/private resource designation for authentication/authorization bypass.\n * - Integrates with `@puq/names` for naming and path conventions and `@puq/type` for type definitions.\n *\n * Usage typically involves:\n * 1. Setting metadata on a target class (e.g., via a decorator) using `set`.\n * 2. Retrieving metadata at runtime with `get` or individual accessor methods (e.g., `entity`, `paths`).\n *\n * @example\n * ```typescript\n * class UserResource {\n *   // Resource implementation\n * }\n *\n * // Set metadata\n * ResourceMetadataManager.set({\n *   target: UserResource.prototype,\n *   entity: () => UserResource,\n *   isPublic: true,\n * });\n *\n * // Get metadata\n * const metadata = ResourceMetadataManager.get(UserResource.prototype);\n * console.log(metadata.resourceName); // \"UserResource\"\n * console.log(metadata.isPublic);     // true\n * ```\n *\n * @remarks\n * - Requires `reflect-metadata` to be imported before use.\n * - The `target` parameter typically expects a class prototype (e.g., `MyClass.prototype`) when used with decorators.\n * - Metadata keys are stored as unique symbols to avoid naming collisions.\n *\n * @see {@link ResourceMetadataOptions} for metadata configuration options.\n * @see {@link ResourceMetadata} for the structure of retrieved metadata.\n */\nexport class ResourceMetadataManager {\n  /**\n   * Unique symbol for entity class in reflector\n   */\n  static readonly ENTITY = Symbol('entity:class');\n\n  /**\n   * Unique symbol for entity names in reflector\n   */\n  static readonly NAMES = Symbol('entity:names');\n\n  /**\n   * Entity keys\n   */\n  static readonly KEYS = Symbol('entity:keys');\n\n  /**\n   * Unique symbol for rest-paths in reflector\n   */\n  static readonly PATHS = Symbol('rest:paths');\n\n  /**\n   * Unique symbol for entity class in reflector\n   */\n  static readonly NAME = Symbol('resource:name');\n\n  /**\n   * Unique symbol for public metadata\n   */\n  static readonly PUBLIC = Symbol('is:public');\n\n  /**\n   * Set resource metadata by resource entity\n   * @param target target class\n   * @param entity resource entity factory class `()=> Type`\n   */\n  static set(\n    options: Readonly>,\n  ): void {\n    const constructor = options.target.constructor;\n    const __entityFactory = options.entity;\n    const __paths = paths(__entityFactory().name);\n    const __names = names(__entityFactory().name);\n\n    Reflect.defineMetadata(this.ENTITY, __entityFactory, constructor);\n    Reflect.defineMetadata(this.PATHS, __paths, constructor);\n    Reflect.defineMetadata(this.NAMES, __names, constructor);\n    Reflect.defineMetadata(this.NAME, __names.className, constructor);\n    Reflect.defineMetadata(this.PUBLIC, !!options.isPublic, constructor);\n  }\n\n  /**\n   *\n   * @param target decorator target (just pass the decorator target)\n   * @returns\n   */\n  static get(target: T): ResourceMetadata {\n    return {\n      entity: this.entity(target),\n      names: this.names(target),\n      paths: this.paths(target),\n      resourceName: this.resourceName(target),\n      isPublic: this.isPublic(target),\n    };\n  }\n\n  /**\n   * Is public resource or not\n   * @param target target class\n   * @returns - function that returns the resource entity `()=> Type`\n   */\n  static isPublic(target: T): boolean {\n    return Reflect.getMetadata(this.PUBLIC, target) === true;\n  }\n  /**\n   * Get the factory function that returns resource entity `()=>Type`\n   * @param target target class\n   * @returns - function that returns the resource entity `()=> Type`\n   */\n  static entity(target: T): () => Type {\n    return Reflect.getMetadata(this.ENTITY, target);\n  }\n\n  /**\n   * Get paths for the resource entity\n   * @param target target class\n   * @returns - {@link Paths}\n   */\n  static paths(target: T): Paths {\n    return Reflect.getMetadata(this.PATHS, target);\n  }\n\n  /**\n   * Get {@link Names} for the resource entity.\n   * @param target target class\n   * @returns - {@link Names}\n   */\n  static names(target: T): Names {\n    return Reflect.getMetadata(this.NAMES, target);\n  }\n\n  /**\n   * Get entity keys\n   * @param target target class\n   * @returns - resource name\n   */\n  static keys(target: T): Keys {\n    return Reflect.getMetadata(this.KEYS, target);\n  }\n\n  /**\n   * Get resource name from the metadata\n   * @param target target class\n   * @returns - resource name\n   */\n  static resourceName(target: T): string {\n    return Reflect.getMetadata(this.NAME, target);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/resource-metadata-manager.ts\n            \n            class\n            ResourceMetadataManager\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                        src/lib/resource-metadata-manager.ts\n            \n            type alias\n            ResourceMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/resource-metadata-manager.ts\n            \n            type alias\n            ResourceMetadataOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/set-resource-metadata.decorator.ts\n            \n            function\n            SetResourceMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/set-resource-metadata.decorator.ts\n            \n            type alias\n            SetResourceMetadataOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n        \n            @puq/is : workspace:^\n        \n            @puq/names : workspace:^\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            reflect-metadata : ^0.2.2\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SetResourceMetadata   (src/.../set-resource-metadata.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/set-resource-metadata.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SetResourceMetadata\n                        \n                    \n                \n            \n            \n                \nSetResourceMetadata(options: Readonly)\n                \n            \n\n\n\n\n            \n                \n                        Set metadata for the resource controller that method and class decorator can access using ResourceMetadataManager\nThis decorator must be used as the first property of the resource controller class\nExample :class ResourceController {\n   '@SetResourceMetadata({\n     entity:()=> EntityClass,\n     isPublic:true (public resource)\n   })\n   __metadata__:any;\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     PropertyDecorator\n\n                        \n                            \n                                \n{@link PropertyDecorator}\n\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/meta\nSummary\nA TypeScript utility for managing resource metadata using the reflect-metadata library. This module provides a way to define and retrieve metadata for resource entities, such as entity classes, names, paths, and public access flags, typically used in frameworks like REST APIs or ORMs.\nFeatures\n\nMetadata Storage: Store metadata (e.g., entity factory, resource names, paths) on target classes - using reflect-metadata.\nType Safety: Strongly typed with TypeScript generics and custom types (Names, Paths, Keys, Type).\nPublic Access Control: Mark resources as public to bypass authentication/authorization.\nSimple API: Easy-to-use static methods for setting and retrieving metadata.\n\nInstall\nExample :  pnpm add @puq/metaFunding\nThank you for using @puq/meta It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.4.20\n        \n            Description : A TypeScript utility for managing resource metadata using the reflect-metadata library. This module provides a way to define and retrieve metadata for resource entities, such as entity classes, names, paths, and public access flags, typically used in frameworks like REST APIs or ORMs.\n        \n            Keywords : puq, meta\n        \n            Homepage : https://rbrightline.github.io/puq/meta\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResourceMetadata   (src/.../resource-metadata-manager.ts)\n                        \n                        \n                            ResourceMetadataOptions   (src/.../resource-metadata-manager.ts)\n                        \n                        \n                            SetResourceMetadataOptions   (src/.../set-resource-metadata.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/resource-metadata-manager.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceMetadata\n                \n            \n            \n                \n                    Created metadata\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceMetadataOptions\n                \n            \n            \n                \n                    Resource metadata options to create and set the metadata\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/set-resource-metadata.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SetResourceMetadataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
