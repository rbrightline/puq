var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ResourceMetadataManager.html",[0,0.656,1,0.876]],["body/classes/ResourceMetadataManager.html",[0,1.087,1,0.413,2,1.004,3,0.556,4,0.407,5,0.407,6,1.783,7,0.573,8,0.308,9,1.682,10,0.543,11,0.543,12,0.812,13,0.88,14,0.982,15,0.669,16,1.59,17,0.982,18,0.764,19,0.543,20,0.982,21,0.543,22,0.88,23,0.543,24,1.531,25,1.783,26,0.88,27,1.817,28,0.669,29,0.717,30,0.543,31,0.982,32,0.717,33,0.982,34,0.543,35,1.978,36,0.982,37,0.982,38,0.717,39,0.717,40,0.982,41,0.982,42,0.982,43,0.982,44,0.982,45,2.003,46,1.59,47,1.59,48,0.982,49,0.717,50,0.982,51,1.464,52,2.039,53,0.543,54,0.717,55,0.717,56,0.982,57,1.464,58,0.982,59,0.982,60,0.982,61,0.717,62,0.963,63,0.982,64,1.162,65,1.59,66,0.982,67,0.982,68,0.963,69,1.099,70,0.982,71,0.982,72,0.88,73,0.982,74,0.717,75,1.581,76,1.452,77,0.717,78,0.982,79,0.982,80,0.729,81,2.003,82,0.11,83,0.982,84,0.982,85,0.982,86,2.302,87,2.003,88,2.003,89,0.982,90,0.982,91,0.982,92,0.982,93,0.982,94,0.982,95,0.717,96,0.982,97,0.982,98,0.982,99,0.982,100,0.413,101,2.24,102,0.982,103,2.707,104,0.982,105,0.982,106,0.982,107,1.59,108,1.771,109,0.88,110,0.982,111,1.108,112,1.004,113,0.982,114,0.982,115,0.234,116,0.543,117,2.765,118,2.657,119,1.318,120,1.721,121,0.969,122,1.318,123,1.318,124,1.318,125,1.318,126,1.318,127,1.318,128,1.59,129,2.782,130,2.782,131,0.982,132,3.187,133,0.556,134,0.982,135,0.556,136,2.529,137,2.302,138,0.982,139,0.556,140,0.982,141,0.556,142,0.982,143,0.556,144,0.982,145,0.556,146,0.982,147,0.556,148,0.982,149,0.556,150,0.982,151,0.556,152,0.982,153,0.556,154,0.982,155,0.556,156,0.982,157,0.556,158,0.982,159,0.556,160,0.982,161,3.43,162,0.556,163,2.169,164,1.581,165,2.329,166,1.682,167,0.982,168,0.556,169,0.982,170,0.982,171,0.556,172,1.59,173,0.982,174,0.556,175,0.982,176,0.556,177,0.982,178,0.556,179,0.982,180,0.556,181,1.318,182,0.556,183,0.556,184,0.982,185,1.814,186,0.407,187,0.407,188,1.318,189,2.302,190,0.556,191,0.556,192,0.556,193,0.407,194,0.556,195,0.407,196,0.556,197,0.556,198,2.423,199,2.164,200,0.556,201,0.982,202,0.982,203,0.982,204,0.556,205,0.982,206,0.556,207,0.556,208,0.556,209,0.556,210,0.556,211,0.556,212,0.556,213,0.556,214,0.556,215,0.556,216,0.556,217,0.556,218,0.556,219,0.556,220,0.556,221,0.556,222,0.556,223,0.556,224,0.556,225,0.556,226,0.556,227,0.027,228,0.027]],["title/coverage.html",[229,2.03]],["body/coverage.html",[0,0.843,1,1.126,5,1.956,6,1.947,7,0.533,8,1.947,12,0.741,69,1.154,82,0.104,109,1.481,112,1.481,164,1.956,227,0.088,228,0.088,229,1.956,230,1.956,231,2.676,232,2.676,233,2.676,234,2.676,235,3.518,236,3.518,237,3.518,238,1.805,239,1.805,240,1.956,241,1.481,242,2.676,243,2.676,244,1.956,245,2.676,246,2.676]],["title/dependencies.html",[247,1.294,248,1.376]],["body/dependencies.html",[7,0.448,18,1.244,64,2.16,68,2.16,82,0.107,186,2.16,227,0.094,228,0.094,248,1.915,249,2.956,250,2.956,251,2.956,252,2.682,253,2.956]],["title/miscellaneous/functions.html",[254,0.745,255,1.817]],["body/miscellaneous/functions.html",[0,1.104,1,1.117,7,0.402,12,0.85,15,1.117,24,1.117,28,1.117,69,0.836,75,2.371,76,1.468,80,1.468,82,0.104,100,1.117,108,1.939,111,1.468,115,1.117,120,1.468,121,1.117,163,1.939,165,1.939,166,1.939,227,0.088,228,0.088,238,1.468,239,1.795,240,2.561,241,1.795,254,1.117,255,1.939,256,1.939,257,2.653,258,3.244,259,2.653,260,2.653,261,2.653,262,2.653,263,2.653,264,2.653,265,2.653,266,3.244]],["title/index.html",[115,0.745,267,1.771,268,1.771]],["body/index.html",[2,1.536,4,1.52,7,0.553,10,1.151,11,1.151,12,0.71,13,1.536,15,1.315,18,1.168,19,1.922,21,1.151,22,1.151,23,1.151,24,1.168,25,1.729,26,1.151,27,1.729,28,1.168,29,1.52,30,1.151,32,1.52,34,1.151,35,1.52,38,1.52,39,1.52,49,2.028,51,1.52,52,1.151,53,1.151,54,1.52,55,1.52,57,1.52,61,1.52,62,1.52,69,0.875,72,1.151,74,1.52,77,1.52,80,1.151,82,0.084,95,1.52,100,0.875,101,1.52,117,1.52,120,1.151,121,1.315,227,0.075,228,0.075,230,1.52,244,1.52,248,1.151,269,2.776,270,2.079,271,1.52,272,1.52,273,1.52,274,1.52,275,1.52,276,2.079,277,2.079,278,2.079,279,2.079,280,2.079,281,2.079,282,2.079,283,2.079,284,2.079,285,2.079,286,2.079,287,2.079,288,2.079,289,2.079,290,2.079,291,2.079,292,2.776,293,2.079,294,2.079,295,2.079,296,2.079,297,2.079,298,2.079,299,2.079,300,2.079,301,2.079,302,2.079,303,2.079,304,2.079,305,2.776,306,2.776,307,2.079,308,2.079,309,2.079,310,2.079,311,2.079,312,2.079,313,2.079,314,2.776,315,2.079,316,2.079,317,2.079,318,2.079,319,2.079,320,2.079,321,2.079,322,2.079,323,2.079,324,2.079,325,2.079,326,2.079,327,2.079,328,2.079,329,2.079,330,2.079,331,2.079,332,2.079,333,2.079,334,2.079,335,2.079,336,2.079,337,2.776,338,2.079]],["title/modules.html",[339,2.03]],["body/modules.html",[82,0.097,227,0.097,228,0.097,339,2.291]],["title/overview.html",[340,2.03]],["body/overview.html",[0,0.981,82,0.096,195,2.276,227,0.096,228,0.096,340,2.276]],["title/properties.html",[116,1.376,247,1.294]],["body/properties.html",[2,1.46,7,0.53,9,1.928,10,1.46,11,1.46,12,0.734,13,1.46,15,1.11,18,1.11,19,1.46,21,1.46,22,1.46,23,1.46,24,1.11,25,1.46,26,1.46,27,1.46,28,1.11,30,1.46,34,1.46,53,1.46,72,1.46,82,0.107,100,1.11,116,1.46,121,1.11,227,0.087,228,0.087,252,1.928,271,1.928,272,1.928,273,1.928,274,1.928,275,1.928,341,2.638,342,2.638,343,2.638,344,2.638,345,2.638,346,2.638,347,2.638,348,2.638,349,2.638,350,2.638,351,2.638,352,2.638,353,2.638,354,2.638,355,2.638]],["title/miscellaneous/typealiases.html",[254,0.745,356,2.487]],["body/miscellaneous/typealiases.html",[6,1.548,7,0.585,8,1.984,12,0.814,52,1.548,69,1.055,76,1.548,82,0.091,109,1.853,111,1.548,112,1.853,115,1.177,118,2.044,187,2.044,193,2.044,227,0.091,228,0.091,238,1.548,239,1.853,241,1.853,254,1.177,256,2.044,357,2.797,358,3.349,359,2.797]]],"invertedIndex":[["",{"_index":82,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["0.2.2",{"_index":253,"title":{},"body":{"dependencies.html":{}}}],["0.5.15",{"_index":250,"title":{},"body":{"dependencies.html":{}}}],["0.6.2",{"_index":252,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0/1",{"_index":243,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":195,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"overview.html":{}}}],["1/1",{"_index":237,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":236,"title":{},"body":{"coverage.html":{}}}],["14/22",{"_index":234,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":196,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["63",{"_index":233,"title":{},"body":{"coverage.html":{}}}],["__entity",{"_index":201,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__ispublic",{"_index":202,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__metadata__:any",{"_index":265,"title":{},"body":{"miscellaneous/functions.html":{}}}],["__names",{"_index":205,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__names.classname",{"_index":212,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__paths",{"_index":203,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["access",{"_index":28,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["accessor",{"_index":79,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["add",{"_index":287,"title":{},"body":{"index.html":{}}}],["alias",{"_index":235,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":357,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["api",{"_index":39,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["apis",{"_index":274,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application",{"_index":14,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["attach",{"_index":20,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["authentication",{"_index":191,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["authentication/authorization",{"_index":61,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["author",{"_index":353,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":192,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["avoid",{"_index":105,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["before",{"_index":94,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["boolean",{"_index":172,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["brightline",{"_index":355,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":317,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":347,"title":{},"body":{"properties.html":{}}}],["bypass",{"_index":62,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["class",{"_index":0,"title":{"classes/ResourceMetadataManager.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["collisions",{"_index":106,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["columns",{"_index":194,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["compatibility",{"_index":320,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":110,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["configured",{"_index":44,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["consider",{"_index":300,"title":{},"body":{"index.html":{}}}],["console.log(metadata.ispublic",{"_index":91,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["console.log(metadata.resourcename",{"_index":90,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["const",{"_index":88,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["constructor",{"_index":199,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["contact",{"_index":336,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":304,"title":{},"body":{"index.html":{}}}],["control",{"_index":29,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["controller",{"_index":258,"title":{},"body":{"miscellaneous/functions.html":{}}}],["conventions",{"_index":67,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["coverage",{"_index":229,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":187,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/typealiases.html":{}}}],["create_dto",{"_index":119,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["created",{"_index":193,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/typealiases.html":{}}}],["custom",{"_index":280,"title":{},"body":{"index.html":{}}}],["database",{"_index":41,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["date",{"_index":309,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":75,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":46,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["default",{"_index":129,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["define",{"_index":273,"title":{},"body":{"index.html":{},"properties.html":{}}}],["defined",{"_index":132,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["definitions",{"_index":70,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["dependencies",{"_index":248,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"properties.html":{}}}],["designation",{"_index":60,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["designed",{"_index":31,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["developer",{"_index":337,"title":{},"body":{"index.html":{}}}],["development",{"_index":303,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":230,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["driven",{"_index":33,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["dynamically",{"_index":43,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["e.g",{"_index":35,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["easy",{"_index":284,"title":{},"body":{"index.html":{}}}],["effort",{"_index":296,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":40,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ensure",{"_index":306,"title":{},"body":{"index.html":{}}}],["entities",{"_index":22,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["entity",{"_index":24,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["entity(target",{"_index":160,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["entityclass",{"_index":263,"title":{},"body":{"miscellaneous/functions.html":{}}}],["even",{"_index":324,"title":{},"body":{"index.html":{}}}],["example",{"_index":80,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["expects",{"_index":97,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["export",{"_index":188,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["factory",{"_index":51,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["features",{"_index":49,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{}}}],["find",{"_index":297,"title":{},"body":{"index.html":{}}}],["first",{"_index":260,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fixes",{"_index":318,"title":{},"body":{"index.html":{}}}],["flags",{"_index":30,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["frameworks",{"_index":34,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["function",{"_index":164,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{}}}],["functions",{"_index":255,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funding",{"_index":314,"title":{},"body":{"index.html":{}}}],["general",{"_index":330,"title":{},"body":{"index.html":{}}}],["generic",{"_index":56,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["generics",{"_index":279,"title":{},"body":{"index.html":{}}}],["get(target",{"_index":167,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["getting",{"_index":267,"title":{"index.html":{}},"body":{}}],["go",{"_index":315,"title":{},"body":{"index.html":{}}}],["help",{"_index":305,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":345,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":352,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":348,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/meta",{"_index":346,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":231,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":83,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["import",{"_index":185,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["imported",{"_index":93,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["improvements",{"_index":327,"title":{},"body":{"index.html":{}}}],["index",{"_index":115,"title":{"index.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["individual",{"_index":78,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["install",{"_index":285,"title":{},"body":{"index.html":{}}}],["instant",{"_index":313,"title":{},"body":{"index.html":{}}}],["integrates",{"_index":63,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["involves",{"_index":73,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic",{"_index":86,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic(target",{"_index":170,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic:true",{"_index":264,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":290,"title":{},"body":{"index.html":{}}}],["keep",{"_index":332,"title":{},"body":{"index.html":{}}}],["key",{"_index":48,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["keys",{"_index":101,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["keys(__entity",{"_index":214,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["keys(target",{"_index":173,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["keywords",{"_index":342,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":321,"title":{},"body":{"index.html":{}}}],["leverages",{"_index":17,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["library",{"_index":19,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["license",{"_index":349,"title":{},"body":{"properties.html":{}}}],["link",{"_index":108,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["literal",{"_index":359,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintained",{"_index":312,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":293,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":331,"title":{},"body":{"index.html":{}}}],["make",{"_index":323,"title":{},"body":{"index.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager.ts:106",{"_index":135,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:107",{"_index":133,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:108",{"_index":159,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:109",{"_index":151,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:110",{"_index":153,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:111",{"_index":149,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:112",{"_index":155,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:113",{"_index":157,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:118",{"_index":143,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:123",{"_index":139,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:128",{"_index":145,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:133",{"_index":141,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:138",{"_index":147,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:145",{"_index":183,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:166",{"_index":168,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:183",{"_index":171,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:191",{"_index":162,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:200",{"_index":178,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:209",{"_index":176,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:218",{"_index":174,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:227",{"_index":180,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["managing",{"_index":11,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["mark",{"_index":282,"title":{},"body":{"index.html":{}}}],["matching",{"_index":228,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["meta",{"_index":344,"title":{},"body":{"properties.html":{}}}],["metadata",{"_index":7,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["metadata.decorator.ts",{"_index":239,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["method",{"_index":259,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":57,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["miscellaneous",{"_index":254,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":350,"title":{},"body":{"properties.html":{}}}],["module",{"_index":271,"title":{},"body":{"index.html":{},"properties.html":{}}}],["modules",{"_index":339,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":325,"title":{},"body":{"index.html":{}}}],["myclass.prototype",{"_index":99,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["name",{"_index":120,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":25,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["names(__entity().name",{"_index":206,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["names(target",{"_index":175,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["naming",{"_index":65,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["need",{"_index":42,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["nestjs",{"_index":36,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["new",{"_index":244,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ongoing",{"_index":302,"title":{},"body":{"index.html":{}}}],["open",{"_index":291,"title":{},"body":{"index.html":{}}}],["optional",{"_index":166,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":111,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["options.target.constructor",{"_index":200,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["orms",{"_index":275,"title":{},"body":{"index.html":{},"properties.html":{}}}],["out",{"_index":329,"title":{},"body":{"index.html":{}}}],["overview",{"_index":340,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":247,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":198,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["parameter",{"_index":96,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["parameters",{"_index":163,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":169,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["path",{"_index":66,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["paths",{"_index":27,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["paths(__entity().name",{"_index":204,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["paths(target",{"_index":177,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["peer",{"_index":251,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":299,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":286,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":326,"title":{},"body":{"index.html":{}}}],["project",{"_index":292,"title":{},"body":{"index.html":{}}}],["properties",{"_index":116,"title":{"properties.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"properties.html":{}}}],["property",{"_index":261,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertydecorator",{"_index":266,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prototype",{"_index":98,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["provides",{"_index":53,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["public",{"_index":121,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["public/private",{"_index":59,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["puq",{"_index":343,"title":{},"body":{"properties.html":{}}}],["puq/is",{"_index":186,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"dependencies.html":{}}}],["puq/meta",{"_index":269,"title":{},"body":{"index.html":{}}}],["puq/metafunding",{"_index":288,"title":{},"body":{"index.html":{}}}],["puq/names",{"_index":64,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"dependencies.html":{}}}],["puq/type",{"_index":68,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"dependencies.html":{}}}],["query_count_dto",{"_index":122,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["query_many_dto",{"_index":123,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["query_one_dto",{"_index":124,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["readonly",{"_index":118,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/typealiases.html":{}}}],["reflect",{"_index":18,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["reflect.definemetadata(this.entity",{"_index":207,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.keys",{"_index":213,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.name",{"_index":211,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.names",{"_index":210,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.paths",{"_index":209,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.public",{"_index":208,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.entity",{"_index":222,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.keys",{"_index":225,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.name",{"_index":226,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.names",{"_index":224,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.paths",{"_index":223,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.public",{"_index":221,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflection",{"_index":16,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflector",{"_index":137,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["relation_dto",{"_index":125,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["remarks",{"_index":197,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["repository",{"_index":351,"title":{},"body":{"properties.html":{}}}],["requests",{"_index":190,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["requires",{"_index":92,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resource",{"_index":12,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["resourcecontroller",{"_index":262,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resourcemetadata",{"_index":112,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resourcemetadatamanager",{"_index":1,"title":{"classes/ResourceMetadataManager.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["resourcemetadatamanager.get(userresource.prototype",{"_index":89,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcemetadatamanager.set",{"_index":84,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcemetadataoptions",{"_index":109,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resourcename",{"_index":128,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcename(target",{"_index":179,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resources",{"_index":38,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["rest",{"_index":26,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["results",{"_index":227,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieve",{"_index":21,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["retrieved",{"_index":114,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["retrieving",{"_index":77,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["return",{"_index":189,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["returns",{"_index":165,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["robert",{"_index":354,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":338,"title":{},"body":{"index.html":{}}}],["running",{"_index":333,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":47,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["safety",{"_index":278,"title":{},"body":{"index.html":{}}}],["secure",{"_index":310,"title":{},"body":{"index.html":{}}}],["securely",{"_index":335,"title":{},"body":{"index.html":{}}}],["see",{"_index":107,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["set",{"_index":76,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["set(options",{"_index":182,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["setresourcemetadata",{"_index":240,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setresourcemetadata(options",{"_index":257,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setresourcemetadataoptions",{"_index":241,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["setting",{"_index":74,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["simple",{"_index":283,"title":{},"body":{"index.html":{}}}],["smoothly",{"_index":334,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["src/.../resource",{"_index":358,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../set",{"_index":256,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/resource",{"_index":6,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/set",{"_index":238,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":268,"title":{"index.html":{}},"body":{}}],["statements",{"_index":232,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":117,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["stays",{"_index":307,"title":{},"body":{"index.html":{}}}],["storage",{"_index":276,"title":{},"body":{"index.html":{}}}],["store",{"_index":277,"title":{},"body":{"index.html":{}}}],["stored",{"_index":102,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["stores",{"_index":50,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["string",{"_index":181,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["strongly",{"_index":54,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["structure",{"_index":113,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["such",{"_index":23,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["summary",{"_index":270,"title":{},"body":{"index.html":{}}}],["support",{"_index":32,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["supporting",{"_index":301,"title":{},"body":{"index.html":{}}}],["supports",{"_index":58,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["swc/helpers",{"_index":249,"title":{},"body":{"dependencies.html":{}}}],["symbol",{"_index":136,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('create:class",{"_index":131,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:class",{"_index":134,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:keys",{"_index":138,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:names",{"_index":142,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('is:public",{"_index":146,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('querycount:class",{"_index":148,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('querymany:class",{"_index":150,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('queryone:class",{"_index":152,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('relation:class",{"_index":154,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('resource:name",{"_index":140,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('rest:paths",{"_index":144,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('unsetrelation:class",{"_index":156,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('update:class",{"_index":158,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbols",{"_index":104,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["t",{"_index":161,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["table",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":245,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":294,"title":{},"body":{"index.html":{}}}],["target",{"_index":52,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["thank",{"_index":289,"title":{},"body":{"index.html":{}}}],["this.entity(target",{"_index":215,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.ispublic(target",{"_index":220,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.keys(target",{"_index":216,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.names(target",{"_index":217,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.paths(target",{"_index":218,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.resourcename(target",{"_index":219,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["time",{"_index":295,"title":{},"body":{"index.html":{}}}],["toward",{"_index":316,"title":{},"body":{"index.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["type",{"_index":69,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":356,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":55,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["typeorm",{"_index":37,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["types",{"_index":281,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":13,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["typically",{"_index":72,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["unique",{"_index":103,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["unset_relation_dto",{"_index":126,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["up",{"_index":308,"title":{},"body":{"index.html":{}}}],["update_dto",{"_index":127,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["updates",{"_index":319,"title":{},"body":{"index.html":{}}}],["usage",{"_index":71,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["use",{"_index":95,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["used",{"_index":100,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["useful",{"_index":298,"title":{},"body":{"index.html":{}}}],["userresource",{"_index":81,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["userresource.prototype",{"_index":85,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["users",{"_index":328,"title":{},"body":{"index.html":{}}}],["using",{"_index":15,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["utility",{"_index":10,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["value",{"_index":130,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["version",{"_index":341,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":322,"title":{},"body":{"index.html":{}}}],["via",{"_index":45,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["void",{"_index":184,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["way",{"_index":272,"title":{},"body":{"index.html":{},"properties.html":{}}}],["well",{"_index":311,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ResourceMetadataManager.html":{"url":"classes/ResourceMetadataManager.html","title":"class - ResourceMetadataManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceMetadataManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/resource-metadata-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for managing resource metadata in a TypeScript application using reflection.\nThis class leverages the reflect-metadata library to attach and retrieve metadata for resource entities,\nsuch as entity classes, names, REST paths, and access control flags. It is designed to support metadata-driven\nframeworks (e.g., NestJS, TypeORM) where resources (e.g., API endpoints, database entities) need to be\ndynamically configured via decorators or runtime reflection.\nKey features:\n\nStores metadata (e.g., entity factory, resource names, paths) on target classes.\nProvides strongly-typed access to metadata via generic methods.\nSupports public/private resource designation for authentication/authorization bypass.\nIntegrates with @puq/names for naming and path conventions and @puq/type for type definitions.\n\nUsage typically involves:\n\nSetting metadata on a target class (e.g., via a decorator) using set.\nRetrieving metadata at runtime with get or individual accessor methods (e.g., entity, paths).\n\nExample :```typescript\nclass UserResource {\n  // Resource implementation\n}// Set metadata\nResourceMetadataManager.set({\n  target: UserResource.prototype,\n  entity: () => UserResource,\n  isPublic: true,\n});\n// Get metadata\nconst metadata = ResourceMetadataManager.get(UserResource.prototype);\nconsole.log(metadata.resourceName); // \"UserResource\"\nconsole.log(metadata.isPublic);     // true\nExample :\n- Requires `reflect-metadata` to be imported before use.\n- The `target` parameter typically expects a class prototype (e.g., `MyClass.prototype`) when used with decorators.\n- Metadata keys are stored as unique symbols to avoid naming collisions.\n\nSee {@link ResourceMetadataOptions} for metadata configuration options.\nSee {@link ResourceMetadata} for the structure of retrieved metadata.\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                CREATE_DTO\n                            \n                            \n                                    Static\n                                    Readonly\n                                ENTITY\n                            \n                            \n                                    Static\n                                    Readonly\n                                KEYS\n                            \n                            \n                                    Static\n                                    Readonly\n                                NAME\n                            \n                            \n                                    Static\n                                    Readonly\n                                NAMES\n                            \n                            \n                                    Static\n                                    Readonly\n                                PATHS\n                            \n                            \n                                    Static\n                                    Readonly\n                                PUBLIC\n                            \n                            \n                                    Static\n                                    Readonly\n                                QUERY_COUNT_DTO\n                            \n                            \n                                    Static\n                                    Readonly\n                                QUERY_MANY_DTO\n                            \n                            \n                                    Static\n                                    Readonly\n                                QUERY_ONE_DTO\n                            \n                            \n                                    Static\n                                    Readonly\n                                RELATION_DTO\n                            \n                            \n                                    Static\n                                    Readonly\n                                UNSET_RELATION_DTO\n                            \n                            \n                                    Static\n                                    Readonly\n                                UPDATE_DTO\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                entity\n                            \n                            \n                                    Static\n                                get\n                            \n                            \n                                    Static\n                                isPublic\n                            \n                            \n                                    Static\n                                keys\n                            \n                            \n                                    Static\n                                names\n                            \n                            \n                                    Static\n                                paths\n                            \n                            \n                                    Static\n                                resourceName\n                            \n                            \n                                    Static\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        CREATE_DTO\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('create:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        ENTITY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:106\n                        \n                    \n\n            \n                \n                    Unique symbol for entity class in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        KEYS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:keys')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:123\n                        \n                    \n\n            \n                \n                    Entity keys\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        NAME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('resource:name')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:133\n                        \n                    \n\n            \n                \n                    Unique symbol for entity class in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        NAMES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:names')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:118\n                        \n                    \n\n            \n                \n                    Unique symbol for entity names in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        PATHS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('rest:paths')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:128\n                        \n                    \n\n            \n                \n                    Unique symbol for rest-paths in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        PUBLIC\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('is:public')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:138\n                        \n                    \n\n            \n                \n                    Unique symbol for public metadata\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        QUERY_COUNT_DTO\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('queryCount:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        QUERY_MANY_DTO\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('queryMany:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        QUERY_ONE_DTO\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('queryOne:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        RELATION_DTO\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('relation:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        UNSET_RELATION_DTO\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('unsetRelation:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        UPDATE_DTO\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('update:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:108\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        entity\n                        \n                    \n                \n            \n            \n                \n                        \n                    entity(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:191\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get the factory function that returns resource entity ()=>Type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Type\n\n                        \n                            \n                                \nfunction that returns the resource entity ()=> Type\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:166\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    decorator target (just pass the decorator target)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ResourceMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isPublic\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPublic(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:183\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Is public resource or not\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nfunction that returns the resource entity ()=> Type\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        keys\n                        \n                    \n                \n            \n            \n                \n                        \n                    keys(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:218\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get entity keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Keys\n\n                        \n                            \n                                \nresource name\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        names\n                        \n                    \n                \n            \n            \n                \n                        \n                    names(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:209\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get Names for the resource entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Names\n\n                        \n                            \n                                \n{@link Names}\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        paths\n                        \n                    \n                \n            \n            \n                \n                        \n                    paths(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:200\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get paths for the resource entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Paths\n\n                        \n                            \n                                \n{@link Paths}\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        resourceName\n                        \n                    \n                \n            \n            \n                \n                        \n                    resourceName(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:227\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get resource name from the metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nresource name\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(options: Readonly>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:145\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Set resource metadata by resource entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Readonly>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'reflect-metadata';\nimport type { Names, Paths } from '@puq/names';\nimport type { Keys, Type } from '@puq/type';\nimport { names, paths } from '@puq/names';\nimport { keys } from '@puq/is';\n\n/**\n * Resource metadata options to create and set the metadata\n */\nexport type ResourceMetadataOptions = {\n  /**\n   * decorator target\n   */\n  target: T;\n\n  /**\n   * entity class factory function that return the resource entity class\n   */\n  entity: () => Type;\n\n  /**\n   * if set true, the requests bypass the authentication and authorization\n   */\n  isPublic?: boolean;\n};\n\n/**\n * Created metadata\n */\nexport type ResourceMetadata = ResourceMetadataOptions & {\n  /**\n   * Resource name which is the name of the entity\n   */\n  resourceName: string;\n\n  /**\n   * Resource paths\n   */\n  paths: Readonly;\n\n  /**\n   * Resource names\n   */\n  names: Readonly;\n\n  /**\n   * Public resource\n   */\n  isPublic?: boolean;\n\n  /**\n   * Entity columns\n   */\n  keys?: Keys;\n};\n\n/**\n * A utility class for managing resource metadata in a TypeScript application using reflection.\n *\n * This class leverages the `reflect-metadata` library to attach and retrieve metadata for resource entities,\n * such as entity classes, names, REST paths, and access control flags. It is designed to support metadata-driven\n * frameworks (e.g., NestJS, TypeORM) where resources (e.g., API endpoints, database entities) need to be\n * dynamically configured via decorators or runtime reflection.\n *\n * Key features:\n * - Stores metadata (e.g., entity factory, resource names, paths) on target classes.\n * - Provides strongly-typed access to metadata via generic methods.\n * - Supports public/private resource designation for authentication/authorization bypass.\n * - Integrates with `@puq/names` for naming and path conventions and `@puq/type` for type definitions.\n *\n * Usage typically involves:\n * 1. Setting metadata on a target class (e.g., via a decorator) using `set`.\n * 2. Retrieving metadata at runtime with `get` or individual accessor methods (e.g., `entity`, `paths`).\n *\n * @example\n * ```typescript\n * class UserResource {\n *   // Resource implementation\n * }\n *\n * // Set metadata\n * ResourceMetadataManager.set({\n *   target: UserResource.prototype,\n *   entity: () => UserResource,\n *   isPublic: true,\n * });\n *\n * // Get metadata\n * const metadata = ResourceMetadataManager.get(UserResource.prototype);\n * console.log(metadata.resourceName); // \"UserResource\"\n * console.log(metadata.isPublic);     // true\n * ```\n *\n * @remarks\n * - Requires `reflect-metadata` to be imported before use.\n * - The `target` parameter typically expects a class prototype (e.g., `MyClass.prototype`) when used with decorators.\n * - Metadata keys are stored as unique symbols to avoid naming collisions.\n *\n * @see {@link ResourceMetadataOptions} for metadata configuration options.\n * @see {@link ResourceMetadata} for the structure of retrieved metadata.\n */\nexport class ResourceMetadataManager {\n  /**\n   * Unique symbol for entity class in reflector\n   */\n  static readonly ENTITY = Symbol('entity:class');\n  static readonly CREATE_DTO = Symbol('create:class');\n  static readonly UPDATE_DTO = Symbol('update:class');\n  static readonly QUERY_MANY_DTO = Symbol('queryMany:class');\n  static readonly QUERY_ONE_DTO = Symbol('queryOne:class');\n  static readonly QUERY_COUNT_DTO = Symbol('queryCount:class');\n  static readonly RELATION_DTO = Symbol('relation:class');\n  static readonly UNSET_RELATION_DTO = Symbol('unsetRelation:class');\n\n  /**\n   * Unique symbol for entity names in reflector\n   */\n  static readonly NAMES = Symbol('entity:names');\n\n  /**\n   * Entity keys\n   */\n  static readonly KEYS = Symbol('entity:keys');\n\n  /**\n   * Unique symbol for rest-paths in reflector\n   */\n  static readonly PATHS = Symbol('rest:paths');\n\n  /**\n   * Unique symbol for entity class in reflector\n   */\n  static readonly NAME = Symbol('resource:name');\n\n  /**\n   * Unique symbol for public metadata\n   */\n  static readonly PUBLIC = Symbol('is:public');\n\n  /**\n   * Set resource metadata by resource entity\n   * @param target target class\n   * @param entity resource entity factory class `()=> Type`\n   */\n  static set(\n    options: Readonly>,\n  ): void {\n    const constructor = options.target.constructor;\n    const { entity: __entity, isPublic: __isPublic } = options;\n    const __paths = paths(__entity().name);\n    const __names = names(__entity().name);\n\n    Reflect.defineMetadata(this.ENTITY, __entity, constructor);\n    Reflect.defineMetadata(this.PUBLIC, !!__isPublic, constructor);\n    Reflect.defineMetadata(this.PATHS, __paths, constructor);\n    Reflect.defineMetadata(this.NAMES, __names, constructor);\n    Reflect.defineMetadata(this.NAME, __names.className, constructor);\n    Reflect.defineMetadata(this.KEYS, keys(__entity()), constructor);\n  }\n\n  /**\n   *\n   * @param target decorator target (just pass the decorator target)\n   * @returns\n   */\n  static get(target: T): ResourceMetadata {\n    return {\n      target,\n      entity: this.entity(target),\n      keys: this.keys(target),\n      names: this.names(target),\n      paths: this.paths(target),\n      resourceName: this.resourceName(target),\n      isPublic: this.isPublic(target),\n    };\n  }\n\n  /**\n   * Is public resource or not\n   * @param target target class\n   * @returns - function that returns the resource entity `()=> Type`\n   */\n  static isPublic(target: T): boolean {\n    return Reflect.getMetadata(this.PUBLIC, target) === true;\n  }\n  /**\n   * Get the factory function that returns resource entity `()=>Type`\n   * @param target target class\n   * @returns - function that returns the resource entity `()=> Type`\n   */\n  static entity(target: T): () => Type {\n    return Reflect.getMetadata(this.ENTITY, target);\n  }\n\n  /**\n   * Get paths for the resource entity\n   * @param target target class\n   * @returns - {@link Paths}\n   */\n  static paths(target: T): Paths {\n    return Reflect.getMetadata(this.PATHS, target);\n  }\n\n  /**\n   * Get {@link Names} for the resource entity.\n   * @param target target class\n   * @returns - {@link Names}\n   */\n  static names(target: T): Names {\n    return Reflect.getMetadata(this.NAMES, target);\n  }\n\n  /**\n   * Get entity keys\n   * @param target target class\n   * @returns - resource name\n   */\n  static keys(target: T): Keys {\n    return Reflect.getMetadata(this.KEYS, target);\n  }\n\n  /**\n   * Get resource name from the metadata\n   * @param target target class\n   * @returns - resource name\n   */\n  static resourceName(target: T): string {\n    return Reflect.getMetadata(this.NAME, target);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/resource-metadata-manager.ts\n            \n            class\n            ResourceMetadataManager\n            \n                63 %\n                (14/22)\n            \n        \n        \n            \n                \n                        src/lib/resource-metadata-manager.ts\n            \n            type alias\n            ResourceMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/resource-metadata-manager.ts\n            \n            type alias\n            ResourceMetadataOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/set-resource-metadata.decorator.ts\n            \n            function\n            SetResourceMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/set-resource-metadata.decorator.ts\n            \n            type alias\n            SetResourceMetadataOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @puq/type : ^0.6.2\n        \n            @puq/is : ^0.6.2\n        \n            @puq/names : ^0.6.2\n        \n            reflect-metadata : ^0.2.2\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SetResourceMetadata   (src/.../set-resource-metadata.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/set-resource-metadata.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SetResourceMetadata\n                        \n                    \n                \n            \n            \n                \nSetResourceMetadata(options: SetResourceMetadataOptions)\n                \n            \n\n\n\n\n            \n                \n                        Set metadata for the resource controller that method and class decorator can access using ResourceMetadataManager\nThis decorator must be used as the first property of the resource controller class\nExample :class ResourceController {\n   '@SetResourceMetadata({\n     entity:()=> EntityClass,\n     isPublic:true (public resource)\n   })\n   __metadata__:any;\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            SetResourceMetadataOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     PropertyDecorator\n\n                        \n                            \n                                \n{@link PropertyDecorator}\n\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/meta\nSummary\nA TypeScript utility for managing resource metadata using the reflect-metadata library. This module provides a way to define and retrieve metadata for resource entities, such as entity classes, names, paths, and public access flags, typically used in frameworks like REST APIs or ORMs.\nFeatures\n\nMetadata Storage: Store metadata (e.g., entity factory, resource names, paths) on target classes - using reflect-metadata.\nType Safety: Strongly typed with TypeScript generics and custom types (Names, Paths, Keys, Type).\nPublic Access Control: Mark resources as public to bypass authentication/authorization.\nSimple API: Easy-to-use static methods for setting and retrieving metadata.\n\nInstall\nExample :  pnpm add @puq/metaFunding\nThank you for using @puq/meta It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.6.2\n        \n            Description : A TypeScript utility for managing resource metadata using the reflect-metadata library. This module provides a way to define and retrieve metadata for resource entities, such as entity classes, names, paths, and public access flags, typically used in frameworks like REST APIs or ORMs.\n        \n            Keywords : puq, meta\n        \n            Homepage : https://rbrightline.github.io/puq/meta\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResourceMetadata   (src/.../resource-metadata-manager.ts)\n                        \n                        \n                            ResourceMetadataOptions   (src/.../resource-metadata-manager.ts)\n                        \n                        \n                            SetResourceMetadataOptions   (src/.../set-resource-metadata.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/resource-metadata-manager.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceMetadata\n                \n            \n            \n                \n                    Created metadata\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceMetadataOptions\n                \n            \n            \n                \n                    Resource metadata options to create and set the metadata\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/set-resource-metadata.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SetResourceMetadataOptions\n                \n            \n            \n                \n                        Readonly, target>>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
