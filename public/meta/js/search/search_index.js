var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ResourceMetadataManager.html",[0,0.656,1,0.876]],["body/classes/ResourceMetadataManager.html",[0,1.097,1,0.421,2,1.017,3,0.568,4,0.415,5,0.415,6,1.622,7,0.567,8,0.314,9,1.7,10,0.553,11,0.553,12,0.795,13,0.892,14,0.999,15,0.679,16,1.613,17,0.999,18,0.774,19,0.553,20,0.999,21,0.553,22,0.892,23,0.553,24,1.539,25,1.792,26,0.892,27,1.826,28,0.679,29,0.73,30,0.553,31,0.999,32,0.73,33,0.999,34,0.553,35,1.994,36,0.999,37,0.999,38,0.73,39,0.73,40,0.999,41,0.999,42,0.999,43,0.999,44,0.999,45,2.027,46,1.613,47,1.613,48,0.999,49,0.73,50,0.999,51,1.599,52,2.693,53,0.553,54,0.73,55,0.73,56,0.999,57,1.481,58,0.999,59,0.999,60,0.999,61,0.73,62,0.978,63,0.999,64,0.978,65,1.613,66,0.999,67,0.999,68,1.339,69,1.103,70,0.999,71,0.999,72,0.892,73,0.999,74,0.73,75,1.599,76,1.464,77,0.73,78,0.999,79,0.999,80,0.741,81,2.027,82,0.11,83,0.999,84,0.999,85,0.999,86,2.188,87,2.027,88,2.027,89,0.999,90,0.999,91,0.999,92,0.999,93,0.999,94,0.999,95,0.73,96,0.999,97,0.999,98,0.999,99,0.999,100,0.421,101,2.183,102,0.999,103,2.729,104,0.999,105,0.999,106,0.999,107,1.613,108,1.788,109,0.741,110,0.999,111,1.017,112,1.017,113,0.999,114,0.999,115,0.239,116,0.553,117,2.649,118,2.39,119,1.731,120,0.979,121,1.613,122,2.027,123,2.027,124,0.999,125,2.871,126,0.568,127,2.552,128,2.326,129,0.999,130,0.568,131,0.999,132,0.568,133,0.999,134,0.568,135,0.999,136,0.568,137,0.999,138,0.568,139,0.999,140,3.444,141,0.568,142,2.183,143,1.7,144,2.366,145,0.999,146,1.7,147,0.999,148,0.568,149,0.999,150,0.999,151,0.568,152,1.613,153,0.999,154,0.568,155,1.613,156,0.999,157,0.568,158,0.999,159,0.568,160,0.999,161,0.568,162,1.339,163,0.568,164,0.568,165,0.999,166,1.339,167,0.415,168,1.339,169,2.326,170,0.568,171,0.568,172,0.568,173,0.415,174,0.568,175,0.415,176,0.568,177,0.568,178,2.447,179,2.027,180,0.568,181,0.999,182,0.568,183,0.999,184,0.568,185,0.999,186,0.568,187,0.568,188,0.568,189,0.568,190,0.568,191,0.568,192,0.568,193,0.568,194,0.568,195,0.568,196,0.568,197,0.568,198,0.568,199,0.568,200,0.568,201,0.568,202,0.568,203,0.568,204,0.568,205,0.027,206,0.027]],["title/coverage.html",[207,2.03]],["body/coverage.html",[0,0.831,1,1.11,5,1.927,6,1.934,7,0.53,8,1.934,12,0.734,69,1.148,82,0.104,109,1.459,112,1.459,143,1.927,205,0.087,206,0.087,207,1.927,208,1.927,209,2.637,210,2.637,211,2.637,212,2.637,213,3.495,214,3.495,215,3.495,216,1.789,217,1.789,218,1.927,219,1.927,220,2.637,221,2.637,222,1.927,223,2.637,224,2.637]],["title/dependencies.html",[225,1.294,226,1.376]],["body/dependencies.html",[7,0.454,18,1.261,64,2.19,82,0.105,205,0.094,206,0.094,226,1.931,227,2.997,228,2.997,229,2.19,230,2.997,231,2.997]],["title/miscellaneous/functions.html",[232,0.745,233,1.817]],["body/miscellaneous/functions.html",[0,1.097,1,1.1,7,0.396,12,0.847,15,1.1,24,1.1,28,1.1,69,0.823,75,2.348,76,1.446,80,1.446,82,0.104,100,1.1,108,1.909,111,1.446,115,1.1,118,2.348,119,1.446,120,1.1,142,1.909,144,1.909,146,1.909,205,0.087,206,0.087,216,1.446,217,1.778,218,2.543,232,1.1,233,1.909,234,1.909,235,2.613,236,2.613,237,2.613,238,2.613,239,2.613,240,2.613,241,2.613,242,2.613,243,2.613,244,2.613,245,3.214]],["title/index.html",[115,0.745,246,1.771,247,1.771]],["body/index.html",[2,1.505,4,1.473,7,0.549,10,1.116,11,1.116,12,0.699,13,1.505,15,1.295,18,1.144,19,1.902,21,1.116,22,1.116,23,1.116,24,1.144,25,1.702,26,1.116,27,1.702,28,1.144,29,1.473,30,1.116,32,1.473,34,1.116,35,1.473,38,1.473,39,1.473,49,1.987,51,1.473,52,1.473,53,1.116,54,1.473,55,1.473,57,1.473,61,1.473,62,1.473,69,0.857,72,1.116,74,1.473,77,1.473,80,1.116,82,0.083,95,1.473,100,0.849,101,1.473,117,1.473,119,1.116,120,1.295,205,0.074,206,0.074,208,1.473,222,1.473,226,1.116,248,2.719,249,2.016,250,1.473,251,1.473,252,1.473,253,1.473,254,1.473,255,2.016,256,2.016,257,2.016,258,2.016,259,2.016,260,2.016,261,2.016,262,2.016,263,2.016,264,2.016,265,2.016,266,2.016,267,2.016,268,2.016,269,2.016,270,2.016,271,2.719,272,2.016,273,2.016,274,2.016,275,2.016,276,2.016,277,2.016,278,2.016,279,2.016,280,2.016,281,2.016,282,2.016,283,2.016,284,2.719,285,2.719,286,2.016,287,2.016,288,2.016,289,2.016,290,2.016,291,2.016,292,2.016,293,2.719,294,2.016,295,2.016,296,2.016,297,2.016,298,2.016,299,2.016,300,2.016,301,2.016,302,2.016,303,2.016,304,2.016,305,2.016,306,2.016,307,2.016,308,2.016,309,2.016,310,2.016,311,2.016,312,2.016,313,2.016,314,2.016,315,2.016,316,2.719,317,2.016]],["title/modules.html",[318,2.03]],["body/modules.html",[82,0.097,205,0.097,206,0.097,318,2.286]],["title/overview.html",[319,2.03]],["body/overview.html",[0,0.979,82,0.096,175,2.269,205,0.096,206,0.096,319,2.269]],["title/properties.html",[116,1.376,225,1.294]],["body/properties.html",[2,1.437,7,0.526,9,1.898,10,1.437,11,1.437,12,0.727,13,1.437,15,1.093,18,1.093,19,1.437,21,1.437,22,1.437,23,1.437,24,1.093,25,1.437,26,1.437,27,1.437,28,1.093,30,1.437,34,1.437,53,1.437,72,1.437,82,0.106,100,1.093,116,1.437,120,1.093,205,0.087,206,0.087,229,1.898,250,1.898,251,1.898,252,1.898,253,1.898,254,1.898,320,2.597,321,2.597,322,2.597,323,2.597,324,2.597,325,2.597,326,2.597,327,2.597,328,2.597,329,2.597,330,2.597,331,2.597,332,2.597,333,2.597,334,2.597]],["title/miscellaneous/typealiases.html",[232,0.745,335,2.487]],["body/miscellaneous/typealiases.html",[6,1.52,7,0.582,8,1.969,12,0.808,69,1.164,76,1.52,82,0.09,109,1.834,111,1.52,112,1.834,115,1.156,167,2.007,173,2.007,205,0.09,206,0.09,216,1.52,217,1.834,219,2.421,232,1.156,234,2.007,336,2.747,337,3.313,338,3.558]]],"invertedIndex":[["",{"_index":82,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":220,"title":{},"body":{"coverage.html":{}}}],["0.2.2",{"_index":231,"title":{},"body":{"dependencies.html":{}}}],["0.4.11",{"_index":229,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0.5.15",{"_index":228,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":221,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":175,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"overview.html":{}}}],["1/1",{"_index":215,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":214,"title":{},"body":{"coverage.html":{}}}],["14/15",{"_index":212,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":176,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["93",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["__entityfactory",{"_index":181,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__metadata__:any",{"_index":244,"title":{},"body":{"miscellaneous/functions.html":{}}}],["__names",{"_index":185,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__names.classname",{"_index":191,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["__paths",{"_index":183,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["access",{"_index":28,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["accessor",{"_index":79,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["add",{"_index":266,"title":{},"body":{"index.html":{}}}],["alias",{"_index":213,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":336,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["api",{"_index":39,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["apis",{"_index":253,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application",{"_index":14,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["attach",{"_index":20,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["authentication",{"_index":171,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["authentication/authorization",{"_index":61,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["author",{"_index":332,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":172,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["avoid",{"_index":105,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["before",{"_index":94,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["boolean",{"_index":152,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["brightline",{"_index":334,"title":{},"body":{"properties.html":{}}}],["bug",{"_index":296,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":326,"title":{},"body":{"properties.html":{}}}],["bypass",{"_index":62,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["class",{"_index":0,"title":{"classes/ResourceMetadataManager.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["collisions",{"_index":106,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["columns",{"_index":174,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["compatibility",{"_index":299,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":110,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["configured",{"_index":44,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["consider",{"_index":279,"title":{},"body":{"index.html":{}}}],["console.log(metadata.ispublic",{"_index":91,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["console.log(metadata.resourcename",{"_index":90,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["const",{"_index":88,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["constructor",{"_index":179,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["contact",{"_index":315,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":283,"title":{},"body":{"index.html":{}}}],["control",{"_index":29,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["controller",{"_index":240,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controlller",{"_index":236,"title":{},"body":{"miscellaneous/functions.html":{}}}],["conventions",{"_index":67,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["coverage",{"_index":207,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":167,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/typealiases.html":{}}}],["created",{"_index":173,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/typealiases.html":{}}}],["custom",{"_index":259,"title":{},"body":{"index.html":{}}}],["database",{"_index":41,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["date",{"_index":288,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":75,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":46,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["default",{"_index":122,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["define",{"_index":252,"title":{},"body":{"index.html":{},"properties.html":{}}}],["defined",{"_index":125,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["definitions",{"_index":70,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["dependencies",{"_index":226,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"properties.html":{}}}],["designation",{"_index":60,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["designed",{"_index":31,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["developer",{"_index":316,"title":{},"body":{"index.html":{}}}],["development",{"_index":282,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":208,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["driven",{"_index":33,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["dynamically",{"_index":43,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["e.g",{"_index":35,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["easy",{"_index":263,"title":{},"body":{"index.html":{}}}],["effort",{"_index":275,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":40,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ensure",{"_index":285,"title":{},"body":{"index.html":{}}}],["entities",{"_index":22,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["entity",{"_index":24,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["entity(target",{"_index":139,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["entityclass",{"_index":242,"title":{},"body":{"miscellaneous/functions.html":{}}}],["even",{"_index":303,"title":{},"body":{"index.html":{}}}],["example",{"_index":80,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["expects",{"_index":97,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["export",{"_index":168,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["factory",{"_index":51,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["features",{"_index":49,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{}}}],["find",{"_index":276,"title":{},"body":{"index.html":{}}}],["first",{"_index":238,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fixes",{"_index":297,"title":{},"body":{"index.html":{}}}],["flags",{"_index":30,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["frameworks",{"_index":34,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["function",{"_index":143,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{}}}],["functions",{"_index":233,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funding",{"_index":293,"title":{},"body":{"index.html":{}}}],["general",{"_index":309,"title":{},"body":{"index.html":{}}}],["generic",{"_index":56,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["generics",{"_index":258,"title":{},"body":{"index.html":{}}}],["get(target",{"_index":147,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["getting",{"_index":246,"title":{"index.html":{}},"body":{}}],["go",{"_index":294,"title":{},"body":{"index.html":{}}}],["help",{"_index":284,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":324,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/puq/tree/main",{"_index":331,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io",{"_index":327,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/puq/meta",{"_index":325,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":83,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["import",{"_index":166,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["imported",{"_index":93,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["improvements",{"_index":306,"title":{},"body":{"index.html":{}}}],["index",{"_index":115,"title":{"index.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["individual",{"_index":78,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["install",{"_index":264,"title":{},"body":{"index.html":{}}}],["instant",{"_index":292,"title":{},"body":{"index.html":{}}}],["integrates",{"_index":63,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["involves",{"_index":73,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic",{"_index":86,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic(target",{"_index":150,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["ispublic:true",{"_index":243,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":269,"title":{},"body":{"index.html":{}}}],["keep",{"_index":311,"title":{},"body":{"index.html":{}}}],["key",{"_index":48,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["keys",{"_index":101,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["keys(target",{"_index":153,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["keywords",{"_index":321,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":300,"title":{},"body":{"index.html":{}}}],["leverages",{"_index":17,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["library",{"_index":19,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["license",{"_index":328,"title":{},"body":{"properties.html":{}}}],["link",{"_index":108,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["literal",{"_index":338,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintained",{"_index":291,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":272,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":310,"title":{},"body":{"index.html":{}}}],["make",{"_index":302,"title":{},"body":{"index.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager.ts:108",{"_index":126,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:113",{"_index":134,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:118",{"_index":130,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:123",{"_index":136,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:128",{"_index":132,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:133",{"_index":138,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:140",{"_index":164,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:160",{"_index":148,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:175",{"_index":151,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:183",{"_index":141,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:192",{"_index":159,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:201",{"_index":157,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:210",{"_index":154,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["manager.ts:219",{"_index":161,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["managing",{"_index":11,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["mark",{"_index":261,"title":{},"body":{"index.html":{}}}],["matching",{"_index":206,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["meta",{"_index":323,"title":{},"body":{"properties.html":{}}}],["metadata",{"_index":7,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["metadata.decorator.ts",{"_index":217,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["method",{"_index":237,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":57,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["miscellaneous",{"_index":232,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":329,"title":{},"body":{"properties.html":{}}}],["module",{"_index":250,"title":{},"body":{"index.html":{},"properties.html":{}}}],["modules",{"_index":318,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":304,"title":{},"body":{"index.html":{}}}],["myclass.prototype",{"_index":99,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["name",{"_index":119,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":25,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["names(__entityfactory().name",{"_index":186,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["names(target",{"_index":156,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["naming",{"_index":65,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["need",{"_index":42,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["nestjs",{"_index":36,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["new",{"_index":222,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ongoing",{"_index":281,"title":{},"body":{"index.html":{}}}],["open",{"_index":270,"title":{},"body":{"index.html":{}}}],["optional",{"_index":146,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":111,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["options.entity",{"_index":182,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["options.ispublic",{"_index":193,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["options.target.constructor",{"_index":180,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["orms",{"_index":254,"title":{},"body":{"index.html":{},"properties.html":{}}}],["out",{"_index":308,"title":{},"body":{"index.html":{}}}],["overview",{"_index":319,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":225,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":178,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["parameter",{"_index":96,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["parameters",{"_index":142,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":149,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["path",{"_index":66,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["paths",{"_index":27,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["paths(__entityfactory().name",{"_index":184,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["paths(target",{"_index":158,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["peer",{"_index":230,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":278,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":265,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":305,"title":{},"body":{"index.html":{}}}],["project",{"_index":271,"title":{},"body":{"index.html":{}}}],["properties",{"_index":116,"title":{"properties.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"properties.html":{}}}],["property",{"_index":239,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertydecorator",{"_index":245,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prototype",{"_index":98,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["provides",{"_index":53,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["public",{"_index":120,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["public/private",{"_index":59,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["puq",{"_index":322,"title":{},"body":{"properties.html":{}}}],["puq/meta",{"_index":248,"title":{},"body":{"index.html":{}}}],["puq/metafunding",{"_index":267,"title":{},"body":{"index.html":{}}}],["puq/names",{"_index":64,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"dependencies.html":{}}}],["puq/type",{"_index":68,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["readonly",{"_index":118,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":18,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["reflect.definemetadata(this.entity",{"_index":187,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.name",{"_index":190,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.names",{"_index":189,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.paths",{"_index":188,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.definemetadata(this.public",{"_index":192,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.entity",{"_index":200,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.keys",{"_index":203,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.name",{"_index":204,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.names",{"_index":202,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.paths",{"_index":201,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflect.getmetadata(this.public",{"_index":199,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflection",{"_index":16,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["reflector",{"_index":128,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["remarks",{"_index":177,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["repository",{"_index":330,"title":{},"body":{"properties.html":{}}}],["requests",{"_index":170,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["requires",{"_index":92,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resoruce",{"_index":145,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resouce",{"_index":155,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resource",{"_index":12,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["resourcecontroller",{"_index":241,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resourcemetadata",{"_index":112,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resourcemetadatamanager",{"_index":1,"title":{"classes/ResourceMetadataManager.html":{}},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["resourcemetadatamanager.get(userresource.prototype",{"_index":89,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcemetadatamanager.set",{"_index":84,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcemetadataoptions",{"_index":109,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resourcename",{"_index":121,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resourcename(target",{"_index":160,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["resources",{"_index":38,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["rest",{"_index":26,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["results",{"_index":205,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieve",{"_index":21,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["retrieved",{"_index":114,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["retrieving",{"_index":77,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["return",{"_index":169,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["returns",{"_index":144,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{}}}],["robert",{"_index":333,"title":{},"body":{"properties.html":{}}}],["robert.brightline@gmail.com",{"_index":317,"title":{},"body":{"index.html":{}}}],["running",{"_index":312,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":47,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["safety",{"_index":257,"title":{},"body":{"index.html":{}}}],["secure",{"_index":289,"title":{},"body":{"index.html":{}}}],["securely",{"_index":314,"title":{},"body":{"index.html":{}}}],["see",{"_index":107,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["set",{"_index":76,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["set(options",{"_index":163,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["setresourcemetadata",{"_index":218,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setresourcemetadata(options",{"_index":235,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setresourcemetadataoptions",{"_index":219,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["setting",{"_index":74,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["simple",{"_index":262,"title":{},"body":{"index.html":{}}}],["smoothly",{"_index":313,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["src/.../resource",{"_index":337,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../set",{"_index":234,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/resource",{"_index":6,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/set",{"_index":216,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":247,"title":{"index.html":{}},"body":{}}],["statements",{"_index":210,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":117,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["stays",{"_index":286,"title":{},"body":{"index.html":{}}}],["storage",{"_index":255,"title":{},"body":{"index.html":{}}}],["store",{"_index":256,"title":{},"body":{"index.html":{}}}],["stored",{"_index":102,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["stores",{"_index":50,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["string",{"_index":162,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["strongly",{"_index":54,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["structure",{"_index":113,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["such",{"_index":23,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["summary",{"_index":249,"title":{},"body":{"index.html":{}}}],["support",{"_index":32,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["supporting",{"_index":280,"title":{},"body":{"index.html":{}}}],["supports",{"_index":58,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["swc/helpers",{"_index":227,"title":{},"body":{"dependencies.html":{}}}],["symbol",{"_index":127,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:class",{"_index":124,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:keys",{"_index":129,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('entity:names",{"_index":133,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('is:public",{"_index":137,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('resource:name",{"_index":131,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbol('rest:paths",{"_index":135,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["symbols",{"_index":104,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["t",{"_index":140,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["table",{"_index":224,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":223,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":273,"title":{},"body":{"index.html":{}}}],["target",{"_index":52,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["thank",{"_index":268,"title":{},"body":{"index.html":{}}}],["this.entity(target",{"_index":194,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.ispublic(target",{"_index":198,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.names(target",{"_index":195,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.paths(target",{"_index":196,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["this.resourcename(target",{"_index":197,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["time",{"_index":274,"title":{},"body":{"index.html":{}}}],["toward",{"_index":295,"title":{},"body":{"index.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["type",{"_index":69,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":335,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":55,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["typeorm",{"_index":37,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["types",{"_index":260,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":13,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["typically",{"_index":72,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["unique",{"_index":103,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["up",{"_index":287,"title":{},"body":{"index.html":{}}}],["updates",{"_index":298,"title":{},"body":{"index.html":{}}}],["usage",{"_index":71,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["use",{"_index":95,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{}}}],["used",{"_index":100,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["useful",{"_index":277,"title":{},"body":{"index.html":{}}}],["userresource",{"_index":81,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["userresource.prototype",{"_index":85,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["users",{"_index":307,"title":{},"body":{"index.html":{}}}],["using",{"_index":15,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["utility",{"_index":10,"title":{},"body":{"classes/ResourceMetadataManager.html":{},"index.html":{},"properties.html":{}}}],["value",{"_index":123,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["version",{"_index":320,"title":{},"body":{"properties.html":{}}}],["versions",{"_index":301,"title":{},"body":{"index.html":{}}}],["via",{"_index":45,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["void",{"_index":165,"title":{},"body":{"classes/ResourceMetadataManager.html":{}}}],["way",{"_index":251,"title":{},"body":{"index.html":{},"properties.html":{}}}],["well",{"_index":290,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ResourceMetadataManager.html":{"url":"classes/ResourceMetadataManager.html","title":"class - ResourceMetadataManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceMetadataManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/resource-metadata-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for managing resource metadata in a TypeScript application using reflection.\nThis class leverages the reflect-metadata library to attach and retrieve metadata for resource entities,\nsuch as entity classes, names, REST paths, and access control flags. It is designed to support metadata-driven\nframeworks (e.g., NestJS, TypeORM) where resources (e.g., API endpoints, database entities) need to be\ndynamically configured via decorators or runtime reflection.\nKey features:\n\nStores metadata (e.g., entity factory, resource names, paths) on target classes.\nProvides strongly-typed access to metadata via generic methods.\nSupports public/private resource designation for authentication/authorization bypass.\nIntegrates with @puq/names for naming and path conventions and @puq/type for type definitions.\n\nUsage typically involves:\n\nSetting metadata on a target class (e.g., via a decorator) using set.\nRetrieving metadata at runtime with get or individual accessor methods (e.g., entity, paths).\n\nExample :```typescript\nclass UserResource {\n  // Resource implementation\n}// Set metadata\nResourceMetadataManager.set({\n  target: UserResource.prototype,\n  entity: () => UserResource,\n  isPublic: true,\n});\n// Get metadata\nconst metadata = ResourceMetadataManager.get(UserResource.prototype);\nconsole.log(metadata.resourceName); // \"UserResource\"\nconsole.log(metadata.isPublic);     // true\nExample :\n- Requires `reflect-metadata` to be imported before use.\n- The `target` parameter typically expects a class prototype (e.g., `MyClass.prototype`) when used with decorators.\n- Metadata keys are stored as unique symbols to avoid naming collisions.\n\nSee {@link ResourceMetadataOptions} for metadata configuration options.\nSee {@link ResourceMetadata} for the structure of retrieved metadata.\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                ENTITY\n                            \n                            \n                                    Static\n                                    Readonly\n                                KEYS\n                            \n                            \n                                    Static\n                                    Readonly\n                                NAME\n                            \n                            \n                                    Static\n                                    Readonly\n                                NAMES\n                            \n                            \n                                    Static\n                                    Readonly\n                                PATHS\n                            \n                            \n                                    Static\n                                    Readonly\n                                PUBLIC\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                entity\n                            \n                            \n                                    Static\n                                get\n                            \n                            \n                                    Static\n                                isPublic\n                            \n                            \n                                    Static\n                                keys\n                            \n                            \n                                    Static\n                                names\n                            \n                            \n                                    Static\n                                paths\n                            \n                            \n                                    Static\n                                resourceName\n                            \n                            \n                                    Static\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        ENTITY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:class')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:108\n                        \n                    \n\n            \n                \n                    Unique symbol for entity class in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        KEYS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:keys')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:118\n                        \n                    \n\n            \n                \n                    Entity keys\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        NAME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('resource:name')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:128\n                        \n                    \n\n            \n                \n                    Unique symbol for entity class in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        NAMES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('entity:names')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:113\n                        \n                    \n\n            \n                \n                    Unique symbol for entity names in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        PATHS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('rest:paths')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:123\n                        \n                    \n\n            \n                \n                    Unique symbol for rest-paths in reflector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        PUBLIC\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('is:public')\n                    \n                \n                    \n                        \n                                Defined in src/lib/resource-metadata-manager.ts:133\n                        \n                    \n\n            \n                \n                    Unique symbol for public metadata\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        entity\n                        \n                    \n                \n            \n            \n                \n                        \n                    entity(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:183\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get the factory function that returns resoruce entity ()=>Type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Type\n\n                        \n                            \n                                \nfunction that returns the resource entity ()=> Type\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:160\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    decorator target (just pass the decorator target)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ResourceMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isPublic\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPublic(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:175\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Is public resource or not\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nfunction that returns the resource entity ()=> Type\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        keys\n                        \n                    \n                \n            \n            \n                \n                        \n                    keys(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:210\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get entity keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Keys\n\n                        \n                            \n                                \nresouce name\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        names\n                        \n                    \n                \n            \n            \n                \n                        \n                    names(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:201\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get Names for the resource entity.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Names\n\n                        \n                            \n                                \n{@link Names}\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        paths\n                        \n                    \n                \n            \n            \n                \n                        \n                    paths(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:192\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get paths for the resource entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Paths\n\n                        \n                            \n                                \n{@link Paths}\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        resourceName\n                        \n                    \n                \n            \n            \n                \n                        \n                    resourceName(target: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:219\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Get resource name from the metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    target class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nresouce name\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(options: Readonly>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/resource-metadata-manager.ts:140\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Set resource metadata by resource entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Readonly>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'reflect-metadata';\nimport { Names, names, Paths, paths } from '@puq/names';\nimport type { Keys, Type } from '@puq/type';\n\n/**\n * Resource metadata options to create and set the metadata\n */\nexport type ResourceMetadataOptions = {\n  /**\n   * decorator target\n   */\n  target: T;\n\n  /**\n   * entity class factory function that return the resource entity class\n   */\n  entity: () => Type;\n  /**\n   * if set true, the requests bypass the authentication and authorization\n   */\n  isPublic?: boolean;\n};\n\n/**\n * Created metadata\n */\nexport type ResourceMetadata = {\n  /**\n   * Resource name which is the name of the entity\n   */\n  resourceName: string;\n\n  /**\n   * Factory function that returns the entity class\n   */\n  entity: () => Type;\n\n  /**\n   * Resource paths\n   */\n  paths: Readonly;\n\n  /**\n   * Resource names\n   */\n  names: Readonly;\n\n  /**\n   * Public resource\n   */\n  isPublic?: boolean;\n\n  /**\n   * Entity columns\n   */\n  keys?: Keys;\n};\n\n/**\n * A utility class for managing resource metadata in a TypeScript application using reflection.\n *\n * This class leverages the `reflect-metadata` library to attach and retrieve metadata for resource entities,\n * such as entity classes, names, REST paths, and access control flags. It is designed to support metadata-driven\n * frameworks (e.g., NestJS, TypeORM) where resources (e.g., API endpoints, database entities) need to be\n * dynamically configured via decorators or runtime reflection.\n *\n * Key features:\n * - Stores metadata (e.g., entity factory, resource names, paths) on target classes.\n * - Provides strongly-typed access to metadata via generic methods.\n * - Supports public/private resource designation for authentication/authorization bypass.\n * - Integrates with `@puq/names` for naming and path conventions and `@puq/type` for type definitions.\n *\n * Usage typically involves:\n * 1. Setting metadata on a target class (e.g., via a decorator) using `set`.\n * 2. Retrieving metadata at runtime with `get` or individual accessor methods (e.g., `entity`, `paths`).\n *\n * @example\n * ```typescript\n * class UserResource {\n *   // Resource implementation\n * }\n *\n * // Set metadata\n * ResourceMetadataManager.set({\n *   target: UserResource.prototype,\n *   entity: () => UserResource,\n *   isPublic: true,\n * });\n *\n * // Get metadata\n * const metadata = ResourceMetadataManager.get(UserResource.prototype);\n * console.log(metadata.resourceName); // \"UserResource\"\n * console.log(metadata.isPublic);     // true\n * ```\n *\n * @remarks\n * - Requires `reflect-metadata` to be imported before use.\n * - The `target` parameter typically expects a class prototype (e.g., `MyClass.prototype`) when used with decorators.\n * - Metadata keys are stored as unique symbols to avoid naming collisions.\n *\n * @see {@link ResourceMetadataOptions} for metadata configuration options.\n * @see {@link ResourceMetadata} for the structure of retrieved metadata.\n */\nexport class ResourceMetadataManager {\n  /**\n   * Unique symbol for entity class in reflector\n   */\n  static readonly ENTITY = Symbol('entity:class');\n\n  /**\n   * Unique symbol for entity names in reflector\n   */\n  static readonly NAMES = Symbol('entity:names');\n\n  /**\n   * Entity keys\n   */\n  static readonly KEYS = Symbol('entity:keys');\n\n  /**\n   * Unique symbol for rest-paths in reflector\n   */\n  static readonly PATHS = Symbol('rest:paths');\n\n  /**\n   * Unique symbol for entity class in reflector\n   */\n  static readonly NAME = Symbol('resource:name');\n\n  /**\n   * Unique symbol for public metadata\n   */\n  static readonly PUBLIC = Symbol('is:public');\n\n  /**\n   * Set resource metadata by resource entity\n   * @param target target class\n   * @param entity resource entity factory class `()=> Type`\n   */\n  static set(\n    options: Readonly>,\n  ): void {\n    const constructor = options.target.constructor;\n    const __entityFactory = options.entity;\n    const __paths = paths(__entityFactory().name);\n    const __names = names(__entityFactory().name);\n\n    Reflect.defineMetadata(this.ENTITY, __entityFactory, constructor);\n    Reflect.defineMetadata(this.PATHS, __paths, constructor);\n    Reflect.defineMetadata(this.NAMES, __names, constructor);\n    Reflect.defineMetadata(this.NAME, __names.className, constructor);\n    Reflect.defineMetadata(this.PUBLIC, !!options.isPublic, constructor);\n  }\n\n  /**\n   *\n   * @param target decorator target (just pass the decorator target)\n   * @returns\n   */\n  static get(target: T): ResourceMetadata {\n    return {\n      entity: this.entity(target),\n      names: this.names(target),\n      paths: this.paths(target),\n      resourceName: this.resourceName(target),\n      isPublic: this.isPublic(target),\n    };\n  }\n\n  /**\n   * Is public resource or not\n   * @param target target class\n   * @returns - function that returns the resource entity `()=> Type`\n   */\n  static isPublic(target: T): boolean {\n    return Reflect.getMetadata(this.PUBLIC, target) === true;\n  }\n  /**\n   * Get the factory function that returns resoruce entity `()=>Type`\n   * @param target target class\n   * @returns - function that returns the resource entity `()=> Type`\n   */\n  static entity(target: T): () => Type {\n    return Reflect.getMetadata(this.ENTITY, target);\n  }\n\n  /**\n   * Get paths for the resource entity\n   * @param target target class\n   * @returns - {@link Paths}\n   */\n  static paths(target: T): Paths {\n    return Reflect.getMetadata(this.PATHS, target);\n  }\n\n  /**\n   * Get {@link Names} for the resource entity.\n   * @param target target class\n   * @returns - {@link Names}\n   */\n  static names(target: T): Names {\n    return Reflect.getMetadata(this.NAMES, target);\n  }\n\n  /**\n   * Get entity keys\n   * @param target target class\n   * @returns - resouce name\n   */\n  static keys(target: T): Keys {\n    return Reflect.getMetadata(this.KEYS, target);\n  }\n\n  /**\n   * Get resource name from the metadata\n   * @param target target class\n   * @returns - resouce name\n   */\n  static resourceName(target: T): string {\n    return Reflect.getMetadata(this.NAME, target);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/resource-metadata-manager.ts\n            \n            class\n            ResourceMetadataManager\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                        src/lib/resource-metadata-manager.ts\n            \n            type alias\n            ResourceMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/resource-metadata-manager.ts\n            \n            type alias\n            ResourceMetadataOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/set-resource-metadata.decorator.ts\n            \n            function\n            SetResourceMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/set-resource-metadata.decorator.ts\n            \n            type alias\n            SetResourceMetadataOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ^0.5.15\n        \n            @puq/names : ^0.4.11\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            reflect-metadata : ^0.2.2\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SetResourceMetadata   (src/.../set-resource-metadata.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/set-resource-metadata.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SetResourceMetadata\n                        \n                    \n                \n            \n            \n                \nSetResourceMetadata(options: Readonly)\n                \n            \n\n\n\n\n            \n                \n                        Set metadata for the resource controlller that method and class decorator can access using ResourceMetadataManager\nThis decorator must be used as the first property of the resource controller class\nExample :class ResourceController {\n   '@SetResourceMetadata({\n     entity:()=> EntityClass,\n     isPublic:true (public resource)\n   })\n   __metadata__:any;\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     PropertyDecorator\n\n                        \n                            \n                                \n{@link PropertyDecorator}\n\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@puq/meta\nSummary\nA TypeScript utility for managing resource metadata using the reflect-metadata library. This module provides a way to define and retrieve metadata for resource entities, such as entity classes, names, paths, and public access flags, typically used in frameworks like REST APIs or ORMs.\nFeatures\n\nMetadata Storage: Store metadata (e.g., entity factory, resource names, paths) on target classes - using reflect-metadata.\nType Safety: Strongly typed with TypeScript generics and custom types (Names, Paths, Keys, Type).\nPublic Access Control: Mark resources as public to bypass authentication/authorization.\nSimple API: Easy-to-use static methods for setting and retrieving metadata.\n\nInstall\nExample :  pnpm add @puq/metaFunding\nThank you for using @puq/meta It's an open-source project, and maintaining it takes time and effort. If you find this library useful, please consider supporting its ongoing development. Your contributions help ensure that the project stays up-to-date, secure, and well-maintained.\nInstant Funding\nYour funding will go toward\n\nBug fixes and updates to ensure compatibility with the latest versions of dependencies.\nNew features that will make the library even more powerful.\nDocumentation improvements to help users get the most out of [Your Library Name].\nGeneral maintenance to keep the library running smoothly and securely.\n\nContact to the developer: [robert.brightline@gmail.com]\nSupport the developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.4.11\n        \n            Description : A TypeScript utility for managing resource metadata using the reflect-metadata library. This module provides a way to define and retrieve metadata for resource entities, such as entity classes, names, paths, and public access flags, typically used in frameworks like REST APIs or ORMs.\n        \n            Keywords : puq, meta\n        \n            Homepage : https://rbrightline.github.io/puq/meta\n        \n            Bugs : https://rbrightline.github.io\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/puq/tree/main\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResourceMetadata   (src/.../resource-metadata-manager.ts)\n                        \n                        \n                            ResourceMetadataOptions   (src/.../resource-metadata-manager.ts)\n                        \n                        \n                            SetResourceMetadataOptions   (src/.../set-resource-metadata.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/resource-metadata-manager.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceMetadata\n                \n            \n            \n                \n                    Created metadata\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceMetadataOptions\n                \n            \n            \n                \n                    Resource metadata options to create and set the metadata\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/set-resource-metadata.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SetResourceMetadataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
