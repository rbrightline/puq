import { Logger, Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { ScheduleModule } from '@nestjs/schedule';
import { ThrottlerModule } from '@nestjs/throttler';
import { TypeOrmModule } from '@nestjs/typeorm';
import {
  Create<%- className %>Dto,
  QueryMany<%- className %>Dto,
  QueryOne<%- className %>Dto,
  QueryCount<%- className %>Dto,
  <%- className %>,
  <%- className %>RelationParamDto,
  <%- className %>View,
  Update<%- className %>Dto,
} from '@puq/entity';
import { TableNamingStrategy } from '@puq/orm';
import { EventEmitterModule } from '@nestjs/event-emitter';
import { AppEnv, DataSourceEnv } from '@puq/env';
import { BasicResourceModule } from '@puq/module';
@Module({
  imports: [
    ConfigModule.forRoot({}),
    ScheduleModule.forRoot(),
    ThrottlerModule.forRoot([{ ttl: 60000, limit: 10 }]),
    EventEmitterModule.forRoot({ delimiter: '.' }),
    TypeOrmModule.forRootAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory(config: ConfigService) {
        const appEnv = new AppEnv({ name: '<%- fileName %>', profile: 'dev' });
        const PROFILE = config.getOrThrow(appEnv.PROFILE);
        const NAME = config.getOrThrow(appEnv.NAME);
        const dbEnv = new DataSourceEnv({ name: NAME, profile: PROFILE });

        return {
          type: 'postgres',
          host: config.getOrThrow<string>(dbEnv.DATABASE_HOST),
          port: config.getOrThrow<number>(dbEnv.DATABASE_PORT),
          username: config.getOrThrow<string>(dbEnv.DATABASE_USERNAME),
          password: config.getOrThrow<string>(dbEnv.DATABASE_PASSWORD),
          database: config.getOrThrow<string>(dbEnv.DATABASE_NAME),
          entities: [<%- className %>, <%- className %>View],
          namingStrategy: new TableNamingStrategy(),
          poolSize: 50,
          extra: {
            max: 50, // Maximum number of connections in the pool
            min: 4, // Minimum number of connections to keep open
            idleTimeoutMillis: 30000, // Close idle connections after 30 seconds
          },
        };
      },
    }),
    BasicResourceModule.configure({
      entity: () => <%- className %>,
      createDto: () => Create<%- className %>Dto,
      updateDto: () => Update<%- className %>Dto,
      queryManyDto: () => QueryMany<%- className %>Dto,
      queryOneDto: () => QueryOne<%- className %>Dto,
      queryCountDto: () => QueryCount<%- className %>Dto,
      relationDto: () => <%- className %>RelationParamDto,
      unsetRelationDto: () => <%- className %>RelationParamDto,
      isPublic: false,
    }),
  ],
  providers: [Logger],
})
export class <%- className %>AppModule {}
