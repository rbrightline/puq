{
    "entity test": {
        "prefix": "entity test",
        "body": [
            "import { DataSource, Repository } from 'typeorm';",
            "import {",
            "  $1,",
            "  $1View,",
            "  Create$1Dto,",
            "  sqliteTestDataSource,",
            "} from '../../src/index.js';",
            "import { faker } from '@faker-js/faker';",
            "",
            "/**",
            " * Generate {@link Create$1Dto} data",
            " * @returns",
            " */",
            "export function category(): Create$1Dto {",
            "  return {",
            "    name: faker.string.alpha(10),",
            "",
            "$0",
            "",
            "  };",
            "}",
            "",
            "describe('$1 Entity', () => {",
            "  let ds: DataSource;",
            "  let repo: Repository<$1>;",
            "  let viewRepo: Repository<$1View>;",
            "  let saved: $1;",
            "",
            "  beforeAll(async () => {",
            "    ds = await sqliteTestDataSource([$1, $1View]);",
            "",
            "    repo = ds.getRepository($1);",
            "    viewRepo = ds.getRepository($1View);",
            "    saved = await repo.save(category());",
            "  });",
            "",
            "  it('should establish the connection', () => {",
            "    expect(ds).toBeTruthy();",
            "  });",
            "",
            "  it('should intitialize the repository', () => {",
            "    expect(repo).toBeTruthy();",
            "    expect(viewRepo).toBeTruthy();",
            "  });",
            "",
            "  it('should create', async () => {",
            "    expect(saved).toBeTruthy();",
            "    expect(saved.id).toBeDefined();",
            "  });",
            "",
            "  it('should read', async () => {",
            "    expect(await viewRepo.findOneBy({ id: saved.id })).contain({",
            "      id: saved.id,",
            "      name: saved.name,",
            "    });",
            "  });",
            "});",
        ],
        "description": "Entit test",
        "scope": "typescript"
    },
}